package services

import (
	"context"
	"github.com/iota-agency/iota-erp/internal/domain/{{ .Name }}"
)

{{ $serviceName := print (.Name | Title) "Service" }}
{{ $returnType := print .Name "." .Type }}

type {{ $serviceName }} struct {
	repo {{ .Name }}.Repository
	app  *Application
}

func New{{ $serviceName }}(repo {{ .Name }}.Repository, app *Application) *{{ $serviceName }} {
	return &{{ $serviceName }}{
		repo: repo,
		app:  app,
	}
}

func (s *{{ $serviceName }}) Count(ctx context.Context) (int64, error) {
	return s.repo.Count(ctx)
}

func (s *{{ $serviceName }}) GetAll(ctx context.Context) ([]*{{ $returnType }}, error) {
	return s.repo.GetAll(ctx)
}

func (s *{{ $serviceName }}) GetByID(ctx context.Context, id int64) (*{{ $returnType }}, error) {
	return s.repo.GetByID(ctx, id)
}

func (s *{{ $serviceName }}) GetPaginated(ctx context.Context, limit, offset int, sortBy []string) ([]*{{ $returnType }}, error) {
	return s.repo.GetPaginated(ctx, limit, offset, sortBy)
}

func (s *{{ $serviceName }}) Create(ctx context.Context, data *{{ $returnType }}) error {
	if err := s.repo.Create(ctx, data); err != nil {
		return err
	}
	s.app.EventPublisher.Publish("{{ .Name }}.created", data)
	return nil
}

func (s *{{ $serviceName }}) Update(ctx context.Context, data *{{ $returnType }}) error {
	if err := s.repo.Update(ctx, data); err != nil {
		return err
	}
	s.app.EventPublisher.Publish("{{ .Name }}.updated", data)
	return nil
}

func (s *{{ $serviceName }}) Delete(ctx context.Context, id int64) error {
	if err := s.repo.Delete(ctx, id); err != nil {
		return err
	}
	s.app.EventPublisher.Publish("{{ .Name }}.deleted", id)
	return nil
}

package persistence

import (
	"context"
	"github.com/iota-agency/iota-erp/internal/domain/entities/{{ .Name }}"
	"github.com/iota-agency/iota-erp/sdk/composables"
	"github.com/iota-agency/iota-erp/sdk/graphql/helpers"
	"github.com/iota-agency/iota-erp/sdk/service"
)

{{ $nameUpperCase := .Name | Title }}
{{ $entityType := print .Name "." .Type }}
{{ $serviceName := print "Gorm" $nameUpperCase "Repository" }}

type {{ $serviceName }} struct {
}

func New{{ $nameUpperCase }}Repository() {{ .Name }}.Repository {
	return &{{ $serviceName }}{}
}

func (g *{{ $serviceName }}) GetPaginated(ctx context.Context, limit, offset int, sortBy []string) ([]*{{ $entityType }}, error) {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return nil, service.ErrNoTx
	}
	q := tx.Limit(limit).Offset(offset)
	q, err := helpers.ApplySort(q, sortBy, &{{ $entityType }}{})
	if err != nil {
		return nil, err
	}
	var entities []*{{ $entityType }}
	if err := q.Find(&entities).Error; err != nil {
		return nil, err
	}
	return entities, nil
}

func (g *{{ $serviceName }}) Count(ctx context.Context) (int64, error) {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return 0, service.ErrNoTx
	}
	var count int64
	if err := tx.Model(&{{ .Name }}.{{ .Type }}{}).Count(&count).Error; err != nil {
		return 0, err
	}
	return count, nil
}

func (g *{{ $serviceName }}) GetAll(ctx context.Context) ([]*{{ $entityType }}, error) {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return nil, service.ErrNoTx
	}
	var entities []*{{ $entityType }}
	if err := tx.Find(&entities).Error; err != nil {
		return nil, err
	}
	return entities, nil
}

func (g *{{ $serviceName }}) GetByID(ctx context.Context, id int64) (*{{ $entityType }}, error) {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return nil, service.ErrNoTx
	}
	var entity {{ .Name }}.{{ .Type }}
	if err := tx.First(&entity, id).Error; err != nil {
		return nil, err
	}
	return &entity, nil
}

func (g *{{ $serviceName }}) Create(ctx context.Context, data *{{ $entityType }}) error {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return service.ErrNoTx
	}
	if err := tx.Create(data).Error; err != nil {
		return err
	}
	return nil
}

func (g *{{ $serviceName }}) Update(ctx context.Context, data *{{ $entityType }}) error {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return service.ErrNoTx
	}
	if err := tx.Save(data).Error; err != nil {
		return err
	}
	return nil
}

func (g *{{ $serviceName }}) Delete(ctx context.Context, id int64) error {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return service.ErrNoTx
	}
	if err := tx.Delete(&{{ .Name }}.{{ .Type }}{}, id).Error; err != nil {
		return err
	}
	return nil
}

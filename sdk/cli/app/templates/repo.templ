package persistence

import (
	"context"
	"github.com/iota-agency/iota-erp/internal/domain/{{ .Domain }}"
	"github.com/iota-agency/iota-erp/sdk/composables"
	"github.com/iota-agency/iota-erp/sdk/service"
)

type Gorm{{ .Struct }} struct {
}

func New{{ .Struct }}() {{ .Domain }}.Repository {
	return &Gorm{{ .Struct }}{}
}

func (g *Gorm{{ .Struct }}) GetPaginated(ctx context.Context, limit, offset int, sortBy []string) ([]*{{ .DomainType }}, error) {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return nil, service.ErrNoTx
	}
	var uploads []*{{ .DomainType }}
	q := tx.Limit(limit).Offset(offset)
	for _, s := range sortBy {
		q = q.Order(s)
	}
	if err := q.Find(&uploads).Error; err != nil {
		return nil, err
	}
	return uploads, nil
}

func (g *Gorm{{ .Struct }}) Count(ctx context.Context) (int64, error) {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return 0, service.ErrNoTx
	}
	var count int64
	if err := tx.Model(&{{ .DomainType }}{}).Count(&count).Error; err != nil {
		return 0, err
	}
	return count, nil
}

func (g *Gorm{{ .Struct }}) GetAll(ctx context.Context) ([]*{{ .DomainType }}, error) {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return nil, service.ErrNoTx
	}
	var entities []*{{ .DomainType }}
	if err := tx.Find(&entities).Error; err != nil {
		return nil, err
	}
	return entities, nil
}

func (g *Gorm{{ .Struct }}) GetByID(ctx context.Context, id int64) (*{{ .DomainType }}, error) {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return nil, service.ErrNoTx
	}
	var entity {{ .DomainType }}
	if err := tx.First(&entity, id).Error; err != nil {
		return nil, err
	}
	return &entity, nil
}

func (g *Gorm{{ .Struct }}) Create(ctx context.Context, data *{{ .DomainType }}) error {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return service.ErrNoTx
	}
	if err := tx.Create(data).Error; err != nil {
		return err
	}
	return nil
}

func (g *Gorm{{ .Struct }}) Update(ctx context.Context, data *{{ .DomainType }}) error {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return service.ErrNoTx
	}
	if err := tx.Save(data).Error; err != nil {
		return err
	}
	return nil
}

func (g *Gorm{{ .Struct }}) Delete(ctx context.Context, id int64) error {
	tx, ok := composables.UseTx(ctx)
	if !ok {
		return service.ErrNoTx
	}
	if err := tx.Delete(&{{ .DomainType }}{}, id).Error; err != nil {
		return err
	}
	return nil
}

type EmployeeMeta {
    employeeId: ID!
    primaryLanguage: String
    secondaryLanguage: String
    tin: String
    birthDate: Time
    joinDate: Time
    leaveDate: Time
    generalInfo: String
    ytProfileId: String
    updatedAt: Time!
}

type Employee {
    id: ID!
    firstName: String!
    lastName: String!
    middleName: String
    email: String!
    phone: String
    salary: Float!
    hourlyRate: Float!
    positionId: ID!
    coefficient: Float!
    meta: EmployeeMeta
    position: Position
    avatarId: ID
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedEmployees {
    data: [Employee!]!
    total: Int64!
}

input EmployeeMetaInput {
    primaryLanguage: String
    secondaryLanguage: String
    tin: String
    birthDate: Time
    joinDate: Time
    leaveDate: Time
    generalInfo: String
    ytProfileId: String
}

input CreateEmployee {
    firstName: String!
    lastName: String!
    middleName: String
    email: String!
    phone: String
    salary: Float!
    hourlyRate: Float!
    positionId: ID!
    coefficient: Float!
    meta: EmployeeMetaInput
}

input UpdateEmployee {
    firstName: String
    lastName: String
    middleName: String
    email: String
    phone: String
    salary: Float
    hourlyRate: Float
    positionId: ID
    coefficient: Float
    meta: EmployeeMetaInput
}

extend type Query {
    employee(id: ID!): Employee
    employees(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedEmployees!
}

extend type Mutation {
    createEmployee(input: CreateEmployee!): Employee!
    updateEmployee(id: ID!, input: UpdateEmployee!): Employee!
    deleteEmployee(id: ID!): Employee!
}


extend type Subscription {
    employeeCreated: Employee!
    employeeUpdated: Employee!
    employeeDeleted: Employee!
}
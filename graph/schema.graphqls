# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time

type Session {
    token: String!
    userId: Int!
    ip: String!
    userAgent: String!
    expiresAt: Time!
    createdAt: Time!
}

type PaginatedSessions {
    data: [Session!]!
    total: Int!
}

type AuthenticationLog {
    id: ID!
    userId: Int!
    ip: String!
    userAgent: String!
    createdAt: Time!
}

type PaginatedAuthenticationLogs {
    data: [AuthenticationLog!]!
    total: Int!
}

type Permission {
    id: ID!
    description: String
    resource: String
    action: String
    modifier: String
}

type PaginatedPermissions {
    data: [Permission!]!
    total: Int!
}

type RolePermissions {
    permissionId: Int!
    roleId: Int!
}

type PaginatedRolePermissions {
    data: [RolePermissions!]!
    total: Int!
}

type ExpenseCategory {
    id: ID!
    name: String!
    description: String
    amount: Float!
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedExpenseCategories {
    data: [ExpenseCategory!]!
    total: Int!
}

type Expense {
    id: ID!
    amount: Float!
    categoryId: ID!
    category: ExpenseCategory
    date: Time!
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedExpenses {
    data: [Expense!]!
    total: Int!
}

type EmployeeMeta {
    employeeId: Int!
    primaryLanguage: String
    secondaryLanguage: String
    tin: String
    birthDate: Time
    joinDate: Time
    leaveDate: Time
    generalInfo: String
    ytProfileId: String
    updatedAt: Time!
}

type Position {
    id: ID!
    name: String!
    description: String
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedPositions {
    data: [Position!]!
    total: Int!
}

type Employee {
    id: ID!
    firstName: String!
    lastName: String!
    middleName: String
    email: String!
    phone: String
    salary: Float!
    hourlyRate: Float!
    positionId: Int!
    coefficient: Float!
    meta: EmployeeMeta
    position: Position
    avatarId: Int
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedEmployees {
    data: [Employee!]!
    total: Int!
}

type Role {
    id: ID!
    name: String!
    description: String
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedRoles {
    data: [Role!]!
    total: Int!
}

type Upload {
    id: ID!
    name: String!
    path: String!
    uploaderId: ID
    mimetype: String!
    size: Float!
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedUploads {
    data: [Upload!]!
    total: Int!
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    middleName: String
    email: String!
    avatar: Upload
    avatarId: ID
    employeeId: ID
    lastIp: String
    lastLogin: Time
    lastAction: Time
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedUsers {
    data: [User!]!
    total: Int!
}

type Query {
    user(id: ID!): User
    users(offset: Int!, limit: Int!, sortBy: [String]): PaginatedUsers!

    upload(id: ID!): Upload
    uploads(offset: Int!, limit: Int!, sortBy: [String]): PaginatedUploads!

    employee(id: ID!): Employee
    employees(offset: Int!, limit: Int!, sortBy: [String]): PaginatedEmployees!

    position(id: ID!): Position
    positions(offset: Int!, limit: Int!, sortBy: [String]): PaginatedPositions!

    role(id: ID!): Role
    roles(offset: Int!, limit: Int!, sortBy: [String]): PaginatedRoles!

    permission(id: ID!): Permission
    permissions(offset: Int!, limit: Int!, sortBy: [String]): PaginatedPermissions!

    rolePermission(roleId: Int!, permissionId: Int!): RolePermissions
    rolePermissions(offset: Int!, limit: Int!, sortBy: [String]): PaginatedRolePermissions!

    expenseCategory(id: ID!): ExpenseCategory
    expenseCategories(offset: Int!, limit: Int!, sortBy: [String]): PaginatedExpenseCategories!

    expense(id: ID!): Expense
    expenses(offset: Int!, limit: Int!, sortBy: [String]): PaginatedExpenses!

    authenticationLog(id: ID!): AuthenticationLog
    authenticationLogs(offset: Int!, limit: Int!, sortBy: [String]): PaginatedAuthenticationLogs!

    session(token: String!): Session
    sessions(offset: Int!, limit: Int!, sortBy: [String]): PaginatedSessions!
}

input CreateUser {
    firstName: String!
    lastName: String!
    email: String!
    password: String
    employeeId: Int
    avatarId: Int
}

input UpdateUser {
    firstName: String
    lastName: String
    email: String
    password: String
    employeeId: Int
    avatarId: Int
}

input CreateRole {
    name: String!
    description: String
}

input UpdateRole {
    name: String
    description: String
}

input CreateRolePermission {
    roleId: Int!
    permissionId: Int!
}

input CreateExpenseCategory {
    name: String!
    amount: Float!
    description: String
}

input UpdateExpenseCategory {
    name: String
    amount: Float
    description: String
}

input CreateExpense {
    amount: Float!
    categoryId: ID!
    date: String
}

input UpdateExpense {
    amount: Float
    categoryId: ID
    date: String
}

input CreatePosition {
    name: String!
    description: String
}

input UpdatePosition {
    name: String
    description: String
}

type Mutation {
    authenticate(email: String!, password: String!): Session!

    createUser(input: CreateUser!): User!
    updateUser(id: ID!, input: UpdateUser!): User!
    deleteUser(id: ID!): Boolean!

    createRole(input: CreateRole!): Role!
    updateRole(id: ID!, input: UpdateRole!): Role!
    deleteRole(id: ID!): Boolean!

    createRolePermission(input: CreateRolePermission!): RolePermissions!

    createExpenseCategory(input: CreateExpenseCategory!): ExpenseCategory!
    updateExpenseCategory(id: ID!, input: UpdateExpenseCategory!): ExpenseCategory!
    deleteExpenseCategory(id: ID!): Boolean!

    createExpense(input: CreateExpense!): Expense!
    updateExpense(id: ID!, input: UpdateExpense!): Expense!
    deleteExpense(id: ID!): Boolean!

    createPosition(input: CreatePosition!): Position!
    updatePosition(id: ID!, input: UpdatePosition!): Position!
    deletePosition(id: ID!): Boolean!

    deleteSession(token: String!): Boolean!
}

package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"github.com/iota-agency/iota-erp/sdk/composables"
	"github.com/iota-agency/iota-erp/sdk/mapper"
	"net/http"
	"time"

	model "github.com/iota-agency/iota-erp/graph/gqlmodels"
	"github.com/iota-agency/iota-erp/models"
	"github.com/iota-agency/iota-erp/pkg/utils"
	"github.com/iota-agency/iota-erp/sdk/graphql/helpers"
	"github.com/iota-agency/iota-erp/sdk/service"
)

// Authenticate is the resolver for the authenticate field.
func (r *mutationResolver) Authenticate(ctx context.Context, email string, password string) (*model.Session, error) {
	params, ok := composables.UseParams[any, any](ctx)
	if !ok {
		return nil, fmt.Errorf("request params not found")
	}
	_, session, err := r.AuthService.Authenticate(email, password, params.Ip, params.UserAgent)
	if err != nil {
		return nil, err
	}
	cookie := &http.Cookie{
		Name:     "token",
		Value:    session.Token,
		Expires:  time.Now().Add(utils.SessionDuration()),
		HttpOnly: false,
		SameSite: http.SameSiteNoneMode,
		Secure:   false,
		Domain:   utils.GetEnv("DOMAIN", "localhost"),
	}
	http.SetCookie(params.Writer, cookie)
	return session.ToGraph(), nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUser) (*model.User, error) {
	user := &models.User{
		FirstName:  input.FirstName,
		LastName:   input.LastName,
		Email:      input.Email,
		EmployeeId: input.EmployeeID,
		AvatarId:   input.AvatarID,
	}
	if input.Password != nil {
		if err := user.SetPassword(*input.Password); err != nil {
			return nil, err
		}
	}
	if err := r.UsersService.Create(ctx, user); err != nil {
		return nil, err
	}
	return user.ToGraph(), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int64, input model.UpdateUser) (*model.User, error) {
	user := &models.User{}
	if err := mapper.LenientMapping(input, user); err != nil {
		return nil, err
	}
	if input.Password != nil {
		if err := user.SetPassword(*input.Password); err != nil {
			return nil, err
		}
	}
	if err := r.UsersService.Update(ctx, id, user); err != nil {
		return nil, err
	}
	return user.ToGraph(), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int64) (bool, error) {
	if err := r.UsersService.Delete(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.CreateRole) (*model.Role, error) {
	role := &models.Role{}
	if err := mapper.LenientMapping(input, role); err != nil {
		return nil, err
	}
	if err := r.Db.Create(role).Error; err != nil {
		return nil, err
	}
	return role.ToGraph(), nil
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id int64, input model.UpdateRole) (*model.Role, error) {
	role := &models.Role{}
	if err := mapper.LenientMapping(input, role); err != nil {
		return nil, err
	}
	if err := r.Db.First(role, id).Error; err != nil {
		return nil, err
	}
	if err := r.Db.Save(role).Error; err != nil {
		return nil, err
	}
	return role.ToGraph(), nil
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id int64) (bool, error) {
	role := &models.Role{}
	if err := r.Db.First(role, id).Error; err != nil {
		return false, err
	}
	if err := r.Db.Delete(role).Error; err != nil {
		return false, err
	}
	return true, nil
}

// CreateRolePermission is the resolver for the createRolePermission field.
func (r *mutationResolver) CreateRolePermission(ctx context.Context, input model.CreateRolePermission) (*model.RolePermissions, error) {
	panic(fmt.Errorf("not implemented: CreateRolePermission - createRolePermission"))
}

// CreateExpenseCategory is the resolver for the createExpenseCategory field.
func (r *mutationResolver) CreateExpenseCategory(ctx context.Context, input model.CreateExpenseCategory) (*model.ExpenseCategory, error) {
	expenseCategory := &models.ExpenseCategory{
		Name:        input.Name,
		Description: input.Description,
	}
	if err := r.Db.Create(expenseCategory).Error; err != nil {
		return nil, err
	}
	return expenseCategory.ToGraph(), nil
}

// UpdateExpenseCategory is the resolver for the updateExpenseCategory field.
func (r *mutationResolver) UpdateExpenseCategory(ctx context.Context, id int64, input model.UpdateExpenseCategory) (*model.ExpenseCategory, error) {
	panic(fmt.Errorf("not implemented: UpdateExpenseCategory - updateExpenseCategory"))
}

// DeleteExpenseCategory is the resolver for the deleteExpenseCategory field.
func (r *mutationResolver) DeleteExpenseCategory(ctx context.Context, id int64) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteExpenseCategory - deleteExpenseCategory"))
}

// CreateExpense is the resolver for the createExpense field.
func (r *mutationResolver) CreateExpense(ctx context.Context, input model.CreateExpense) (*model.Expense, error) {
	expense := &models.Expense{
		Amount:     input.Amount,
		CategoryId: input.CategoryID,
	}
	if err := r.Db.Create(expense).Error; err != nil {
		return nil, err
	}
	return expense.ToGraph(), nil
}

// UpdateExpense is the resolver for the updateExpense field.
func (r *mutationResolver) UpdateExpense(ctx context.Context, id int64, input model.UpdateExpense) (*model.Expense, error) {
	panic(fmt.Errorf("not implemented: UpdateExpense - updateExpense"))
}

// DeleteExpense is the resolver for the deleteExpense field.
func (r *mutationResolver) DeleteExpense(ctx context.Context, id int64) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteExpense - deleteExpense"))
}

// CreatePosition is the resolver for the createPosition field.
func (r *mutationResolver) CreatePosition(ctx context.Context, input model.CreatePosition) (*model.Position, error) {
	panic(fmt.Errorf("not implemented: CreatePosition - createPosition"))
}

// UpdatePosition is the resolver for the updatePosition field.
func (r *mutationResolver) UpdatePosition(ctx context.Context, id int64, input model.UpdatePosition) (*model.Position, error) {
	panic(fmt.Errorf("not implemented: UpdatePosition - updatePosition"))
}

// DeletePosition is the resolver for the deletePosition field.
func (r *mutationResolver) DeletePosition(ctx context.Context, id int64) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePosition - deletePosition"))
}

// DeleteSession is the resolver for the deleteSession field.
func (r *mutationResolver) DeleteSession(ctx context.Context, token string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSession - deleteSession"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int64) (*model.User, error) {
	user := &models.User{}
	if err := r.Db.First(user, id).Error; err != nil {
		return nil, err
	}
	return user.ToGraph(), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, offset int, limit int, sortBy []string) (*model.PaginatedUsers, error) {
	preloads := helpers.GetPreloads(ctx)
	params := &service.FindParams{
		Offset: offset,
		Limit:  limit,
		SortBy: sortBy,
	}
	// TODO: come up with something better
	if helpers.HasAssociation(preloads, "avatar") {
		params.Joins = append(params.Joins, "Avatar")
	}
	users, err := r.UsersService.GetAll(ctx, params)
	if err != nil {
		return nil, err
	}
	result := make([]*model.User, len(users))
	for _, user := range users {
		result = append(result, user.ToGraph())
	}
	total, err := r.UsersService.Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.PaginatedUsers{
		Data:  result,
		Total: total,
	}, nil
}

// Upload is the resolver for the upload field.
func (r *queryResolver) Upload(ctx context.Context, id int64) (*model.Upload, error) {
	panic(fmt.Errorf("not implemented: Upload - upload"))
}

// Uploads is the resolver for the uploads field.
func (r *queryResolver) Uploads(ctx context.Context, offset int, limit int, sortBy []*string) (*model.PaginatedUploads, error) {
	panic(fmt.Errorf("not implemented: Uploads - uploads"))
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id int64) (*model.Employee, error) {
	employee := &models.Employee{}
	if err := r.Db.First(employee, id).Error; err != nil {
		return nil, err
	}
	return employee.ToGraph(), nil
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context, offset int, limit int, sortBy []*string) (*model.PaginatedEmployees, error) {
	var employees []*models.Employee
	if err := r.Db.Offset(offset).Limit(limit).Find(&employees).Error; err != nil {
		return nil, err
	}
	var result []*model.Employee
	for _, employee := range employees {
		result = append(result, employee.ToGraph())
	}
	var total int64
	if err := r.Db.Model(models.Employee{}).Count(&total).Error; err != nil {
		return nil, err
	}
	return &model.PaginatedEmployees{
		Data:  result,
		Total: total,
	}, nil
}

// Position is the resolver for the position field.
func (r *queryResolver) Position(ctx context.Context, id int64) (*model.Position, error) {
	position := &models.Position{}
	if err := r.Db.First(position, id).Error; err != nil {
		return nil, err
	}
	return position.ToGraph(), nil
}

// Positions is the resolver for the positions field.
func (r *queryResolver) Positions(ctx context.Context, offset int, limit int, sortBy []*string) (*model.PaginatedPositions, error) {
	var positions []*models.Position
	if err := r.Db.Offset(offset).Limit(limit).Find(&positions).Error; err != nil {
		return nil, err
	}
	var result []*model.Position
	for _, position := range positions {
		result = append(result, position.ToGraph())
	}
	var total int64
	if err := r.Db.Model(models.Position{}).Count(&total).Error; err != nil {
		return nil, err
	}
	return &model.PaginatedPositions{
		Data:  result,
		Total: total,
	}, nil
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id int64) (*model.Role, error) {
	role := &models.Role{}
	if err := r.Db.First(role, id).Error; err != nil {
		return nil, err
	}
	return role.ToGraph(), nil
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, offset int, limit int, sortBy []*string) (*model.PaginatedRoles, error) {
	var roles []*models.Role
	if err := r.Db.Offset(offset).Limit(limit).Find(&roles).Error; err != nil {
		return nil, err
	}
	var result []*model.Role
	for _, role := range roles {
		result = append(result, role.ToGraph())
	}
	var total int64
	if err := r.Db.Model(models.Role{}).Count(&total).Error; err != nil {
		return nil, err
	}
	return &model.PaginatedRoles{
		Data:  result,
		Total: total,
	}, nil
}

// Permission is the resolver for the permission field.
func (r *queryResolver) Permission(ctx context.Context, id int64) (*model.Permission, error) {
	permission := &models.Permission{}
	if err := r.Db.First(permission, id).Error; err != nil {
		return nil, err
	}
	return permission.ToGraph(), nil
}

// Permissions is the resolver for the permissions field.
func (r *queryResolver) Permissions(ctx context.Context, offset int, limit int, sortBy []*string) (*model.PaginatedPermissions, error) {
	var permissions []*models.Permission
	if err := r.Db.Offset(offset).Limit(limit).Find(&permissions).Error; err != nil {
		return nil, err
	}
	var result []*model.Permission
	for _, permission := range permissions {
		result = append(result, permission.ToGraph())
	}
	var total int64
	if err := r.Db.Model(models.Permission{}).Count(&total).Error; err != nil {
		return nil, err
	}
	return &model.PaginatedPermissions{
		Data:  result,
		Total: total,
	}, nil
}

// RolePermission is the resolver for the rolePermission field.
func (r *queryResolver) RolePermission(ctx context.Context, roleID int64, permissionID int64) (*model.RolePermissions, error) {
	panic(fmt.Errorf("not implemented: RolePermission - rolePermission"))
}

// RolePermissions is the resolver for the rolePermissions field.
func (r *queryResolver) RolePermissions(ctx context.Context, offset int, limit int, sortBy []*string) (*model.PaginatedRolePermissions, error) {
	panic(fmt.Errorf("not implemented: RolePermissions - rolePermissions"))
}

// ExpenseCategory is the resolver for the expenseCategory field.
func (r *queryResolver) ExpenseCategory(ctx context.Context, id int64) (*model.ExpenseCategory, error) {
	panic(fmt.Errorf("not implemented: ExpenseCategory - expenseCategory"))
}

// ExpenseCategories is the resolver for the expenseCategories field.
func (r *queryResolver) ExpenseCategories(ctx context.Context, offset int, limit int, sortBy []*string) (*model.PaginatedExpenseCategories, error) {
	panic(fmt.Errorf("not implemented: ExpenseCategories - expenseCategories"))
}

// Expense is the resolver for the expense field.
func (r *queryResolver) Expense(ctx context.Context, id int64) (*model.Expense, error) {
	panic(fmt.Errorf("not implemented: Expense - expense"))
}

// Expenses is the resolver for the expenses field.
func (r *queryResolver) Expenses(ctx context.Context, offset int, limit int, sortBy []*string) (*model.PaginatedExpenses, error) {
	panic(fmt.Errorf("not implemented: Expenses - expenses"))
}

// AuthenticationLog is the resolver for the authenticationLog field.
func (r *queryResolver) AuthenticationLog(ctx context.Context, id int64) (*model.AuthenticationLog, error) {
	panic(fmt.Errorf("not implemented: AuthenticationLog - authenticationLog"))
}

// AuthenticationLogs is the resolver for the authenticationLogs field.
func (r *queryResolver) AuthenticationLogs(ctx context.Context, offset int, limit int, sortBy []*string) (*model.PaginatedAuthenticationLogs, error) {
	panic(fmt.Errorf("not implemented: AuthenticationLogs - authenticationLogs"))
}

// Session is the resolver for the session field.
func (r *queryResolver) Session(ctx context.Context, token string) (*model.Session, error) {
	panic(fmt.Errorf("not implemented: Session - session"))
}

// Sessions is the resolver for the sessions field.
func (r *queryResolver) Sessions(ctx context.Context, offset int, limit int, sortBy []*string) (*model.PaginatedSessions, error) {
	panic(fmt.Errorf("not implemented: Sessions - sessions"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"net/http"
	"time"

	model "github.com/iota-agency/iota-erp/graph/gqlmodels"
	"github.com/iota-agency/iota-erp/models"
	"github.com/iota-agency/iota-erp/pkg/utils"
)

// Authenticate is the resolver for the authenticate field.
func (r *mutationResolver) Authenticate(ctx context.Context, email string, password string) (*model.Session, error) {
	ip, ok := ctx.Value("ip").(string)
	if !ok {
		ip = "-"
	}
	userAgent, ok := ctx.Value("userAgent").(string)
	if !ok {
		userAgent = "-"
	}
	_, session, err := r.AuthService.Authenticate(email, password, ip, userAgent)
	if err != nil {
		return nil, err
	}
	writer := ctx.Value("writer").(http.ResponseWriter)
	cookie := &http.Cookie{
		Name:     "token",
		Value:    session.Token,
		Expires:  time.Now().Add(utils.SessionDuration()),
		HttpOnly: false,
		SameSite: http.SameSiteNoneMode,
		Secure:   false,
		Domain:   utils.GetEnv("DOMAIN", "localhost"),
	}
	http.SetCookie(writer, cookie)
	return session.ToGraph(), nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUser) (*model.User, error) {
	user := &models.User{
		FirstName: input.FirstName,
		LastName:  input.LastName,
	}
	if input.Email != nil {
		user.Email = *input.Email
	}
	if err := user.SetPassword(input.Password); err != nil {
		return nil, err
	}
	if err := r.Db.Create(user).Error; err != nil {
		return nil, err
	}
	return user.ToGraph(), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int64, input model.UpdateUser) (*model.User, error) {
	user := &models.User{}
	if err := r.Db.First(user, id).Error; err != nil {
		return nil, err
	}
	if input.FirstName != nil {
		user.FirstName = *input.FirstName
	}
	if input.LastName != nil {
		user.LastName = *input.LastName
	}
	if input.Email != nil {
		user.Email = *input.Email
	}
	if input.Password != nil {
		if err := user.SetPassword(*input.Password); err != nil {
			return nil, err
		}

	}
	if err := r.Db.Save(user).Error; err != nil {
		return nil, err
	}
	return user.ToGraph(), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int64) (bool, error) {
	user := &models.User{}
	if err := r.Db.First(user, id).Error; err != nil {
		return false, err
	}
	if err := r.Db.Delete(user).Error; err != nil {
		return false, err
	}
	return true, nil
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.CreateRole) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: CreateRole - createRole"))
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id int64, input model.UpdateRole) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: UpdateRole - updateRole"))
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id int64) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRole - deleteRole"))
}

// CreateRolePermission is the resolver for the createRolePermission field.
func (r *mutationResolver) CreateRolePermission(ctx context.Context, input model.CreateRolePermission) (*model.RolePermissions, error) {
	panic(fmt.Errorf("not implemented: CreateRolePermission - createRolePermission"))
}

// CreateExpenseCategory is the resolver for the createExpenseCategory field.
func (r *mutationResolver) CreateExpenseCategory(ctx context.Context, input model.CreateExpenseCategory) (*model.ExpenseCategory, error) {
	panic(fmt.Errorf("not implemented: CreateExpenseCategory - createExpenseCategory"))
}

// UpdateExpenseCategory is the resolver for the updateExpenseCategory field.
func (r *mutationResolver) UpdateExpenseCategory(ctx context.Context, id int64, input model.UpdateExpenseCategory) (*model.ExpenseCategory, error) {
	panic(fmt.Errorf("not implemented: UpdateExpenseCategory - updateExpenseCategory"))
}

// DeleteExpenseCategory is the resolver for the deleteExpenseCategory field.
func (r *mutationResolver) DeleteExpenseCategory(ctx context.Context, id int64) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteExpenseCategory - deleteExpenseCategory"))
}

// CreateExpense is the resolver for the createExpense field.
func (r *mutationResolver) CreateExpense(ctx context.Context, input model.CreateExpense) (*model.Expense, error) {
	panic(fmt.Errorf("not implemented: CreateExpense - createExpense"))
}

// UpdateExpense is the resolver for the updateExpense field.
func (r *mutationResolver) UpdateExpense(ctx context.Context, id int64, input model.UpdateExpense) (*model.Expense, error) {
	panic(fmt.Errorf("not implemented: UpdateExpense - updateExpense"))
}

// DeleteExpense is the resolver for the deleteExpense field.
func (r *mutationResolver) DeleteExpense(ctx context.Context, id int64) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteExpense - deleteExpense"))
}

// DeleteSession is the resolver for the deleteSession field.
func (r *mutationResolver) DeleteSession(ctx context.Context, token string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSession - deleteSession"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int64) (*model.User, error) {
	user := &models.User{}
	if err := r.Db.First(user, id).Error; err != nil {
		return nil, err
	}
	return user.ToGraph(), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*models.User
	if err := r.Db.Find(&users).Error; err != nil {
		return nil, err
	}
	var result []*model.User
	for _, user := range users {
		result = append(result, user.ToGraph())
	}
	return result, nil
}

// PaginatedUsers is the resolver for the paginatedUsers field.
func (r *queryResolver) PaginatedUsers(ctx context.Context, offset int, limit int) (*model.PaginatedUsers, error) {
	var users []*models.User
	if err := r.Db.Offset(offset).Limit(limit).Find(&users).Error; err != nil {
		return nil, err
	}
	var result []*model.User
	for _, user := range users {
		result = append(result, user.ToGraph())
	}
	return &model.PaginatedUsers{
		Data: result,
	}, nil
}

// Upload is the resolver for the upload field.
func (r *queryResolver) Upload(ctx context.Context, id int64) (*model.Uploads, error) {
	panic(fmt.Errorf("not implemented: Upload - upload"))
}

// Uploads is the resolver for the uploads field.
func (r *queryResolver) Uploads(ctx context.Context) ([]*model.Uploads, error) {
	panic(fmt.Errorf("not implemented: Uploads - uploads"))
}

// PaginatedUploads is the resolver for the paginatedUploads field.
func (r *queryResolver) PaginatedUploads(ctx context.Context, offset int, limit int) (*model.PaginatedUploads, error) {
	panic(fmt.Errorf("not implemented: PaginatedUploads - paginatedUploads"))
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id int64) (*model.Employee, error) {
	panic(fmt.Errorf("not implemented: Employee - employee"))
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context) ([]*model.Employee, error) {
	panic(fmt.Errorf("not implemented: Employees - employees"))
}

// PaginatedEmployees is the resolver for the paginatedEmployees field.
func (r *queryResolver) PaginatedEmployees(ctx context.Context, offset int, limit int) (*model.PaginatedEmployees, error) {
	panic(fmt.Errorf("not implemented: PaginatedEmployees - paginatedEmployees"))
}

// Position is the resolver for the position field.
func (r *queryResolver) Position(ctx context.Context, id int64) (*model.Position, error) {
	panic(fmt.Errorf("not implemented: Position - position"))
}

// Positions is the resolver for the positions field.
func (r *queryResolver) Positions(ctx context.Context) ([]*model.Position, error) {
	panic(fmt.Errorf("not implemented: Positions - positions"))
}

// PaginatedPositions is the resolver for the paginatedPositions field.
func (r *queryResolver) PaginatedPositions(ctx context.Context, offset int, limit int) (*model.PaginatedPositions, error) {
	panic(fmt.Errorf("not implemented: PaginatedPositions - paginatedPositions"))
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id int64) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: Role - role"))
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context) ([]*model.Role, error) {
	panic(fmt.Errorf("not implemented: Roles - roles"))
}

// PaginatedRoles is the resolver for the paginatedRoles field.
func (r *queryResolver) PaginatedRoles(ctx context.Context, offset int, limit int) (*model.PaginatedRoles, error) {
	panic(fmt.Errorf("not implemented: PaginatedRoles - paginatedRoles"))
}

// Permission is the resolver for the permission field.
func (r *queryResolver) Permission(ctx context.Context, id int64) (*model.Permission, error) {
	panic(fmt.Errorf("not implemented: Permission - permission"))
}

// Permissions is the resolver for the permissions field.
func (r *queryResolver) Permissions(ctx context.Context) ([]*model.Permission, error) {
	panic(fmt.Errorf("not implemented: Permissions - permissions"))
}

// PaginatedPermissions is the resolver for the paginatedPermissions field.
func (r *queryResolver) PaginatedPermissions(ctx context.Context, offset int, limit int) (*model.PaginatedPermissions, error) {
	panic(fmt.Errorf("not implemented: PaginatedPermissions - paginatedPermissions"))
}

// RolePermission is the resolver for the rolePermission field.
func (r *queryResolver) RolePermission(ctx context.Context, roleID int, permissionID int) (*model.RolePermissions, error) {
	panic(fmt.Errorf("not implemented: RolePermission - rolePermission"))
}

// RolePermissions is the resolver for the rolePermissions field.
func (r *queryResolver) RolePermissions(ctx context.Context) ([]*model.RolePermissions, error) {
	panic(fmt.Errorf("not implemented: RolePermissions - rolePermissions"))
}

// PaginatedRolePermissions is the resolver for the paginatedRolePermissions field.
func (r *queryResolver) PaginatedRolePermissions(ctx context.Context, offset int, limit int) (*model.PaginatedRolePermissions, error) {
	panic(fmt.Errorf("not implemented: PaginatedRolePermissions - paginatedRolePermissions"))
}

// ExpenseCategory is the resolver for the expenseCategory field.
func (r *queryResolver) ExpenseCategory(ctx context.Context, id int64) (*model.ExpenseCategory, error) {
	panic(fmt.Errorf("not implemented: ExpenseCategory - expenseCategory"))
}

// ExpenseCategories is the resolver for the expenseCategories field.
func (r *queryResolver) ExpenseCategories(ctx context.Context) ([]*model.ExpenseCategory, error) {
	panic(fmt.Errorf("not implemented: ExpenseCategories - expenseCategories"))
}

// PaginatedExpenseCategories is the resolver for the paginatedExpenseCategories field.
func (r *queryResolver) PaginatedExpenseCategories(ctx context.Context, offset int, limit int) (*model.PaginatedExpenseCategories, error) {
	panic(fmt.Errorf("not implemented: PaginatedExpenseCategories - paginatedExpenseCategories"))
}

// Expense is the resolver for the expense field.
func (r *queryResolver) Expense(ctx context.Context, id int64) (*model.Expense, error) {
	panic(fmt.Errorf("not implemented: Expense - expense"))
}

// Expenses is the resolver for the expenses field.
func (r *queryResolver) Expenses(ctx context.Context) ([]*model.Expense, error) {
	panic(fmt.Errorf("not implemented: Expenses - expenses"))
}

// PaginatedExpenses is the resolver for the paginatedExpenses field.
func (r *queryResolver) PaginatedExpenses(ctx context.Context, offset int, limit int) (*model.PaginatedExpenses, error) {
	panic(fmt.Errorf("not implemented: PaginatedExpenses - paginatedExpenses"))
}

// AuthenticationLog is the resolver for the authenticationLog field.
func (r *queryResolver) AuthenticationLog(ctx context.Context, id int64) (*model.AuthenticationLog, error) {
	panic(fmt.Errorf("not implemented: AuthenticationLog - authenticationLog"))
}

// AuthenticationLogs is the resolver for the authenticationLogs field.
func (r *queryResolver) AuthenticationLogs(ctx context.Context) ([]*model.AuthenticationLog, error) {
	panic(fmt.Errorf("not implemented: AuthenticationLogs - authenticationLogs"))
}

// PaginatedAuthenticationLogs is the resolver for the paginatedAuthenticationLogs field.
func (r *queryResolver) PaginatedAuthenticationLogs(ctx context.Context, offset int, limit int) (*model.PaginatedAuthenticationLogs, error) {
	panic(fmt.Errorf("not implemented: PaginatedAuthenticationLogs - paginatedAuthenticationLogs"))
}

// Session is the resolver for the session field.
func (r *queryResolver) Session(ctx context.Context, token string) (*model.Session, error) {
	panic(fmt.Errorf("not implemented: Session - session"))
}

// Sessions is the resolver for the sessions field.
func (r *queryResolver) Sessions(ctx context.Context) ([]*model.Session, error) {
	panic(fmt.Errorf("not implemented: Sessions - sessions"))
}

// PaginatedSessions is the resolver for the paginatedSessions field.
func (r *queryResolver) PaginatedSessions(ctx context.Context, offset int, limit int) (*model.PaginatedSessions, error) {
	panic(fmt.Errorf("not implemented: PaginatedSessions - paginatedSessions"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

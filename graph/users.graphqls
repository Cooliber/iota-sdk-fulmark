type Session {
    token: String!
    userId: ID!
    ip: String!
    userAgent: String!
    expiresAt: Time!
    createdAt: Time!
}

type PaginatedSessions {
    data: [Session!]!
    total: Int64!
}

type AuthenticationLog {
    id: ID!
    userId: ID!
    ip: String!
    userAgent: String!
    createdAt: Time!
}

type PaginatedAuthenticationLogs {
    data: [AuthenticationLog!]!
    total: Int64!
}

type ExpenseCategory {
    id: ID!
    name: String!
    description: String
    amount: Float!
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedExpenseCategories {
    data: [ExpenseCategory!]!
    total: Int64!
}

type EmployeeMeta {
    employeeId: ID!
    primaryLanguage: String
    secondaryLanguage: String
    tin: String
    birthDate: Time
    joinDate: Time
    leaveDate: Time
    generalInfo: String
    ytProfileId: String
    updatedAt: Time!
}

type Employee {
    id: ID!
    firstName: String!
    lastName: String!
    middleName: String
    email: String!
    phone: String
    salary: Float!
    hourlyRate: Float!
    positionId: ID!
    coefficient: Float!
    meta: EmployeeMeta
    position: Position
    avatarId: ID
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedEmployees {
    data: [Employee!]!
    total: Int64!
}

type Upload {
    id: ID!
    name: String!
    path: String!
    mimetype: String!
    size: Float!
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedUploads {
    data: [Upload!]!
    total: Int64!
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    middleName: String
    email: String!
    avatar: Upload
    avatarId: ID
    employeeId: ID
    lastIp: String
    lastLogin: Time
    lastAction: Time
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedUsers {
    data: [User!]!
    total: Int64!
}

type ToolCall {
    id: String!
    index: Int!
    type: String!
}

type Message {
    role: String!
    content: String!
    toolCalls: [ToolCall!]
}

type Dialogue {
    id: ID!
    userId: ID!
    label: String!
    messages: [Message!]!
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedDialogues {
    data: [Dialogue!]!
    total: Int64!
}

type Prompt {
    id: String!
    title: String!
    description: String!
    prompt: String!
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedPrompts {
    data: [Prompt!]!
    total: Int64!
}

extend type Query {
    user(id: ID!): User
    users(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedUsers!

    upload(id: ID!): Upload
    uploads(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedUploads!

    employee(id: ID!): Employee
    employees(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedEmployees!

    expenseCategory(id: ID!): ExpenseCategory
    expenseCategories(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedExpenseCategories!

    authenticationLog(id: ID!): AuthenticationLog
    authenticationLogs(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedAuthenticationLogs!

    session(token: String!): Session
    sessions(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedSessions!

    dialogue(id: ID!): Dialogue
    dialogues(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedDialogues!

    prompt(id: String!): Prompt
    prompts(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedPrompts!
}


input CreateUser {
    firstName: String!
    lastName: String!
    middleName: String
    email: String!
    password: String
    employeeId: ID
    avatarId: ID
}

input UpdateUser {
    firstName: String
    lastName: String
    middleName: String
    email: String
    password: String
    employeeId: ID
    avatarId: ID
}

input CreateExpenseCategory {
    name: String!
    amount: Float!
    description: String
}

input UpdateExpenseCategory {
    name: String
    amount: Float
    description: String
}

input NewDialogue {
    message: String!
    model: String
}

input DialogueReply {
    message: String!
    model: String
}

input UpdateDialogue {
    userId: ID
    label: String
}

input CreatePrompt {
    title: String!
    description: String
    prompt: String!
}

input UpdatePrompt {
    title: String
    description: String
    prompt: String
}

extend type Mutation {
    authenticate(email: String!, password: String!): Session!

    createUser(input: CreateUser!): User!
    updateUser(id: ID!, input: UpdateUser!): User!
    deleteUser(id: ID!): Boolean!

    createExpenseCategory(input: CreateExpenseCategory!): ExpenseCategory!
    updateExpenseCategory(id: ID!, input: UpdateExpenseCategory!): ExpenseCategory!
    deleteExpenseCategory(id: ID!): Boolean!

    createExpense(input: CreateExpense!): Expense!
    updateExpense(id: ID!, input: UpdateExpense!): Expense!
    deleteExpense(id: ID!): Boolean!

    deleteSession(token: String!): Boolean!

    newDialogue(input: NewDialogue!): Dialogue!
    replyDialogue(id: ID!, input: DialogueReply!): Dialogue!
    deleteDialogue(id: ID!): Boolean!

    createPrompt(input: CreatePrompt!): Prompt!
    updatePrompt(id: String!, input: UpdatePrompt!): Prompt!
}


type CompletionDelta {
    content: String!
}

extend type Subscription {
    userCreated: User!
    userUpdated: User!
    userDeleted: ID!

    expenseCategoryCreated: ExpenseCategory!
    expenseCategoryUpdated: ExpenseCategory!
    expenseCategoryDeleted: ID!

    sessionDeleted: ID!

    dialogueCreated: Dialogue!
    dialogueUpdated: Dialogue!

    promptCreated: Prompt!
    promptUpdated: Prompt!
    promptDeleted: ID!
}

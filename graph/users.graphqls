type User {
    id: ID!
    firstName: String!
    lastName: String!
    middleName: String
    email: String!
    avatar: Upload
    avatarId: ID
    employeeId: ID
    lastIp: String
    lastLogin: Time
    lastAction: Time
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedUsers {
    data: [User!]!
    total: Int64!
}

input CreateUser {
    firstName: String!
    lastName: String!
    middleName: String
    email: String!
    password: String
    employeeId: ID
    avatarId: ID
}

input UpdateUser {
    firstName: String
    lastName: String
    middleName: String
    email: String
    password: String
    employeeId: ID
    avatarId: ID
}

extend type Query {
    user(id: ID!): User
    users(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedUsers!
}

extend type Mutation {
    createUser(input: CreateUser!): User!
    updateUser(id: ID!, input: UpdateUser!): User!
    deleteUser(id: ID!): Boolean!
}

extend type Subscription {
    userCreated: User!
    userUpdated: User!
    userDeleted: ID!
}

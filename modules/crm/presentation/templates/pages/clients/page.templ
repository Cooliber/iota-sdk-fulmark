package clients

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/base/tab"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	chatsui "github.com/iota-uz/iota-sdk/modules/crm/presentation/templates/pages/chats"
	"github.com/iota-uz/iota-sdk/modules/crm/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

// ---- Utility Components ----
templ Avatar(initials string) {
	<div
		class={ "w-10 h-10 rounded-lg font-medium flex items-center justify-center cursor-pointer bg-avatar text-avatar" }
	>
		{ initials }
	</div>
}

//

type ClientTab struct {
	Name string
	URL  string
}

type ViewPageProps struct {
	Tabs      []ClientTab
	ClientURL string
	EditURL   string
	IsEditing bool
	Client    *viewmodels.Client
}

templ ClientViewHeader(props *ViewPageProps) {
	<div
		class={
			"flex justify-between w-full",
			"border-b border-primary p-4",
		}
	>
		<div class="flex items-center gap-2">
			@Avatar(props.Client.Initials())
			<div>
				<h3 class="font-medium">
					{ props.Client.FullName() }
				</h3>
				<div class="text-sm text-base-600">
					<a
						href={ templ.SafeURL(fmt.Sprintf("tel:%s", props.Client.Phone)) }
						class="text-blue-500"
					>
						+{ props.Client.Phone }
					</a>
				</div>
			</div>
		</div>
		<div class="flex gap-3">
			if props.IsEditing {
				@button.Danger(button.Props{
					Icon: icons.XCircle(icons.Props{Size: "20"}),
					Attrs: templ.Attributes{
						"hx-get":     props.ClientURL,
						"hx-trigger": "click",
						"hx-swap":    "innerHTML",
						"hx-target":  "#view-drawer-content",
					},
				}) {
					Cancel
				}
			} else {
				@button.Secondary(button.Props{
					Icon: icons.PencilSimple(icons.Props{Size: "20"}),
					Attrs: templ.Attributes{
						"hx-get":     props.EditURL,
						"hx-trigger": "click",
						"hx-swap":    "innerHTML",
						"hx-target":  "#view-drawer-content",
					},
				}) {
					Edit
				}
			}
			@button.Primary(button.Props{
				Icon: icons.PlusCircle(icons.Props{Size: "20"}),
			}) {
				Send a message
			}
		</div>
	</div>
}

templ ViewComponent(props *ViewPageProps) {
	<div class="h-full max-h-full p-4">
		<div class="flex flex-col border border-primary rounded-md h-full">
			@ClientViewHeader(props)
			<div class="flex flex-col flex-1 min-h-0">
				if props.IsEditing {
					{ children... }
				} else {
					@tab.List(tab.ListProps{}) {
						for _, t := range props.Tabs {
							@tab.BoostedLink(tab.BoostLinkProps{
								Href:   t.URL,
								Active: false,
								Push:   false,
							}) {
								{ t.Name }
							}
						}
					}
					@tab.BoostedContent(templ.Classes("flex-1 flex flex-col min-h-0")) {
						{ children... }
					}
				}
			</div>
		</div>
	</div>
}

templ ViewPage(props *ViewPageProps) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
	}}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		Title: pageCtx.T("Clients.Edit.Meta.Title"),
	}) {
		@ViewComponent(props) {
			{ children... }
		}
	}
}

templ ViewDrawer() {
	@dialog.Drawer(dialog.DrawerProps{
		Direction: dialog.RTL,
		Action:    "view-client",
		Classes:   templ.Classes("flex items-stretch"),
	}) {
		<div class="bg-white w-3/4 md:w-2/3 ml-auto">
			<form
				method="dialog"
				class="flex flex-col h-full"
			>
				<div
					class={
						"flex justify-between px-4 py-3",
						"border-b border-primary",
					}
				>
					<h3 class="font-medium">
						Details about the client
					</h3>
					<div>
						<button class="cursor-pointer">
							@icons.XCircle(icons.Props{Size: "20"})
						</button>
					</div>
				</div>
				<div
					id="view-drawer-content"
					class="flex-1 overflow-y-auto"
				></div>
			</form>
		</div>
	}
}

templ NewClientDrawer() {
	@dialog.Drawer(dialog.DrawerProps{
		Direction: dialog.RTL,
		Action:    "new-client",
		Classes:   templ.Classes("flex items-stretch"),
	}) {
		<div class="bg-white w-2/3 ml-auto">
			<form
				method="dialog"
				class="flex flex-col gap-3 h-full"
			>
				<div class="flex justify-between p-4">
					<h3 class="text-lg font-medium">
						New client
					</h3>
					<div>
						<button class="cursor-pointer">
							@icons.XCircle(icons.Props{Size: "20"})
						</button>
					</div>
				</div>
				@CreateForm(&CreatePageProps{
					Client:  &viewmodels.Client{},
					Errors:  map[string]string{},
					SaveURL: "/crm/clients",
				})
			</form>
		</div>
	}
}

// ---- Chats -----
templ Chats(props chatsui.SelectedChatProps) {
	<script>
		function onUseTemplate(template) {
			const textarea = document.getElementById("message");
			textarea.value = template;
			textarea.focus();
			textarea.style.height = 'auto'; 
			textarea.style.height = textarea.scrollHeight + 'px';
		}
	</script>
	@chatsui.InstantMessagesDialog(chatsui.InstantMessagesDialogProps{
		OnClick:   "onUseTemplate",
		Templates: props.Templates,
	})
	<div class="flex flex-col flex-1 px-4 min-h-0">
		@chatsui.ChatMessages(props.Chat)
		@chatsui.ChatInput(chatsui.ChatInputProps{
			SendURL: fmt.Sprintf("%s/%s/messages", props.BaseURL, props.Chat.ID),
		})
	</div>
}

// ---- General -----
templ Notes() {
	<div class="flex gap-3 bg-surface-100 rounded-md p-3">
		<div class="text-gray-400">
			@icons.Note(icons.Props{Size: "20"})
		</div>
		<div class="flex-1 space-y-3">
			<h3 class="text-gray-400">Notes</h3>
			<p>No notes available</p>
		</div>
	</div>
}

templ General() {
	<div class="flex flex-col gap-3 p-4">
		@Notes()
	</div>
}

// ---- Not Found ----
templ NotFound() {
	<div>
		Not Found
	</div>
}

// ---- Edit Page ----

type EditPageProps struct {
	Client    *viewmodels.Client
	Errors    map[string]string
	SaveURL   string
	DeleteURL string
}

templ EditForm(props *EditPageProps) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
	}}
	<div
		id="edit-content"
		class="flex flex-col justify-between h-full bg-surface-100"
	>
		@card.Card(card.Props{
			Class:        "grid grid-cols-3 gap-4",
			WrapperClass: "m-6",
		}) {
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.FirstName.Label"),
				Placeholder: pageCtx.T("Clients.Single.FirstName.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.FirstName,
					"name":  "FirstName",
					"form":  "save-form",
				},
				Error: props.Errors["FirstName"],
			})
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.LastName.Label"),
				Placeholder: pageCtx.T("Clients.Single.LastName.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.LastName,
					"name":  "LastName",
					"form":  "save-form",
				},
				Error: props.Errors["LastName"],
			})
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.MiddleName.Label"),
				Placeholder: pageCtx.T("Clients.Single.MiddleName.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.MiddleName,
					"name":  "MiddleName",
					"form":  "save-form",
				},
				Error: props.Errors["MiddleName"],
			})
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.Phone.Label"),
				Placeholder: pageCtx.T("Clients.Single.Phone.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.Phone,
					"name":  "Phone",
					"form":  "save-form",
				},
				Error: props.Errors["Phone"],
			})
		}
		<div
			x-data
			class={
				"flex items-center justify-end px-8 h-20 w-full mt-auto gap-4",
				"bg-surface-300 border-t border-t-primary shadow-t-lg",
			}
		>
			<form
				id="delete-form"
				hx-delete={ props.DeleteURL }
				hx-trigger="submit"
				hx-target="closest .content"
				hx-swap="innerHTML"
				hx-indicator="#delete-client-btn"
				hx-disabled-elt="find button"
			>
				@button.Danger(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":   "_action",
						"value":  "delete",
						"type":   "button",
						"@click": "$dispatch('open-delete-client-confirmation')",
						"id":     "delete-client-btn",
					},
				}) {
					{ pageCtx.T("Delete") }
				}
			</form>
			<form
				id="save-form"
				method="post"
				hx-post={ props.SaveURL }
				hx-indicator="#save-btn"
				hx-target="#edit-content"
				hx-swap="outerHTML"
			>
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":  "_action",
						"value": "save",
						"id":    "save-btn",
					},
				}) {
					{ pageCtx.T("Save") }
				}
			</form>
		</div>
	</div>
}

templ Edit(props *EditPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		Title: pageCtx.T("Clients.Edit.Meta.Title"),
	}) {
		@EditForm(props)
		@dialog.Confirmation(&dialog.Props{
			CancelText:  pageCtx.T("Cancel"),
			ConfirmText: pageCtx.T("Delete"),
			Heading:     pageCtx.T("Clients.Single.Delete"),
			Text:        pageCtx.T("Clients.Single.DeleteConfirmation"),
			Icon:        icons.Trash(icons.Props{Size: "20"}),
			Action:      "open-delete-client-confirmation",
			Attrs: templ.Attributes{
				"@closing": `({target}) => {
					if (target.returnValue === "confirm") {
						let deleteForm = document.getElementById("delete-form");
						htmx.trigger(deleteForm, "submit");
					}
				}`,
			},
		})
	}
}

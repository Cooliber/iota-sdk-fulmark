package clients

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/avatar"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
	"github.com/iota-uz/iota-sdk/components/base/tab"
	chatsui "github.com/iota-uz/iota-sdk/modules/crm/presentation/templates/pages/chats"
	"github.com/iota-uz/iota-sdk/modules/crm/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

// formatData returns "-" if the string is empty, otherwise returns the string
func formatData(s string) string {
	if s == "" {
		return "-"
	}
	return s
}

func formatNotes(comments string, empty string) string {
	if comments == "" {
		return empty
	}
	return comments
}

// ---- Utility Components ----

//

type ClientTab struct {
	tab.BoostLinkProps
	Name string
}

type ViewDrawerProps struct {
	SelectedTab string
	CallbackURL string
	Tabs        []ClientTab
}

templ ViewDrawer(props ViewDrawerProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@dialog.StdViewDrawer(dialog.StdDrawerProps{
		ID:     "view-drawer",
		Open:   true,
		Action: "view-client",
		Title:  pageCtx.T("Clients.Single.ViewDrawer.Title"),
		Attrs: templ.Attributes{
			"@closing": fmt.Sprintf("history.pushState(null, '', '%s')", props.CallbackURL),
			"@closed":  "document.getElementById('view-drawer').remove()",
		},
	}) {
		<div class="flex flex-col flex-1 overflow-y-auto">
			@tab.Root(tab.Props{DefaultValue: props.SelectedTab}) {
				@tab.List(tab.ListProps{}) {
					for _, t := range props.Tabs {
						@tab.BoostedLink(t.BoostLinkProps) {
							{ t.Name }
						}
					}
				}
			}
			@tab.BoostedContent(templ.Classes("flex-1 flex flex-col min-h-0")) {
				{ children... }
			}
		</div>
	}
}

templ NewClientDrawer() {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@dialog.StdViewDrawer(dialog.StdDrawerProps{
		Action: "new-client",
		Title:  pageCtx.T("Clients.New.Meta.Title"),
	}) {
		@CreateForm(&CreatePageProps{
			Client:  &viewmodels.Client{},
			Errors:  map[string]string{},
			SaveURL: "/crm/clients",
		})
	}
}

// ---- Chats -----
templ Chats(props chatsui.SelectedChatProps) {
	<script>
		function onUseTemplate(template) {
			const textarea = document.getElementById("message");
			textarea.value = template;
			textarea.focus();
			textarea.style.height = 'auto';
			textarea.style.height = textarea.scrollHeight + 'px';
		}
	</script>
	@chatsui.InstantMessagesDialog(chatsui.InstantMessagesDialogProps{
		OnClick:   "onUseTemplate",
		Templates: props.Templates,
	})
	<div class="flex flex-col flex-1 px-4 min-h-0">
		@chatsui.ChatMessages(props.Chat)
		@chatsui.ChatInput(chatsui.ChatInputProps{
			SendURL: fmt.Sprintf("%s/%s/messages", props.BaseURL, props.Chat.ID),
		})
	</div>
}

// ---- InfoCard Components -----

type CardHeaderProps struct {
	Title   string
	EditURL string
	Target  string
	FormID  string
}

templ CardHeader(props CardHeaderProps) {
	<div class="flex justify-between border-b border-gray-200 p-4">
		<p>{ props.Title }</p>
		<div class="flex gap-3">
			@button.Danger(button.Props{
				Icon: icons.XCircle(icons.Props{Size: "20"}),
				Attrs: templ.Attributes{
					"x-show": "isEditing",
					"@click": "isEditing = false",
				},
			})
			<form
				x-show="isEditing"
				id={ props.FormID }
				hx-post={ props.EditURL }
				hx-trigger="submit"
				hx-indicator="#save-btn"
				hx-target={ props.Target }
				hx-swap="innerHTML"
			>
				@button.Primary(button.Props{
					Icon: icons.CheckCircle(icons.Props{Size: "20"}),
					Attrs: templ.Attributes{
						"id":     "save-btn",
						"type":   "submit",
						"@click": "isEditing = false",
					},
				}) {
					{ composables.UsePageCtx(ctx).T("Save") }
				}
			</form>
			@button.Secondary(button.Props{
				Icon: icons.PencilSimple(icons.Props{Size: "20"}),
				Attrs: templ.Attributes{
					"x-show":    "!isEditing",
					"@click":    "isEditing = true",
					"hx-get":    props.EditURL,
					"hx-target": props.Target,
					"hx-swap":   "innerHTML",
				},
			})
		</div>
	</div>
}

// PersonalInfoCardProps contains data needed for the personal info card
templ PersonalInfoCard(client *viewmodels.Client) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div id="personal-info-card">
		<div x-data="{ isEditing: false }">
			@card.Card(card.Props{
				Header: CardHeader(CardHeaderProps{
					Title:   pageCtx.T("Clients.Single.PersonalInfo"),
					EditURL: fmt.Sprintf("/crm/clients/%s/edit/personal", client.ID),
					FormID:  "personal-info-edit-form",
					Target:  "#personal-info-edit",
				}),
			}) {
				<div
					x-show="isEditing"
					id="personal-info-edit"
				></div>
				<div
					x-show="!isEditing"
					class="grid grid-cols-2 gap-4"
				>
					<div>
						<div class="text-sm text-base-600">
							{ pageCtx.T("Clients.Single.FirstName.Label") }
						</div>
						<div>{ formatData(client.FirstName) }</div>
					</div>
					<div>
						<div class="text-sm text-base-600">
							{ pageCtx.T("Clients.Single.LastName.Label") }
						</div>
						<div>{ formatData(client.LastName) }</div>
					</div>
					<div>
						<div class="text-sm text-base-600">
							{ pageCtx.T("Clients.Single.MiddleName.Label") }
						</div>
						<div>{ formatData(client.MiddleName) }</div>
					</div>
					<div>
						<div class="text-sm text-base-600">
							{ pageCtx.T("Clients.Single.Phone.Label") }
						</div>
						<div>{ formatData(client.Phone) }</div>
					</div>
					<div>
						<div class="text-sm text-base-600">
							{ pageCtx.T("Clients.Single.Email.Label") }
						</div>
						<div>{ formatData(client.Email) }</div>
					</div>
					<div>
						<div class="text-sm text-base-600">
							{ pageCtx.T("Clients.Single.DateOfBirth.Label") }
						</div>
						<div>{ formatData(client.DateOfBirth) }</div>
					</div>
					<div class="col-span-2">
						<div class="text-sm text-base-600">
							{ pageCtx.T("Clients.Single.Address.Label") }
						</div>
						<div>{ formatData(client.Address) }</div>
					</div>
				</div>
			}
		</div>
	</div>
}

// PassportInfoCard shows passport information for the client
templ PassportInfoCard(client *viewmodels.Client) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div id="passport-info-card">
		<div x-data="{ isEditing: false }">
			@card.Card(card.Props{
				Header: CardHeader(CardHeaderProps{
					Title:   pageCtx.T("Clients.Single.PassportInfo"),
					EditURL: fmt.Sprintf("/crm/clients/%s/edit/passport", client.ID),
					FormID:  "passport-info-edit-form",
					Target:  "#passport-info-edit",
				}),
			}) {
				<div x-show="!isEditing">
					<div class="text-sm text-base-600">
						{ pageCtx.T("Clients.Single.PassportSeriesAndNumber.Label") }
					</div>
					<div>{ formatData(client.Passport.Series + client.Passport.Number) }</div>
				</div>
				<div
					x-show="isEditing"
					id="passport-info-edit"
				></div>
			}
		</div>
	</div>
}

// TaxInfoCard shows tax information for the client
templ TaxInfoCard(client *viewmodels.Client) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div id="tax-info-card">
		<div x-data="{ isEditing: false }">
			@card.Card(card.Props{
				Header: CardHeader(CardHeaderProps{
					Title:   pageCtx.T("Clients.Single.TaxInfo"),
					EditURL: fmt.Sprintf("/crm/clients/%s/edit/tax", client.ID),
					FormID:  "tax-info-edit-form",
					Target:  "#tax-info-edit",
				}),
			}) {
				<div
					x-show="!isEditing"
					class="grid grid-cols-2 gap-4"
				>
					<div>
						<div class="text-sm text-base-600">
							{ pageCtx.T("Clients.Single.Pin.Label") }
						</div>
						<div>{ formatData(client.Pin) }</div>
					</div>
					<div>
						<div class="text-sm text-base-600">
							{ pageCtx.T("Clients.Single.CountryCode.Label") }
						</div>
						<div>{ client.CountryCode }</div>
					</div>
				</div>
				<div
					x-show="isEditing"
					id="tax-info-edit"
				></div>
			}
		</div>
	</div>
}

// ---- Profile -----

type ProfileProps struct {
	ClientURL string
	EditURL   string
	IsEditing bool
	Client    *viewmodels.Client
}

templ Profile(props ProfileProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="h-full max-h-full p-4">
		<div class="flex flex-col border border-primary rounded-md h-full">
			<div
				class={
					"flex justify-between w-full",
					"border-b border-primary p-4",
				}
			>
				<div class="flex items-center gap-2">
					@avatar.Avatar(avatar.Props{
						Initials: props.Client.Initials(),
						Variant:  avatar.Square,
						Class:    templ.Classes("w-10 h-10"),
					})
					<div>
						<h3 class="font-medium">
							{ props.Client.FullName() }
						</h3>
						<div class="text-sm text-base-600">
							<a
								href={ templ.SafeURL(fmt.Sprintf("tel:%s", props.Client.Phone)) }
								class="text-blue-500"
							>
								+{ props.Client.Phone }
							</a>
						</div>
					</div>
				</div>
				<div class="flex gap-3">
					@button.Primary(button.Props{
						Icon: icons.PlusCircle(icons.Props{Size: "20"}),
					}) {
						{ pageCtx.T("Clients.Single.SendMessage") }
					}
				</div>
			</div>
			<div class="flex flex-col flex-1 min-h-0 overflow-y-auto">
				<div
					id="profile-content"
					class="flex flex-col gap-6 p-4"
				>
					<!-- Info Cards -->
					@PersonalInfoCard(props.Client)
					@PassportInfoCard(props.Client)
					@TaxInfoCard(props.Client)
					@NotesInfoCard(props.Client)
				</div>
			</div>
		</div>
	</div>
}

templ NotesInfoCard(client *viewmodels.Client) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div id="notes-info-card">
		<div x-data="{ isEditing: false }">
			@card.Card(card.Props{
				Header: CardHeader(CardHeaderProps{
					Title:   pageCtx.T("Clients.Single.NotesInfo"),
					EditURL: fmt.Sprintf("/crm/clients/%s/edit/notes", client.ID),
					FormID:  "notes-info-edit-form",
					Target:  "#notes-info-edit",
				}),
			}) {
				<div
					x-show="!isEditing"
					class="grid grid-cols-2 gap-4"
				>
					<div>
						<div>{ formatNotes(client.Comments, pageCtx.T("Clients.Notes.NoNotes")) }</div>
					</div>
				</div>
				<div
					x-show="isEditing"
					id="notes-info-edit"
				></div>
			}
		</div>
	</div>
}

templ ActionsTab(clientID string) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="h-full max-h-full p-4">
		<div class="flex flex-col border border-primary rounded-md h-full p-4">
			<div class="flex flex-col gap-4">
				<h3 class="font-medium">{ pageCtx.T("Clients.Tabs.Actions") }</h3>
				<div class="flex flex-col gap-2">
					@button.Danger(button.Props{
						Icon: icons.Trash(icons.Props{Size: "20"}),
						Attrs: templ.Attributes{
							"hx-delete":  fmt.Sprintf("/crm/clients/%s", clientID),
							"hx-confirm": pageCtx.T("Clients.Single.DeleteConfirmation"),
							"hx-target":  "body",
						},
					}) {
						{ pageCtx.T("Clients.Single.Delete") }
					}
				</div>
			</div>
		</div>
	</div>
}

// ---- Not Found ----
templ NotFound() {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div>
		{ pageCtx.T("NotFound") }
	</div>
}

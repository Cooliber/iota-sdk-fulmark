package clients

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
	"github.com/iota-uz/iota-sdk/components/base/tab"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	chatsui "github.com/iota-uz/iota-sdk/modules/crm/presentation/templates/pages/chats"
	"github.com/iota-uz/iota-sdk/modules/crm/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

// ---- Utility Components ----
templ Avatar(initials string) {
	<div
		class={ "w-10 h-10 rounded-lg font-medium flex items-center justify-center cursor-pointer bg-avatar text-avatar" }
	>
		{ initials }
	</div>
}

//

type ClientTab struct {
	tab.BoostLinkProps
	Name string
}

type ViewDrawerProps struct {
	SelectedTab string
	CallbackURL string
	Tabs        []ClientTab
}

templ ViewDrawer(props ViewDrawerProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@dialog.StdViewDrawer(dialog.StdDrawerProps{
		ID:     "view-drawer",
		Open:   true,
		Action: "view-client",
		Title:  pageCtx.T("Clients.Single.ViewDrawer.Title"),
		Attrs: templ.Attributes{
			"@closing": fmt.Sprintf("history.pushState(null, '', '%s')", props.CallbackURL),
			"@closed":  "document.getElementById('view-drawer').remove()",
		},
	}) {
		<div class="flex flex-col flex-1 overflow-y-auto">
			@tab.Root(tab.Props{DefaultValue: props.SelectedTab}) {
				@tab.List(tab.ListProps{}) {
					for _, t := range props.Tabs {
						@tab.BoostedLink(t.BoostLinkProps) {
							{ t.Name }
						}
					}
				}
			}
			@tab.BoostedContent(templ.Classes("flex-1 flex flex-col min-h-0")) {
				{ children... }
			}
		</div>
	}
}

templ NewClientDrawer() {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@dialog.StdViewDrawer(dialog.StdDrawerProps{
		Action: "new-client",
		Title:  pageCtx.T("Clients.New.Meta.Title"),
	}) {
		@CreateForm(&CreatePageProps{
			Client:  &viewmodels.Client{},
			Errors:  map[string]string{},
			SaveURL: "/crm/clients",
		})
	}
}

// ---- Chats -----
templ Chats(props chatsui.SelectedChatProps) {
	<script>
		function onUseTemplate(template) {
			const textarea = document.getElementById("message");
			textarea.value = template;
			textarea.focus();
			textarea.style.height = 'auto';
			textarea.style.height = textarea.scrollHeight + 'px';
		}
	</script>
	@chatsui.InstantMessagesDialog(chatsui.InstantMessagesDialogProps{
		OnClick:   "onUseTemplate",
		Templates: props.Templates,
	})
	<div class="flex flex-col flex-1 px-4 min-h-0">
		@chatsui.ChatMessages(props.Chat)
		@chatsui.ChatInput(chatsui.ChatInputProps{
			SendURL: fmt.Sprintf("%s/%s/messages", props.BaseURL, props.Chat.ID),
		})
	</div>
}

// ---- Profile -----

type ProfileProps struct {
	ClientURL string
	EditURL   string
	IsEditing bool
	Client    *viewmodels.Client
}

templ Profile(props ProfileProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="h-full max-h-full p-4">
		<div class="flex flex-col border border-primary rounded-md h-full">
			<div
				class={
					"flex justify-between w-full",
					"border-b border-primary p-4",
				}
			>
				<div class="flex items-center gap-2">
					@Avatar(props.Client.Initials())
					<div>
						<h3 class="font-medium">
							{ props.Client.FullName() }
						</h3>
						<div class="text-sm text-base-600">
							<a
								href={ templ.SafeURL(fmt.Sprintf("tel:%s", props.Client.Phone)) }
								class="text-blue-500"
							>
								+{ props.Client.Phone }
							</a>
						</div>
					</div>
				</div>
				<div
					class="flex gap-3"
					x-data="{ isEditing: false }"
				>
					@button.Danger(button.Props{
						Icon: icons.XCircle(icons.Props{Size: "20"}),
						Attrs: templ.Attributes{
							"x-show":     "isEditing",
							"@click":     "isEditing = false",
							"hx-get":     pageCtx.URL.RawPath,
							"hx-trigger": "click",
							"hx-swap":    "innerHTML",
							"hx-target":  "#tab-content",
						},
					}) {
						{ pageCtx.T("Cancel") }
					}
					@button.Secondary(button.Props{
						Icon: icons.PencilSimple(icons.Props{Size: "20"}),
						Attrs: templ.Attributes{
							"x-show":     "!isEditing",
							"@click":     "isEditing = true",
							"hx-get":     props.EditURL,
							"hx-trigger": "click",
							"hx-swap":    "innerHTML",
							"hx-target":  "#profile-content",
						},
					}) {
						{ pageCtx.T("Edit") }
					}
					@button.Primary(button.Props{
						Icon: icons.PlusCircle(icons.Props{Size: "20"}),
					}) {
						{ pageCtx.T("Clients.Single.SendMessage") }
					}
				</div>
			</div>
			<div class="flex flex-col flex-1 min-h-0 overflow-y-auto">
				<div
					id="profile-content"
					class="flex flex-col gap-6 p-4"
				>
					<!-- Personal Information Card -->
					@card.Card(card.Props{
						Class:  "grid grid-cols-2 gap-4",
						Header: card.DefaultHeader(pageCtx.T("Clients.Single.PersonalInfo")),
					}) {
						<div>
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.FirstName.Label") }</div>
							<div>{ props.Client.FirstName }</div>
						</div>
						<div>
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.LastName.Label") }</div>
							<div>{ props.Client.LastName }</div>
						</div>
						<div>
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.MiddleName.Label") }</div>
							<div>{ props.Client.MiddleName }</div>
						</div>
						<div>
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.Phone.Label") }</div>
							<div>{ props.Client.Phone }</div>
						</div>
						<div>
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.Email.Label") }</div>
							<div>{ props.Client.Email }</div>
						</div>
						<div>
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.DateOfBirth.Label") }</div>
							<div>{ props.Client.DateOfBirth }</div>
						</div>
						<div class="col-span-2">
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.Address.Label") }</div>
							<div>{ props.Client.Address }</div>
						</div>
					}
					
					<!-- Passport Information Card -->
					@card.Card(card.Props{
						Class:  "grid grid-cols-2 gap-4",
						Header: card.DefaultHeader(pageCtx.T("Clients.Single.PassportInfo")),
					}) {
						<div>
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.PassportSeries.Label") }</div>
							<div>{ props.Client.Passport.Series }</div>
						</div>
						<div>
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.PassportNumber.Label") }</div>
							<div>{ props.Client.Passport.Number }</div>
						</div>
					}
					
					<!-- Tax Information Card -->
					@card.Card(card.Props{
						Class:  "grid grid-cols-2 gap-4",
						Header: card.DefaultHeader(pageCtx.T("Clients.Single.TaxInfo")),
					}) {
						<div>
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.Pin.Label") }</div>
							<div>{ props.Client.Pin }</div>
						</div>
						<div>
							<div class="text-sm text-base-600">{ pageCtx.T("Clients.Single.CountryCode.Label") }</div>
							<div>{ props.Client.CountryCode }</div>
						</div>
					}
					
					@Notes()
				</div>
			</div>
		</div>
	</div>
}

templ Notes() {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="flex gap-3 bg-surface-100 rounded-md p-3">
		<div class="text-gray-400">
			@icons.Note(icons.Props{Size: "20"})
		</div>
		<div class="flex-1 space-y-3">
			<h3 class="text-gray-400">{ pageCtx.T("Clients.Tabs.Notes") }</h3>
			<p>{ pageCtx.T("Clients.Notes.NoNotes") }</p>
		</div>
	</div>
}

// ---- Not Found ----
templ NotFound() {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div>
		{ pageCtx.T("NotFound") }
	</div>
}

// ---- Edit Page ----
templ Edit(props *EditPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Clients.Edit.Meta.Title")},
	}) {
		@EditForm(props)
		@dialog.Confirmation(&dialog.Props{
			CancelText:  pageCtx.T("Cancel"),
			ConfirmText: pageCtx.T("Delete"),
			Heading:     pageCtx.T("Clients.Single.Delete"),
			Text:        pageCtx.T("Clients.Single.DeleteConfirmation"),
			Icon:        icons.Trash(icons.Props{Size: "20"}),
			Action:      "open-delete-client-confirmation",
			Attrs: templ.Attributes{
				"@closing": `({target}) => {
					if (target.returnValue === "confirm") {
						let deleteForm = document.getElementById("delete-form");
						htmx.trigger(deleteForm, "submit");
					}
				}`,
			},
		})
	}
}
package clients

import (
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/base/tab"
	"github.com/iota-uz/iota-sdk/components/base/textarea"
	"github.com/iota-uz/iota-sdk/components/selects"
	"github.com/iota-uz/iota-sdk/modules/crm/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

// Create Form

type CreatePageProps struct {
	Client  *viewmodels.Client
	Errors  map[string]string
	SaveURL string
}

templ CreateForm(props *CreatePageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<form
		class="flex flex-col justify-between h-full"
		hx-post={ props.SaveURL }
		hx-swap="outerHTML"
		hx-indicator="#save-btn"
	>
		<div class="m-6">
			@tab.Root(tab.Props{
				DefaultValue: "personal",
			}) {
				@tab.List(tab.ListProps{}) {
					@tab.Button("personal") {
						{ pageCtx.T("Clients.Tabs.Personal") }
					}
					@tab.Button("documents") {
						{ pageCtx.T("Clients.Tabs.Documents") }
					}
				}
				@tab.Content("personal") {
					<!-- Personal Information Card -->
					@card.Card(card.Props{
						Class:        "grid grid-cols-3 gap-4",
						Header:       card.DefaultHeader(pageCtx.T("Clients.Single.PersonalInfo")),
						WrapperClass: "mt-5",
					}) {
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.FirstName.Label"),
							Placeholder: pageCtx.T("Clients.Single.FirstName.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.FirstName,
								"name":  "FirstName",
							},
							Error: props.Errors["FirstName"],
						})
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.LastName.Label"),
							Placeholder: pageCtx.T("Clients.Single.LastName.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.LastName,
								"name":  "LastName",
							},
							Error: props.Errors["LastName"],
						})
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.MiddleName.Label"),
							Placeholder: pageCtx.T("Clients.Single.MiddleName.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.MiddleName,
								"name":  "MiddleName",
							},
							Error: props.Errors["MiddleName"],
						})
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.Phone.Label"),
							Placeholder: pageCtx.T("Clients.Single.Phone.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.Phone,
								"name":  "Phone",
							},
							Error: props.Errors["Phone"],
						})
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.Email.Label"),
							Placeholder: pageCtx.T("Clients.Single.Email.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.Email,
								"name":  "Email",
								"type":  "email",
							},
							Error: props.Errors["Email"],
						})
						@input.Date(&input.Props{
							Label:       pageCtx.T("Clients.Single.DateOfBirth.Label"),
							Placeholder: pageCtx.T("Clients.Single.DateOfBirth.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.DateOfBirth,
								"name":  "DateOfBirth",
							},
							Error: props.Errors["DateOfBirth"],
						})
						@textarea.Basic(&textarea.Props{
							Label:       pageCtx.T("Clients.Single.Address.Label"),
							Placeholder: pageCtx.T("Clients.Single.Address.Placeholder"),
							Value:       props.Client.Address,
							WrapperClass: "col-span-3",
							Attrs: templ.Attributes{
								"name": "Address",
								"rows": "3",
							},
							Error: props.Errors["Address"],
						})
					}
				}
				@tab.Content("documents") {
					<!-- Passport Information Card -->
					@card.Card(card.Props{
						Class:        "grid grid-cols-2 gap-4",
						Header:       card.DefaultHeader(pageCtx.T("Clients.Single.PassportInfo")),
						WrapperClass: "mt-5",
					}) {
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.PassportSeries.Label"),
							Placeholder: pageCtx.T("Clients.Single.PassportSeries.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.Passport.Series,
								"name":  "PassportSeries",
							},
							Error: props.Errors["PassportSeries"],
						})
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.PassportNumber.Label"),
							Placeholder: pageCtx.T("Clients.Single.PassportNumber.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.Passport.Number,
								"name":  "PassportNumber",
							},
							Error: props.Errors["PassportNumber"],
						})
					}
					<!-- Tax Information Card -->
					@card.Card(card.Props{
						Class:        "grid grid-cols-2 gap-4",
						Header:       card.DefaultHeader(pageCtx.T("Clients.Single.TaxInfo")),
						WrapperClass: "mt-5",
					}) {
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.Pin.Label"),
							Placeholder: pageCtx.T("Clients.Single.Pin.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.Pin,
								"name":  "Pin",
							},
							Error: props.Errors["Pin"],
						})
						@selects.CountriesSelect(selects.CountriesSelectProps{
							Label:       pageCtx.T("Clients.Single.CountryCode.Label"),
							Placeholder: pageCtx.T("Clients.Single.CountryCode.Placeholder"),
							Name:        "CountryCode",
							Selected:    props.Client.CountryCode,
							Error:       props.Errors["CountryCode"],
						})
					}
				}
			}
		</div>
		<div class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4">
			@button.Primary(button.Props{
				Size: button.SizeMD,
				Attrs: templ.Attributes{
					"id": "save-btn",
				},
			}) {
				{ pageCtx.T("Save") }
			}
		</div>
	</form>
}

// Edit Form

type EditPageProps struct {
	Client    *viewmodels.Client
	Errors    map[string]string
	SaveURL   string
	DeleteURL string
}

templ EditForm(props *EditPageProps) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
	}}
	<div
		id="edit-content"
		class="flex flex-col justify-between h-full bg-surface-100"
	>
		<div class="m-6 flex flex-col gap-6">
			<!-- Personal Information Card -->
			@card.Card(card.Props{
				Class:  "grid grid-cols-3 gap-4",
				Header: card.DefaultHeader(pageCtx.T("Clients.Single.PersonalInfo")),
			}) {
				@input.Text(&input.Props{
					Label:       pageCtx.T("Clients.Single.FirstName.Label"),
					Placeholder: pageCtx.T("Clients.Single.FirstName.Placeholder"),
					Attrs: templ.Attributes{
						"value": props.Client.FirstName,
						"name":  "FirstName",
						"form":  "save-form",
					},
					Error: props.Errors["FirstName"],
				})
				@input.Text(&input.Props{
					Label:       pageCtx.T("Clients.Single.LastName.Label"),
					Placeholder: pageCtx.T("Clients.Single.LastName.Placeholder"),
					Attrs: templ.Attributes{
						"value": props.Client.LastName,
						"name":  "LastName",
						"form":  "save-form",
					},
					Error: props.Errors["LastName"],
				})
				@input.Text(&input.Props{
					Label:       pageCtx.T("Clients.Single.MiddleName.Label"),
					Placeholder: pageCtx.T("Clients.Single.MiddleName.Placeholder"),
					Attrs: templ.Attributes{
						"value": props.Client.MiddleName,
						"name":  "MiddleName",
						"form":  "save-form",
					},
					Error: props.Errors["MiddleName"],
				})
				@input.Text(&input.Props{
					Label:       pageCtx.T("Clients.Single.Phone.Label"),
					Placeholder: pageCtx.T("Clients.Single.Phone.Placeholder"),
					Attrs: templ.Attributes{
						"value": props.Client.Phone,
						"name":  "Phone",
						"form":  "save-form",
					},
					Error: props.Errors["Phone"],
				})
				@input.Text(&input.Props{
					Label:       pageCtx.T("Clients.Single.Email.Label"),
					Placeholder: pageCtx.T("Clients.Single.Email.Placeholder"),
					Attrs: templ.Attributes{
						"value": props.Client.Email,
						"name":  "Email",
						"type":  "email",
						"form":  "save-form",
					},
					Error: props.Errors["Email"],
				})
				@input.Date(&input.Props{
					Label:       pageCtx.T("Clients.Single.DateOfBirth.Label"),
					Placeholder: pageCtx.T("Clients.Single.DateOfBirth.Placeholder"),
					Attrs: templ.Attributes{
						"value": props.Client.DateOfBirth,
						"name":  "DateOfBirth",
						"form":  "save-form",
					},
					Error: props.Errors["DateOfBirth"],
				})
				@textarea.Basic(&textarea.Props{
					Label:       pageCtx.T("Clients.Single.Address.Label"),
					Placeholder: pageCtx.T("Clients.Single.Address.Placeholder"),
					Value:       props.Client.Address,
					WrapperClass: "col-span-3",
					Attrs: templ.Attributes{
						"name": "Address",
						"form": "save-form",
						"rows": "3",
					},
					Error: props.Errors["Address"],
				})
			}
			<!-- Passport Information Card -->
			@card.Card(card.Props{
				Class:  "grid grid-cols-2 gap-4",
				Header: card.DefaultHeader(pageCtx.T("Clients.Single.PassportInfo")),
			}) {
				@input.Text(&input.Props{
					Label:       pageCtx.T("Clients.Single.PassportSeries.Label"),
					Placeholder: pageCtx.T("Clients.Single.PassportSeries.Placeholder"),
					Attrs: templ.Attributes{
						"value": props.Client.Passport.Series,
						"name":  "PassportSeries",
						"form":  "save-form",
					},
					Error: props.Errors["PassportSeries"],
				})
				@input.Text(&input.Props{
					Label:       pageCtx.T("Clients.Single.PassportNumber.Label"),
					Placeholder: pageCtx.T("Clients.Single.PassportNumber.Placeholder"),
					Attrs: templ.Attributes{
						"value": props.Client.Passport.Number,
						"name":  "PassportNumber",
						"form":  "save-form",
					},
					Error: props.Errors["PassportNumber"],
				})
			}
			<!-- Tax Information Card -->
			@card.Card(card.Props{
				Class:  "grid grid-cols-2 gap-4",
				Header: card.DefaultHeader(pageCtx.T("Clients.Single.TaxInfo")),
			}) {
				@input.Text(&input.Props{
					Label:       pageCtx.T("Clients.Single.Pin.Label"),
					Placeholder: pageCtx.T("Clients.Single.Pin.Placeholder"),
					Attrs: templ.Attributes{
						"value": props.Client.Pin,
						"name":  "Pin",
						"form":  "save-form",
					},
					Error: props.Errors["Pin"],
				})
				@selects.CountriesSelect(selects.CountriesSelectProps{
					Label:       pageCtx.T("Clients.Single.CountryCode.Label"),
					Placeholder: pageCtx.T("Clients.Single.CountryCode.Placeholder"),
					Name:        "CountryCode",
					Selected:    props.Client.CountryCode,
					Attrs: templ.Attributes{
						"form": "save-form",
					},
					Error: props.Errors["CountryCode"],
				})
			}
		</div>
		<div
			x-data
			class={
				"flex items-center justify-end px-8 h-20 w-full mt-auto gap-4",
				"bg-surface-300 border-t border-t-primary shadow-t-lg",
			}
		>
			<form
				id="delete-form"
				hx-delete={ props.DeleteURL }
				hx-trigger="submit"
				hx-target="closest .content"
				hx-swap="innerHTML"
				hx-indicator="#delete-client-btn"
				hx-disabled-elt="find button"
			>
				@button.Danger(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":   "_action",
						"value":  "delete",
						"type":   "button",
						"@click": "$dispatch('open-delete-client-confirmation')",
						"id":     "delete-client-btn",
					},
				}) {
					{ pageCtx.T("Delete") }
				}
			</form>
			<form
				id="save-form"
				method="post"
				hx-post={ props.SaveURL }
				hx-indicator="#save-btn"
				hx-target="#edit-content"
				hx-swap="outerHTML"
			>
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":  "_action",
						"value": "save",
						"id":    "save-btn",
					},
				}) {
					{ pageCtx.T("Save") }
				}
			</form>
		</div>
	</div>
}

package inventory

import (
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/components"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	coreviewmodels "github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/modules/finance/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type CreatePageProps struct {
	Currencies []*coreviewmodels.Currency
	Inventory  *viewmodels.Inventory
	Errors     map[string]string
	PostPath   string
}

templ CreateForm(props *CreatePageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<form
		class="flex flex-col justify-between h-full"
		hx-post={ props.PostPath }
		hx-swap="outerHTML"
		hx-indicator="#save-btn"
	>
		@card.Card(card.Props{
			Class:        "grid grid-cols-3 gap-4",
			WrapperClass: "m-6",
		}) {
			@input.Text(&input.Props{
				Label: pageCtx.T("Inventory.Single.Name"),
				Attrs: templ.Attributes{"name": "Name", "value": props.Inventory.Name},
				Error: props.Errors["Name"],
			})
			@input.Number(&input.Props{
				Label: pageCtx.T("Inventory.Single.Price"),
				Attrs: templ.Attributes{"name": "Price", "value": props.Inventory.Price, "step": "0.01"},
				Error: props.Errors["Price"],
			})
			@input.Number(&input.Props{
				Label: pageCtx.T("Inventory.Single.Quantity"),
				Attrs: templ.Attributes{"name": "Quantity", "value": props.Inventory.Quantity},
				Error: props.Errors["Quantity"],
			})
			@components.CurrencySelect(&components.CurrencySelectProps{
				Label:       pageCtx.T("Inventory.Single.Currency.Label"),
				Placeholder: pageCtx.T("Inventory.Single.Currency.Placeholder"),
				Value:       props.Inventory.CurrencyCode,
				Currencies:  props.Currencies,
				Attrs: templ.Attributes{
					"name": "CurrencyCode",
				},
			})
			@input.TextArea(&input.TextAreaProps{
				Label:        pageCtx.T("Inventory.Single._Description"),
				Attrs:        templ.Attributes{"name": "Description"},
				WrapperClass: "col-span-2",
				Value:        props.Inventory.Description,
				Error:        props.Errors["Description"],
			})
		}
		<div class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4">
			@button.Primary(button.Props{
				Size: button.SizeMD,
				Attrs: templ.Attributes{
					"id": "save-btn",
				},
			}) {
				{ pageCtx.T("Save") }
			}
		</div>
	</form>
}

templ New(props *CreatePageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Inventory.Meta.New.Title")},
	}) {
		@CreateForm(props)
	}
}

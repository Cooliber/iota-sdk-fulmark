package inventory

import (
	"encoding/json"
	"fmt"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/base/pagination"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/warehouse/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/types"
)

type CreatePageProps struct {
	*types.PageContext
	Check           *viewmodels.Check
	Positions       []*viewmodels.Position
	PaginationState *pagination.State
	Errors          map[string]string
	SaveURL         string
}

func toJSON(data any) string {
	bytes, _ := json.Marshal(data)
	return string(bytes)
}

templ CreateForm(props *CreatePageProps) {
	<form
		class="flex flex-col justify-between h-full"
		hx-post={ props.SaveURL }
		hx-swap="outerHTML"
		hx-indicator="#save-btn"
	>
		<div class="contents" x-data="dateFns">
			@card.Card(card.Props{Class: "grid grid-cols-3 gap-4 m-6"}) {
				@input.Text(&input.Props{
					Label:       props.T("WarehouseInventory.Single.Name.Label"),
					Placeholder: props.T("WarehouseInventory.Single.Name.Placeholder"),
					Attrs: templ.Attributes{
						"autofocus": true,
						"name":      "Name",
						":value":    fmt.Sprintf("'%s ' + now()", props.T("WarehouseInventory.Single.Inventory")),
					},
					Error: props.Errors["Name"],
				})
			}
			<div class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4">
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":  "_action",
						"value": "save",
						"id":    "save-btn",
					},
				}) {
					{ props.T("Save") }
				}
			</div>
		</div>
	</form>
}

templ AllPositionsTable(props *CreatePageProps) {
	<div class="flex flex-col gap-4 table-all">
		@base.Table(&base.TableProps{
			Columns: []*base.TableColumn{
				{Label: props.T("WarehousePositions.List.Position"), Key: "title"},
				{Label: props.T("WarehousePositions.List.Barcode"), Key: "barcode"},
				{Label: props.T("WarehousePositions.List.Unit"), Key: "unit"},
				{Label: props.T("Actions"), Class: "w-16"},
			},
		}) {
			for _, position := range props.Positions {
				@base.TableRow() {
					@base.TableCell() {
						{ position.Title }
					}
					@base.TableCell() {
						{ position.Barcode }
					}
					@base.TableCell() {
						{ position.Unit.ShortTitle }
					}
					@base.TableCell() {
						@button.Secondary(
							button.Props{
								Size: button.SizeSM,
								Attrs: templ.Attributes{
									"type":   "button",
									"@click": fmt.Sprintf("() => selected.has(%s) ? selected.delete(%s) : selected.set(%s, %s)", position.ID, position.ID, position.ID, toJSON(position)),
								},
							}) {
							<span x-text={ fmt.Sprintf("selected.has(%s) ? '%s' : '%s'", position.ID, props.T("Remove"), props.T("Add")) }></span>
						}
					}
				}
			}
		}
		if len(props.PaginationState.Pages()) > 1 {
			@pagination.Pagination(props.PaginationState)
		}
	</div>
}

templ New(props *CreatePageProps) {
	@layouts.Authenticated(props.PageContext) {
		@CreateForm(props)
	}
}

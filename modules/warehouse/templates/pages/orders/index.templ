package orders

import (
	"fmt"
	"github.com/iota-agency/iota-sdk/components/base"
	"github.com/iota-agency/iota-sdk/components/base/button"
	"github.com/iota-agency/iota-sdk/components/base/pagination"
	"github.com/iota-agency/iota-sdk/components/filters"
	"github.com/iota-agency/iota-sdk/modules/warehouse/viewmodels"
	"github.com/iota-agency/iota-sdk/pkg/presentation/templates/icons"
	"github.com/iota-agency/iota-sdk/pkg/presentation/templates/layouts"
	"github.com/iota-agency/iota-sdk/pkg/types"
)

type IndexPageProps struct {
	*types.PageContext
	Orders          []*viewmodels.Order
	PaginationState *pagination.State
}

templ OrdersTable(props *IndexPageProps) {
	<div class="flex flex-col gap-4 table-wrapper">
		@base.Table(&base.TableProps{
			Columns: []*base.TableColumn{
				{Label: props.T("WarehouseOrders.List.Type"), Key: "title"},
				{Label: props.T("WarehouseOrders.List.Status"), Key: "shortTitle"},
				{Label: props.T("CreatedAt"), Key: "updatedAt"},
				{Label: props.T("Actions"), Class: "w-16"},
			},
		}) {
			for _, order := range props.Orders {
				@base.TableRow() {
					@base.TableCell() {
						{ order.LocalizedType(props.Localizer) }
					}
					@base.TableCell() {
						{ order.LocalizedStatus(props.Localizer) }
					}
					@base.TableCell() {
						<div x-data="relativeformat">
							<span x-text={ fmt.Sprintf("format('%s')", order.CreatedAt) }></span>
						</div>
					}
					@base.TableCell() {
						@button.Secondary(button.Props{Fixed: true, Size: button.SizeSM, Class: "btn-fixed", Href: fmt.Sprintf("/warehouse/orders/%s", order.ID)}) {
							@icons.PencilSimple(icons.Props{Size: "20"})
						}
					}
				}
			}
		}
		if len(props.PaginationState.Pages()) > 1 {
			@pagination.Pagination(props.PaginationState)
		}
	</div>
}

templ newOrderButton(props *IndexPageProps) {
	<summary class="btn btn-primary btn-normal btn-with-icon shrink-0 cursor-pointer w-40">
		@icons.PlusCircle(icons.Props{Size: "18"})
		{ props.T("WarehouseOrders.List.New") }
	</summary>
}

templ OrdersContent(props *IndexPageProps) {
	<div class="m-6">
		<h1 class="text-2xl font-medium">
			{ props.T("NavigationLinks.WarehouseOrders") }
		</h1>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/warehouse/orders"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target=".table-wrapper"
				hx-swap="outerHTML"
			>
				@base.Select(&base.SelectProps{
					Attrs: templ.Attributes{
						"name": "Status",
					},
				}) {
					<option disabled selected>{ props.T("WarehouseOrders.List.Status") }</option>
					<option value="">
						{ props.T("All") }
					</option>
					<option value="pending">
						{ props.T("WarehouseOrders.Single.Statuses.pending") }
					</option>
					<option value="complete">
						{ props.T("WarehouseOrders.Single.Statuses.complete") }
					</option>
				}
				@base.Select(&base.SelectProps{
					Attrs: templ.Attributes{
						"name": "Type",
					},
				}) {
					<option disabled selected>{ props.T("WarehouseOrders.List.Type") }</option>
					<option value="">
						{ props.T("All") }
					</option>
					<option value="in">
						{ props.T("WarehouseOrders.Single.Types.in") }
					</option>
					<option value="out">
						{ props.T("WarehouseOrders.Single.Types.out") }
					</option>
				}
				@filters.PageSize(props.PageContext)
				@filters.CreatedAt(props.PageContext)
				@base.Select(&base.SelectProps{Placeholder: props.T("CreatedAt")}) {
					<option>Yesterday</option>
					<option>The day before yesterday</option>
				}
				@base.DetailsDropdown(newOrderButton(props)) {
					@base.DropdownItem(base.DropdownItemProps{Href: "/warehouse/orders/in/new"}) {
						{ props.T("WarehouseOrders.List.NewIn") }
					}
					@base.DropdownItem(base.DropdownItemProps{Href: "/warehouse/orders/out/new"}) {
						{ props.T("WarehouseOrders.List.NewOut") }
					}
				}
			</form>
			@OrdersTable(props)
		</div>
	</div>
}

templ Index(props *IndexPageProps) {
	@layouts.Authenticated(props.PageContext) {
		@OrdersContent(props)
	}
}

package orders

import (
	"github.com/iota-agency/iota-sdk/components/base"
	"github.com/iota-agency/iota-sdk/pkg/composables"
	"github.com/nicksnyder/go-i18n/v2/i18n"
)

type TypeSelectProps struct {
	Label       string
	Placeholder string
	Value       string
	Error       string
	Attrs       templ.Attributes
}

type OrderType struct {
	Label string
	Value string
}

var (
	Types = []OrderType{
		{Label: "WarehouseOrders.Single.Types.In", Value: "in"},
		{Label: "WarehouseOrders.Single.Types.Out", Value: "out"},
	}
)

templ TypeSelect(props *TypeSelectProps) {
	{{ localizer, _ := composables.UseLocalizer(ctx) }}
	@base.Select(&base.SelectProps{
		Label:       props.Label,
		Placeholder: props.Placeholder,
		Attrs:       props.Attrs,
		Error:       props.Error,
	}) {
		for _, t := range Types {
			if t.Value == props.Value {
				<option value={ t.Value } selected>
					{ localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: t.Label}) }
				</option>
			} else {
				<option value={ t.Value }>
					{ localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: t.Label}) }
				</option>
			}
		}
	}
}

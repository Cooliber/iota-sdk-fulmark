package order_in

import (
	"fmt"
	"github.com/iota-agency/iota-sdk/components/base"
	"github.com/iota-agency/iota-sdk/components/base/button"
	"github.com/iota-agency/iota-sdk/modules/warehouse/viewmodels"
	"github.com/iota-agency/iota-sdk/pkg/composables"
	"github.com/iota-agency/iota-sdk/pkg/presentation/templates/layouts"
	"github.com/iota-agency/iota-sdk/pkg/types"
)

type PageProps struct {
	*types.PageContext
	Errors   map[string]string
	SaveURL  string
	ItemsURL string
}

type OderItemsProps struct {
	Errors map[string]string
	Items  []*viewmodels.OrderItem
}

templ OrderItems(props *OderItemsProps) {
	if len(props.Items) == 0 {
		<tr>
			<td class="p-4 text-center" colspan="5">
				{ composables.MustT(ctx, "WarehouseOrders.Single.NoItems") }
			</td>
		</tr>
	} else {
		for _, item := range props.Items {
			<tr>
				<td class="p-4">
					{ item.Position.Title }
				</td>
				<td class="p-4">
					{ item.Position.Barcode }
				</td>
				<td class="p-4">
					{ item.Quantity }
				</td>
				<td class="p-4">
					{ item.Position.Unit.Title }
				</td>
				<td class="px-4">
					<div class="flex flex-col w-full">
						<label>
							<input
								name={ fmt.Sprintf("Quantities[%s]", item.Position.ID) }
								type="number"
								class="bg-gray-50 border border-gray-300 text-center text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-16 p-1.5"
							/>
						</label>
						if props.Errors[item.Position.ID] != "" {
							<small class="text-xs text-red-500 mt-1">{ props.Errors[item.Position.ID] }</small>
						}
					</div>
				</td>
			</tr>
		}
	}
}

templ New(props *PageProps) {
	@layouts.Authenticated(props.PageContext) {
		<div class="flex flex-col justify-between h-full">
			@base.Card("m-6") {
				<form
					id="search-form"
					hx-post={ props.ItemsURL }
					hx-trigger="change from:select[name='PositionIDs']"
					hx-swap="innerHTML"
					hx-target="#order-items"
				>
					@base.Combobox(base.ComboboxProps{
						Label:        props.T("WarehouseOrders.Single.Position"),
						Placeholder:  props.T("WarehouseOrders.Single.SearchPosition"),
						Searchable:   true,
						NotFoundText: props.T("WarehouseOrders.Single.NoPositionsFound"),
						Name:         "PositionIDs",
						Multiple:     true,
						Endpoint:     "/warehouse/positions/search",
					})
					<div class="overflow-x-auto relative mt-4">
						<table class="min-w-full table-auto rounded-b-lg table bg-surface-600 text-sm">
							<thead>
								<tr class="bg-surface-500 text-200">
									<th class="px-4 py-3 font-medium text-left border-r-0 border-b-0">
										{ props.T("WarehouseOrders.Single.Position") }
									</th>
									<th class="px-4 py-3 font-medium text-left border-r-0 border-b-0">
										{ props.T("WarehouseOrders.Single.Barcode") }
									</th>
									<th class="px-4 py-3 font-medium text-left border-r-0 border-b-0">
										{ props.T("WarehouseOrders.Single.Quantity") }
									</th>
									<th class="px-4 py-3 font-medium text-left border-r-0 border-b-0">
										{ props.T("WarehouseOrders.Single.Unit") }
									</th>
									<th class="px-4 py-3 font-medium text-left border-r-0 border-b-0">
										{ props.T("WarehouseOrders.Single.OrderedQuantity") }
									</th>
								</tr>
							</thead>
							<tbody id="order-items">
								@OrderItems(&OderItemsProps{
									Items:  []*viewmodels.OrderItem{},
									Errors: props.Errors,
								})
							</tbody>
						</table>
					</div>
				</form>
			}
			<div class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4">
				<form
					id="save-form"
					method="post"
					hx-post={ props.SaveURL }
					hx-indicator="#save-btn"
					hx-target="#order-items"
					hx-swap="innerHTML"
				>
					@button.Primary(button.Props{
						Size: button.SizeMD,
						Attrs: templ.Attributes{
							"name":  "_action",
							"value": "save",
							"id":    "save-btn",
						},
					}) {
						{ props.T("Save") }
					}
				</form>
			</div>
		</div>
	}
}

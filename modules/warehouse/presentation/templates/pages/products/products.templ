package products

import (
	"fmt"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/pagination"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/modules/warehouse/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/presentation/templates/icons"
	"github.com/iota-uz/iota-sdk/pkg/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/pkg/types"
)

type IndexPageProps struct {
	*types.PageContext
	Products        []*viewmodels.Product
	PaginationState *pagination.State
}

templ ProductsTable(props *IndexPageProps) {
	<div class="flex flex-col gap-4 table-wrapper">
		@base.Table(&base.TableProps{
			Columns: []*base.TableColumn{
				{Label: props.T("Products.List.Position"), Key: "position"},
				{Label: props.T("Products.List.Status"), Key: "status"},
				{Label: props.T("UpdatedAt"), Key: "updatedAt"},
				{Label: props.T("Actions"), Class: "w-16"},
			},
		}) {
			for _, product := range props.Products {
				@base.TableRow() {
					@base.TableCell() {
						{ product.Position.Title }
					}
					@base.TableCell() {
						{ product.LocalizedStatus(props.Localizer) }
					}
					@base.TableCell() {
						<div x-data="relativeformat">
							<span x-text={ fmt.Sprintf("format('%s')", product.UpdatedAt) }></span>
						</div>
					}
					@base.TableCell() {
						@button.Secondary(button.Props{Fixed: true, Size: button.SizeSM, Class: "btn-fixed", Href: fmt.Sprintf("/warehouse/products/%s", product.ID)}) {
							@icons.PencilSimple(icons.Props{Size: "20"})
						}
					}
				}
			}
		}
		if len(props.PaginationState.Pages()) > 1 {
			@pagination.Pagination(props.PaginationState)
		}
	</div>
}

templ ProductsContent(props *IndexPageProps) {
	<div class="m-6">
		<h1 class="text-2xl font-medium">
			{ props.T("NavigationLinks.Products") }
		</h1>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/warehouse/products"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target=".table-wrapper"
				hx-swap="outerHTML"
			>
				@filters.Search(props.PageContext, []filters.SearchField{
					{
						Label: props.T("Products.List.Position"),
						Key:   "position",
					},
				})
				@base.Select(&base.SelectProps{
					Attrs: templ.Attributes{
						"name": "Status",
					},
				}) {
					<option disabled selected>{ props.T("Products.Single.SelectStatus") }</option>
					<option value="">{ props.T("All") }</option>
					for _, option := range Statuses {
						<option value={ option.Value }>{ props.T(option.MessageId) }</option>
					}
				}
				@filters.PageSize(props.PageContext)
				@filters.CreatedAt(props.PageContext)
				@button.Primary(button.Props{
					Size: button.SizeNormal, Href: "/warehouse/products/new",
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				}) {
					{ props.T("Products.List.New") }
				}
			</form>
			@ProductsTable(props)
		</div>
	</div>
}

templ Index(props *IndexPageProps) {
	@layouts.Authenticated(props.PageContext) {
		@ProductsContent(props)
	}
}

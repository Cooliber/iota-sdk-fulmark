package products

import (
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/selects"
	"github.com/iota-uz/iota-sdk/modules/warehouse/domain/aggregates/product"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type StatusViewModel struct {
	MessageId string
	Value     string
}

var (
	selectOnce = templ.NewOnceHandle()

	InStock       = string(product.InStock)
	InDevelopment = string(product.InDevelopment)
	Approved      = string(product.Approved)
	Statuses      = []StatusViewModel{
		{
			MessageId: "Products.Statuses.in_stock",
			Value:     InStock,
		},
		{
			MessageId: "Products.Statuses.in_development",
			Value:     InDevelopment,
		},
		{
			MessageId: "Products.Statuses.approved",
			Value:     Approved,
		},
	}
)

type StatusSelectProps struct {
	Value string
	Attrs templ.Attributes
}

templ StatusSelect(props *StatusSelectProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@base.Select(&base.SelectProps{
		Label:       pageCtx.T("Products.Single.Status"),
		Placeholder: pageCtx.T("Products.Single.SelectStatus"),
		Attrs:       props.Attrs,
	}) {
		for _, status := range Statuses {
			if status.Value == props.Value {
				<option value={ status.Value } selected>
					{ pageCtx.T(status.MessageId) }
				</option>
			} else {
				<option value={ status.Value }>
					{ pageCtx.T(status.MessageId) }
				</option>
			}
		}
	}
}

type PositionSelectProps struct {
	Value string
	Attrs templ.Attributes
}

templ PositionSelect(props *PositionSelectProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@selects.SearchSelect(&selects.SearchSelectProps{
		Label:       pageCtx.T("Products.Single.Position"),
		Placeholder: pageCtx.T("Products.Single.SearchPosition"),
		Endpoint:    "/warehouse/positions/search",
		Value:       props.Value,
		Attrs:       props.Attrs,
	})
}

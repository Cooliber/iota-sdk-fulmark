package positions

import (
	"github.com/iota-uz/iota-sdk/components"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/icons"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/warehouse/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/types"
)

type EditPageProps struct {
	*types.PageContext
	Position  *viewmodels.Position
	Units     []*viewmodels.Unit
	Errors    map[string]string
	SaveURL   string
	DeleteURL string
}

templ EditForm(props *EditPageProps) {
	<div class="flex flex-col justify-between h-full" id="edit-content">
		@card.Card(card.Props{
			Class:        "grid grid-cols-3 gap-4",
			WrapperClass: "m-6",
		}) {
			@components.UploadInput(&components.UploadInputProps{
				Label:    props.T("WarehousePositions.Single.Images"),
				Name:     "ImageIDs",
				Class:    "col-span-3",
				Form:     "save-form",
				Multiple: true,
				Uploads:  props.Position.Images,
			})
			@input.Text(&input.Props{
				Label:       props.T("WarehousePositions.Single.Title.Label"),
				Placeholder: props.T("WarehousePositions.Single.Title.Placeholder"),
				Error:       props.Errors["Title"],
				Attrs: templ.Attributes{
					"autofocus": true,
					"value":     props.Position.Title,
					"name":      "Title",
					"form":      "save-form",
				},
			})
			@input.Text(&input.Props{
				Label:       props.T("WarehousePositions.Single.Barcode.Label"),
				Placeholder: props.T("WarehousePositions.Single.Barcode.Placeholder"),
				Error:       props.Errors["Barcode"],
				Attrs: templ.Attributes{
					"name":  "Barcode",
					"form":  "save-form",
					"value": props.Position.Barcode,
				},
			})
			@UnitSelect(&UnitSelectProps{
				PageContext: props.PageContext,
				Value:       props.Position.UnitID,
				Units:       props.Units,
				Attrs: templ.Attributes{
					"name": "UnitID",
					"form": "save-form",
				},
			})
		}
		<div
			x-data
			class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4"
		>
			<form
				id="delete-form"
				hx-delete={ props.DeleteURL }
				hx-trigger="submit"
				hx-target="closest .content"
				hx-swap="innerHTML"
				hx-indicator="#delete-position-btn"
				hx-disabled-elt="find button"
			>
				@button.Danger(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":   "_action",
						"value":  "delete",
						"type":   "button",
						"@click": "$dispatch('open-delete-position-confirmation')",
						"id":     "delete-position-btn",
					},
				}) {
					{ props.T("Delete") }
				}
			</form>
			<form
				id="save-form"
				method="post"
				hx-post={ props.SaveURL }
				hx-indicator="#save-btn"
				hx-target="#edit-content"
				hx-swap="outerHTML"
			>
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":  "_action",
						"value": "save",
						"id":    "save-btn",
					},
				}) {
					{ props.T("Save") }
				}
			</form>
		</div>
	</div>
}

templ Edit(props *EditPageProps) {
	@layouts.Authenticated(props.PageContext) {
		@EditForm(props)
		@dialog.Confirmation(&dialog.Props{
			CancelText:  props.T("Cancel"),
			ConfirmText: props.T("Delete"),
			Heading:     props.T("WarehousePositions.Single.Delete"),
			Text:        props.T("WarehousePositions.Single.DeleteConfirmation"),
			Icon:        icons.Trash(icons.Props{Size: "20"}),
			Action:      "open-delete-position-confirmation",
			Attrs: templ.Attributes{
				"@closing": `({target}) => {
					if (target.returnValue === "confirm") {
						let deleteForm = document.getElementById("delete-form");
						htmx.trigger(deleteForm, "submit");
					}
				}`,
			},
		})
	}
}

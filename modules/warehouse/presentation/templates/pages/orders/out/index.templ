package orderout

import (
	"fmt"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"github.com/iota-uz/iota-sdk/pkg/types"
)

type PageProps struct {
	*types.PageContext
	Errors   map[string]string
	SaveURL  string
	ItemsURL string
	Items    []OrderItem
}

type FormProps struct {
	Errors map[string]string
	Items  []OrderItem
}

type OrderItem struct {
	PositionID    string
	PositionTitle string
	Barcode       string
	Unit          string
	InStock       string
	Quantity      string
	Error         string
}

templ quantityInput(item OrderItem) {
	<div class="flex flex-col w-full">
		<label>
			<input
				name={ fmt.Sprintf("Quantity[%s]", item.PositionID) }
				type="number"
				value={ item.Quantity }
				class="bg-gray-50 border border-gray-300 text-center text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-16 p-1.5"
			/>
		</label>
		if item.Error != "" {
			<small class="text-xs text-red-500 mt-1">
				{ item.Error }
			</small>
		}
	</div>
}

templ OrderItemsTable(items []OrderItem) {
	<table
		id="order-items-table"
		class="min-w-full table-auto rounded-b-lg table bg-surface-600 text-sm"
	>
		<thead>
			<tr class="bg-surface-500 text-200">
				<th class="px-4 py-3 font-medium text-left border-r-0 border-b-0">
					{ composables.MustT(ctx, "WarehouseOrders.Single.Position") }
				</th>
				<th class="px-4 py-3 font-medium text-left border-r-0 border-b-0">
					{ composables.MustT(ctx, "WarehouseOrders.Single.Barcode") }
				</th>
				<th class="px-4 py-3 font-medium text-left border-r-0 border-b-0">
					{ composables.MustT(ctx, "WarehouseOrders.Single.Quantity") }
				</th>
				<th class="px-4 py-3 font-medium text-left border-r-0 border-b-0">
					{ composables.MustT(ctx, "WarehouseOrders.Single.Unit") }
				</th>
				<th class="px-4 py-3 font-medium text-left border-r-0 border-b-0">
					{ composables.MustT(ctx, "WarehouseOrders.Single.OrderedQuantity") }
				</th>
			</tr>
		</thead>
		<tbody>
			if len(items) == 0 {
				<tr>
					<td class="p-4 text-center" colspan="5">
						{ composables.MustT(ctx, "WarehouseOrders.Single.NoItems") }
					</td>
				</tr>
			} else {
				for _, item := range items {
					<tr>
						<td class="p-4">
							{ item.PositionTitle }
						</td>
						<td class="p-4">
							{ item.Barcode }
						</td>
						<td class="p-4">
							{ item.InStock }
						</td>
						<td class="p-4">
							{ item.Unit }
						</td>
						<td class="px-4">
							@quantityInput(item)
						</td>
					</tr>
				}
			}
		</tbody>
	</table>
}

templ Form(props *FormProps) {
	@base.Combobox(base.ComboboxProps{
		Label:        composables.MustT(ctx, "WarehouseOrders.Single.Position"),
		Placeholder:  composables.MustT(ctx, "WarehouseOrders.Single.SearchPosition"),
		Searchable:   true,
		NotFoundText: composables.MustT(ctx, "WarehouseOrders.Single.NoPositionsFound"),
		Name:         "PositionIDs",
		Multiple:     true,
		Endpoint:     "/warehouse/positions/search",
	})
	if props.Errors["PositionIDs"] != "" {
		<small class="text-xs text-red-500 mt-1">
			{ props.Errors["PositionIDs"] }
		</small>
	}
	<div class="overflow-x-auto relative mt-4">
		@OrderItemsTable(props.Items)
	</div>
}

templ New(props *PageProps) {
	@layouts.Authenticated(props.PageContext) {
		<div class="flex flex-col justify-between h-full">
			@card.Card(card.Props{WrapperClass: "m-6"}) {
				<form
					id="search-form"
					hx-post={ props.ItemsURL }
					hx-trigger="change from:select[name='PositionIDs']"
					hx-swap="innerHTML"
					hx-target="#order-items-table"
				>
					@Form(&FormProps{
						Errors: props.Errors,
						Items:  props.Items,
					})
				</form>
			}
			<div class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4">
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"hx-post":      props.SaveURL,
						"hx-indicator": "this",
						"hx-target":    "#search-form",
						"hx-swap":      "innerHTML",
						"hx-include":   "#search-form",
					},
				}) {
					{ props.T("Save") }
				}
			</div>
		</div>
	}
}

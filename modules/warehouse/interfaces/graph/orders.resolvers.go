package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"github.com/iota-agency/iota-sdk/modules/warehouse/domain/aggregates/order"
	"github.com/iota-agency/iota-sdk/modules/warehouse/interfaces/graph/mappers"
	"github.com/iota-agency/iota-sdk/modules/warehouse/services"
	"github.com/iota-agency/iota-sdk/pkg/mapping"

	model "github.com/iota-agency/iota-sdk/modules/warehouse/interfaces/graph/gqlmodels"
)

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id int64) (*model.Order, error) {
	orderService := r.app.Service(services.OrderService{}).(*services.OrderService)
	domainOrder, err := orderService.GetByID(ctx, uint(id))
	if err != nil {
		return nil, err
	}
	return mappers.OrderToGraphModel(domainOrder), nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, offset int, limit int, sortBy []string) (*model.PaginatedOrders, error) {
	orderService := r.app.Service(services.OrderService{}).(*services.OrderService)
	orders, err := orderService.GetPaginated(ctx, &order.FindParams{
		Offset: offset,
		Limit:  limit,
		SortBy: sortBy,
	})
	if err != nil {
		return nil, err
	}
	total, err := orderService.Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.PaginatedOrders{
		Data:  mapping.MapViewModels(orders, mappers.OrderToGraphModel),
		Total: total,
	}, nil
}

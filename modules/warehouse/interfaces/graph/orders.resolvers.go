package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/iota-agency/iota-sdk/modules/warehouse/domain/aggregates/order"
	model "github.com/iota-agency/iota-sdk/modules/warehouse/interfaces/graph/gqlmodels"
	"github.com/iota-agency/iota-sdk/modules/warehouse/interfaces/graph/mappers"
	"github.com/iota-agency/iota-sdk/pkg/composables"
	"github.com/iota-agency/iota-sdk/pkg/mapping"
	"github.com/iota-agency/iota-sdk/pkg/serrors"
)

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id int64) (*model.Order, error) {
	domainOrder, err := r.orderService.GetByID(ctx, uint(id))
	if err != nil {
		return nil, err
	}
	return mappers.OrderToGraphModel(domainOrder), nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, query model.OrderQuery) (*model.PaginatedOrders, error) {
	_, err := composables.UseUser(ctx)
	if err != nil {
		graphql.AddError(ctx, serrors.UnauthorizedGQLError(graphql.GetPath(ctx)))
		return nil, nil
	}
	params := &order.FindParams{
		Offset: query.Offset,
		Limit:  query.Limit,
		SortBy: query.SortBy,
	}
	if query.Type != nil {
		params.Type = *query.Type
	}
	if query.Status != nil {
		params.Status = *query.Status
	}
	orders, err := r.orderService.GetPaginated(ctx, params)
	if err != nil {
		return nil, err
	}
	total, err := r.orderService.Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.PaginatedOrders{
		Data:  mapping.MapViewModels(orders, mappers.OrderToGraphModel),
		Total: total,
	}, nil
}

// CompleteOrder is the resolver for the completeOrder field.
func (r *queryResolver) CompleteOrder(ctx context.Context, id int64) (*model.Order, error) {
	domainOrder, err := r.orderService.Complete(ctx, uint(id))
	if err != nil {
		return nil, err
	}
	return mappers.OrderToGraphModel(domainOrder), nil
}

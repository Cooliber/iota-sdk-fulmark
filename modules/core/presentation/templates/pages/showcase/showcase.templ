package showcase

import (
	"bytes"
	"github.com/alecthomas/chroma/v2/quick"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/avatar"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/base/radio"
	"github.com/iota-uz/iota-sdk/components/base/tab"
	"github.com/iota-uz/iota-sdk/components/sidebar"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"log"
)

type ShowcaseProps struct {
	Title string
	Code  string
}

func highlight(source string) string {
	buf := &bytes.Buffer{}
	err := quick.Highlight(buf, source, "go", "html", "monokailight")
	if err != nil {
		log.Fatal(err)
	}
	return buf.String()
}

templ ComponentShowcase(props ShowcaseProps) {
	<h3 class="text-lg font-semibold text-gray-900">
		{ props.Title }
	</h3>
	@tab.Root(tab.Props{
		DefaultValue: "ui",
	}) {
		@tab.List(tab.ListProps{}) {
			@tab.Button("ui") {
				UI
			}
			@tab.Button("code") {
				Code
			}
		}
		@tab.Content("ui") {
			<div class="py-6">
				{ children... }
			</div>
		}
		@tab.Content("code") {
			@templ.Raw(highlight(props.Code))
		}
	}
}

templ Content() {
	<div class="flex flex-col gap-5 p-5">
		@ComponentShowcase(ShowcaseProps{
			Title: "Text Input",
			Code: `
@input.Text(&input.Props{
    Label:       "Input Label",
    Placeholder: "Input Placeholder",
    Error:       "Input Error",
    Attrs: templ.Attributes{
        "name":  "InputName",
        "value": "",
    },
})`,
		}) {
			@input.Text(&input.Props{
				Label:       "Input Label",
				Placeholder: "Input Placeholder",
				Error:       "Input Error",
				Attrs: templ.Attributes{
					"name":  "InputName",
					"value": "",
				},
			})
		}
		@ComponentShowcase(ShowcaseProps{
			Title: "Text Area",
			Code: `
@input.TextArea(&input.TextAreaProps{
    Label:       "Message Template",
    Placeholder: "Enter your template here",
    Value:       "",
    Attrs: templ.Attributes{
        "name": "Template",
        "form": "save-form",
    },
    Error: "",
})`,
		}) {
			@input.TextArea(&input.TextAreaProps{
				Label:       "Message Template",
				Placeholder: "Enter your template here",
				Value:       "",
				Attrs: templ.Attributes{
					"name": "Template",
					"form": "save-form",
				},
				Error: "",
			})
		}
		@ComponentShowcase(ShowcaseProps{
			Title: "Number Input",
			Code: `
@input.Number(&input.Props{
    Label: "Account Balance",
    Attrs: templ.Attributes{
        "name":  "Balance",
        "value": "",
        "form":  "save-form",
    },
    Error: "",
})`,
		}) {
			@input.Number(&input.Props{
				Label: "Account Balance",
				Attrs: templ.Attributes{
					"name":  "Balance",
					"value": "",
					"form":  "save-form",
				},
				Error: "",
			})
		}
		@ComponentShowcase(ShowcaseProps{
			Title: "Basic select",
			Code: `
@base.Select(&base.SelectProps{
    Placeholder: "Select an option",
    Attrs: templ.Attributes{
        "name": "selectName",
    },
}) {
    <option value="option1" selected>Option 1</option>
    <option value="option2">Option 2</option>
    <option value="option3">Option 3</option>
}`,
		}) {
			@base.Select(&base.SelectProps{
				Placeholder: "Select an option",
				Attrs: templ.Attributes{
					"name": "selectName",
				},
			}) {
				<option value="option1" selected>Option 1</option>
				<option value="option2">Option 2</option>
				<option value="option3">Option 3</option>
			}
		}
		@ComponentShowcase(ShowcaseProps{
			Title: "Searchable select",
			Code: `
@base.Combobox(base.ComboboxProps{
    Label:        "Position",
    Placeholder:  "Search position",
    Searchable:   true,
    NotFoundText: "No positions found",
    Name:         "PositionID",
    Endpoint:     "/warehouse/positions/search",
})`,
		}) {
			@base.Combobox(base.ComboboxProps{
				Label:        "Position",
				Placeholder:  "Search position",
				Searchable:   true,
				NotFoundText: "No positions found",
				Name:         "PositionID",
				Endpoint:     "/warehouse/positions/search",
			})
		}
		@ComponentShowcase(ShowcaseProps{
			Title: "Radio Group",
			Code: `
@radio.RadioGroup(radio.RadioGroupProps{Class: "flex space-x-4"}) {
	@radio.CardItem(radio.CardItemProps{
		Name:         "DriverType",
		Value:        "company",
		WrapperClass: templ.Classes("w-full"),
		Checked:      false,
		Attrs: templ.Attributes{
			"x-model": "driverType",
		},
	}) {
		Company Driver
	}
	@radio.CardItem(radio.CardItemProps{
		Name:         "DriverType",
		Value:        "owner",
		WrapperClass: templ.Classes("w-full"),
		Checked:      false,
		Attrs: templ.Attributes{
			"x-model": "driverType",
		},
	}) {
		Owner Driver
	}
	@radio.CardItem(radio.CardItemProps{
		Name:         "DriverType",
		Value:        "lease",
		WrapperClass: templ.Classes("w-full"),
		Checked:      false,
		Attrs: templ.Attributes{
			"x-model": "driverType",
		},
	}) {
		Lease Driver
	}
}`,
		}) {
			@radio.RadioGroup(radio.RadioGroupProps{Class: "flex space-x-4"}) {
				@radio.CardItem(radio.CardItemProps{
					Name:         "DriverType",
					Value:        "company",
					WrapperClass: templ.Classes("w-full"),
					Checked:      false,
					Attrs: templ.Attributes{
						"x-model": "driverType",
					},
				}) {
					Company Driver
				}
				@radio.CardItem(radio.CardItemProps{
					Name:         "DriverType",
					Value:        "owner",
					WrapperClass: templ.Classes("w-full"),
					Checked:      false,
					Attrs: templ.Attributes{
						"x-model": "driverType",
					},
				}) {
					Owner Driver
				}
				@radio.CardItem(radio.CardItemProps{
					Name:         "DriverType",
					Value:        "lease",
					WrapperClass: templ.Classes("w-full"),
					Checked:      false,
					Attrs: templ.Attributes{
						"x-model": "driverType",
					},
				}) {
					Lease Driver
				}
			}
		}
		@ComponentShowcase(ShowcaseProps{
			Title: "Avatar",
			Code: `
@avatar.Avatar(avatar.Props{
    Initials: "JD",
    Class: templ.Classes(
        "w-10 h-10 min-w-10",
        templ.KV("bg-white text-black", active),
    ),
})`,
		}) {
			@avatar.Avatar(avatar.Props{
				Initials: "JD",
				Class: templ.Classes(
					"w-10 h-10 min-w-10",
					templ.KV("bg-white text-black", true),
				),
			})
		}
		@ComponentShowcase(ShowcaseProps{
			Title: "Card",
			Code: `
@card.Card(card.Props{
    Class:        "grid grid-cols-2 gap-4",
    Header:       card.DefaultHeader("Tax Information"),
    WrapperClass: "mt-5",
}) {
    @input.Text(&input.Props{
        Label:       "PIN",
        Placeholder: "Enter PIN",
        Attrs: templ.Attributes{
            "value": "12345678",
            "name":  "Pin",
        },
        Error: "",
    })
}`,
		}) {
			@card.Card(card.Props{
				Class:        "grid grid-cols-2 gap-4",
				Header:       card.DefaultHeader("Tax Information"),
				WrapperClass: "mt-5",
			}) {
				@input.Text(&input.Props{
					Label:       "PIN",
					Placeholder: "Enter PIN",
					Attrs: templ.Attributes{
						"value": "12345678",
						"name":  "Pin",
					},
					Error: "",
				})
			}
		}
		@ComponentShowcase(ShowcaseProps{
			Title: "Date Input",
			Code: `
@input.Date(&input.Props{
    Label:       "Date of Birth",
    Placeholder: "Select date of birth",
    Attrs: templ.Attributes{
        "value": "1990-01-01",
        "name":  "DateOfBirth",
    },
    Error: "",
})`,
		}) {
			@input.Date(&input.Props{
				Label:       "Date of Birth",
				Placeholder: "Select date of birth",
				Attrs: templ.Attributes{
					"value": "1990-01-01",
					"name":  "DateOfBirth",
				},
				Error: "",
			})
		}
		@ComponentShowcase(ShowcaseProps{
			Title: "Table",
			Code: `
@base.Table(base.TableProps{
    Columns: []*base.TableColumn{
        {Label: "Name", Key: "name"},
        {Label: "Amount", Key: "amount"},
        {Label: "Updated At", Key: "updatedAt"},
        {Label: "Actions", Class: "w-16"},
    },
}) {
    @base.TableRow(base.TableRowProps{}) {
        @base.TableCell(base.TableCellProps{}) {
            Office Supplies
        }
        @base.TableCell(base.TableCellProps{}) {
            $250.00
        }
        @base.TableCell(base.TableCellProps{}) {
            <div x-data="relativeformat">
                <span x-text="format('2025-03-15T14:30:00Z')"></span>
            </div>
        }
        @base.TableCell(base.TableCellProps{}) {
            @button.Secondary(button.Props{
                Fixed: true,
                Size:  button.SizeSM,
                Class: "btn-fixed",
                Href:  "/finance/expense-categories/123",
            }) {
                @icons.PencilSimple(icons.Props{Size: "20"})
            }
        }
    }
    @base.TableRow(base.TableRowProps{}) {
        @base.TableCell(base.TableCellProps{}) {
            Travel
        }
        @base.TableCell(base.TableCellProps{}) {
            $1,250.00
        }
        @base.TableCell(base.TableCellProps{}) {
            <div x-data="relativeformat">
                <span x-text="format('2025-04-01T09:15:00Z')"></span>
            </div>
        }
        @base.TableCell(base.TableCellProps{}) {
            @button.Secondary(button.Props{
                Fixed: true,
                Size:  button.SizeSM,
                Class: "btn-fixed",
                Href:  "/finance/expense-categories/456",
            }) {
                @icons.PencilSimple(icons.Props{Size: "20"})
            }
        }
    }
}`,
		}) {
			@base.Table(base.TableProps{
				Columns: []*base.TableColumn{
					{Label: "Name", Key: "name"},
					{Label: "Amount", Key: "amount"},
					{Label: "Updated At", Key: "updatedAt"},
					{Label: "Actions", Class: "w-16"},
				},
			}) {
				@base.TableRow(base.TableRowProps{}) {
					@base.TableCell(base.TableCellProps{}) {
						Office Supplies
					}
					@base.TableCell(base.TableCellProps{}) {
						$250.00
					}
					@base.TableCell(base.TableCellProps{}) {
						<div x-data="relativeformat">
							<span x-text="format('2025-03-15T14:30:00Z')"></span>
						</div>
					}
					@base.TableCell(base.TableCellProps{}) {
						@button.Secondary(button.Props{
							Fixed: true,
							Size:  button.SizeSM,
							Class: "btn-fixed",
							Href:  "/finance/expense-categories/123",
						}) {
							@icons.PencilSimple(icons.Props{Size: "20"})
						}
					}
				}
				@base.TableRow(base.TableRowProps{}) {
					@base.TableCell(base.TableCellProps{}) {
						Travel
					}
					@base.TableCell(base.TableCellProps{}) {
						$1,250.00
					}
					@base.TableCell(base.TableCellProps{}) {
						<div x-data="relativeformat">
							<span x-text="format('2025-04-01T09:15:00Z')"></span>
						</div>
					}
					@base.TableCell(base.TableCellProps{}) {
						@button.Secondary(button.Props{
							Fixed: true,
							Size:  button.SizeSM,
							Class: "btn-fixed",
							Href:  "/finance/expense-categories/456",
						}) {
							@icons.PencilSimple(icons.Props{Size: "20"})
						}
					}
				}
			}
		}
	</div>
}

type IndexPageProps struct {
	SidebarProps sidebar.Props
}

templ Index(props IndexPageProps) {
	@layouts.Base(&layouts.BaseProps{
		Title: "Showcase",
	}) {
		<div class="grid min-h-screen w-full lg:grid-cols-[280px_1fr] overflow-y-auto">
			@sidebar.Sidebar(props.SidebarProps)
			<div class="flex flex-col h-screen overflow-x-hidden px-6">
				@Content()
			</div>
		</div>
	}
}

package login

import (
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/alert"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/internal/assets"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type LoginProps struct {
	ErrorsMap          map[string]string
	ErrorMessage       string
	Email              string
	GoogleOAuthCodeURL string
}

var (
	navbarOnce  = templ.NewOnceHandle()
	companyLogo = "/assets/" + assets.HashFS.HashName("images/logo.webp")
)

templ Header() {
	<section class="h-16 shadow-b-lg border-b w-full flex items-center justify-center px-8 bg-surface-300 border-b-primary">
		<a href="/">
			<img src={ companyLogo } class="h-10 w-auto"/>
		</a>
		<div class="ml-auto flex items-center gap-8">
			<div class="flex items-center justify-center w-9 h-9">
				<input class="peer/system appearance-none absolute" type="radio" name="theme" value="system" id="theme-system" onchange="onThemeChange(this)" checked/>
				<label for="theme-light" class="group/system absolute flex items-center justify-center w-9 h-9 rounded-full bg-gray-200 text-black invisible peer-checked/system:visible">
					@icons.Desktop(icons.Props{Size: "20", Class: "scale-0 duration-200 peer-checked/system:group-[]/system:scale-100"})
				</label>
				<input class="peer/light appearance-none absolute" type="radio" name="theme" value="light" id="theme-light" onchange="onThemeChange(this)"/>
				<label for="theme-dark" class="group/light absolute flex items-center justify-center w-9 h-9 rounded-full bg-gray-200 text-black invisible peer-checked/light:visible">
					@icons.Sun(icons.Props{Size: "20", Variant: icons.Filled, Class: "scale-0 duration-200 peer-checked/light:group-[]/light:scale-100"})
				</label>
				<input class="peer/dark appearance-none absolute" type="radio" name="theme" value="dark" id="theme-dark" onchange="onThemeChange(this)"/>
				<label for="theme-system" class="group/dark absolute flex items-center justify-center w-9 h-9 rounded-full bg-black-950 text-white invisible peer-checked/dark:visible">
					@icons.Moon(icons.Props{Size: "20", Variant: icons.Filled, Class: "scale-0 duration-200 peer-checked/dark:group-[]/dark:scale-100", Attributes: templ.Attributes{"fill": "currentColor"}})
				</label>
			</div>
		</div>
	</section>
	@navbarOnce.Once() {
		<script>
			let THEME_STORAGE_KEY = "iota-theme";
			let savedTheme = window.localStorage.getItem(THEME_STORAGE_KEY);
			let initialTheme = savedTheme ?? "system";
			let root = document.documentElement;
			let previousTheme = initialTheme;
			let radioInput = document.getElementById(`theme-${initialTheme}`);
			function changeTheme(theme) {
				root.classList.remove(previousTheme);
				if (!theme) theme = initialTheme;
				window.localStorage.setItem(THEME_STORAGE_KEY, theme);
				root.classList.add(theme)
				previousTheme = theme;
			}
			function onThemeChange(input) {
				changeTheme(input.value);
			}
			if (radioInput) {
				radioInput.checked = true;
				changeTheme(initialTheme);
			}
		</script>
	}
}

templ Index(p *LoginProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Base(&layouts.BaseProps{Title: pageCtx.T("Login.Meta.Title"), WebsocketURL: "/ws"}) {
		<div class="flex flex-col h-screen overflow-y-auto">
			@Header()
			<div class="flex-1 flex items-center justify-center">
				<form class="mx-4 max-w-md w-full p-6 md:p-11 flex flex-col gap-4 bg-surface-300 rounded-xl shadow-[0_20px_20px_0px_rgba(0,0,0,0.08),0_0_0_7px_rgba(255,255,255,0.5)]" method="post">
					<div class="text-center">
						<h1 class="text-2xl text-100">
							{ pageCtx.T("Login.WelcomeBack") }
						</h1>
						<p class="mt-2 text-200">{ pageCtx.T("Login.LoginToUse") }</p>
					</div>
					<hr class="border border-primary"/>
					@button.Secondary(button.Props{
						Size:  button.SizeNormal,
						Class: "justify-center items-center gap-3",
						Href:  p.GoogleOAuthCodeURL,
						Attrs: templ.Attributes{
							"type": "button",
						},
					}) {
						@GoogleIcon()
						{ pageCtx.T("Login.LoginWithGoogle") }
					}
					if len(p.ErrorMessage) > 0 {
						@alert.Error() {
							{ p.ErrorMessage }
						}
					}
					@input.Email(&input.Props{
						Label: pageCtx.T("Login.Email"),
						Attrs: templ.Attributes{
							"name":  "Email",
							"value": p.Email,
						},
						Error: p.ErrorsMap["Email"],
					})
					@input.Password(&input.Props{
						Label: pageCtx.T("Login.Password"),
						Attrs: templ.Attributes{
							"name": "Password",
						},
						Error: p.ErrorsMap["Password"],
					})
					@button.Primary(button.Props{
						Size:  button.SizeNormal,
						Class: "justify-center",
						Attrs: templ.Attributes{
							"type": "submit",
						},
					}) {
						{ pageCtx.T("Login.Login") }
					}
				</form>
			</div>
		</div>
	}
}

templ GoogleIcon() {
	<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<path fill-rule="evenodd" clip-rule="evenodd" d="M23.52 12.2729C23.52 11.422 23.4436 10.6038 23.3018 9.81836H12V14.4602H18.4582C18.18 15.9602 17.3345 17.2311 16.0636 18.082V21.0929H19.9418C22.2109 19.0038 23.52 15.9274 23.52 12.2729Z" fill="#4285F4"></path>
		<path fill-rule="evenodd" clip-rule="evenodd" d="M12 23.9993C15.24 23.9993 17.9564 22.9248 19.9418 21.092L16.0636 18.0811C14.9891 18.8011 13.6145 19.2266 12 19.2266C8.87455 19.2266 6.22909 17.1157 5.28546 14.2793H1.27637V17.3884C3.25091 21.3102 7.30909 23.9993 12 23.9993Z" fill="#34A853"></path>
		<path fill-rule="evenodd" clip-rule="evenodd" d="M5.28545 14.2804C5.04545 13.5604 4.90909 12.7913 4.90909 12.0004C4.90909 11.2095 5.04545 10.4404 5.28545 9.72042V6.61133H1.27636C0.463636 8.23133 0 10.0641 0 12.0004C0 13.9368 0.463636 15.7695 1.27636 17.3895L5.28545 14.2804Z" fill="#FBBC05"></path>
		<path fill-rule="evenodd" clip-rule="evenodd" d="M12 4.77273C13.7618 4.77273 15.3436 5.37818 16.5873 6.56727L20.0291 3.12545C17.9509 1.18909 15.2345 0 12 0C7.30909 0 3.25091 2.68909 1.27637 6.61091L5.28546 9.72C6.22909 6.88364 8.87455 4.77273 12 4.77273Z" fill="#EA4335"></path>
	</svg>
}

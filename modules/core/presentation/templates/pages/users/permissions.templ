package users

import (
	"fmt"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"github.com/iota-uz/utils/random"
)

type UserPermissionsProps struct {
	User        *viewmodels.User
	Permissions []*viewmodels.Permission
	Errors      map[string]string
}

templ UserPermissions(props *UserPermissionsProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Users.Meta.Permissions.Title")},
	}) {
		<form
			class="flex flex-col justify-between h-[calc(100vh-4rem)]"
			hx-post={ fmt.Sprintf("/users/%s/permissions", props.User.ID) }
			hx-swap="outerHTML"
			hx-indicator="#save-btn"
		>
			<div class="flex-1 overflow-y-auto flex flex-col gap-5 p-6">
				<h2 class="text-lg font-semibold">
					{ pageCtx.T("Users.Single.Permissions") }: { props.User.FullName() }
				</h2>
				@card.Card(card.Props{}) {
					<div class="space-y-3">
						for _, permission := range props.Permissions {
							{{ id := random.String(12, random.LowerCharSet) }}
							<div class="flex justify-between items-center border border-gray-400 bg-gray-200 rounded-md py-2 px-3">
								<label
									class="form-control-label"
									for={ id }
								>
									{ permission.DisplayName() }
								</label>
								@input.Switch(&input.SwitchProps{
									ID:      id,
									Checked: hasPermission(props.User, permission),
									Attrs: templ.Attributes{
										"name":  "PermissionIDs",
										"value": permission.ID,
									},
								})
							</div>
						}
					</div>
				}
			</div>
			<div class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4">
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"id": "save-btn",
					},
				}) {
					{ pageCtx.T("Save") }
				}
			</div>
		</form>
	}
}

func hasPermission(user *viewmodels.User, permission *viewmodels.Permission) bool {
	if user.Permissions == nil {
		return false
	}
	for _, p := range user.Permissions {
		if p.ID == permission.ID {
			return true
		}
	}
	return false
}

package users

import (
	"fmt"
	"github.com/iota-uz/iota-sdk/components"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/icons"
	usercomponents "github.com/iota-uz/iota-sdk/components/user"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/types"
)

type EditFormProps struct {
	*types.PageContext
	User   *viewmodels.User
	Roles  []*viewmodels.Role
	Errors map[string]string
}

templ EditForm(props *EditFormProps) {
	<div class="flex flex-col justify-between h-full" id="edit-content">
		@card.Card(card.Props{
			Class:        "grid grid-cols-3 gap-4",
			WrapperClass: "m-6",
		}) {
			@components.UploadInput(&components.UploadInputProps{
				Label:       props.T("Users.Single.ChooseAvatar"),
				Placeholder: "PNG, JPG",
				Name:        "AvatarID",
				Class:       "col-span-3",
				Accept:      "image/*",
				Error:       props.Errors["AvatarID"],
				Uploads:     []*viewmodels.Upload{props.User.Avatar},
				Form:        "save-form",
			})
			@input.Text(&input.Props{
				Label: props.T("Users.Single.FirstName"),
				Attrs: templ.Attributes{
					"value": props.User.FirstName,
					"name":  "FirstName",
					"form":  "save-form",
				},
				Error: props.Errors["FirstName"],
			})
			@input.Text(&input.Props{
				Label: props.T("Users.Single.LastName"),
				Attrs: templ.Attributes{
					"value": props.User.LastName,
					"name":  "LastName",
					"form":  "save-form",
				},
				Error: props.Errors["LastName"],
			})
			@input.Email(&input.Props{
				Label: props.T("Users.Single.Email"),
				Attrs: templ.Attributes{
					"name":  "Email",
					"value": props.User.Email,
					"form":  "save-form",
				},
				Error: props.Errors["Email"],
			})
			@input.Password(&input.Props{
				Label:       props.T("Users.Single.Password"),
				Placeholder: props.T("Users.Single.EnterPassword"),
				Attrs: templ.Attributes{
					"autocomplete": "new-password",
					"name":         "Password",
					"form":         "save-form",
				},
			})
			@RoleSelect(&RoleSelectProps{
				PageContext: props.PageContext,
				Roles:       props.Roles,
				Selected:    props.User.Roles,
				Error:       props.Errors["RoleID"],
				Attrs: templ.Attributes{
					"name": "RoleID",
					"form": "save-form",
				},
			})
			@usercomponents.LanguageSelect(&usercomponents.LanguageSelectProps{
				Label:       props.T("Users.Single.Language"),
				Placeholder: props.T("Users.Single.SelectLanguage"),
				Value:       string(props.User.UILanguage),
				Attrs:       templ.Attributes{"name": "UILanguage", "form": "save-form"},
			})
		}
		<div
			x-data
			class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4"
		>
			<form
				id="delete-form"
				hx-delete={ fmt.Sprintf("/users/%s", props.User.ID) }
				hx-trigger="submit"
				hx-target="closest .content"
				hx-swap="innerHTML"
				hx-indicator="#delete-user-btn"
				hx-disabled-elt="find button"
			>
				@button.Danger(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":   "_action",
						"value":  "delete",
						"type":   "button",
						"@click": "$dispatch('open-delete-user-confirmation')",
						"id":     "delete-user-btn",
					},
				}) {
					{ props.T("Delete") }
				}
			</form>
			<form
				id="save-form"
				method="post"
				hx-post={ fmt.Sprintf("/users/%s", props.User.ID) }
				hx-indicator="#save-btn"
				hx-target="#edit-content"
				hx-swap="outerHTML"
			>
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":  "_action",
						"value": "save",
						"id":    "save-btn",
					},
				}) {
					{ props.T("Save") }
				}
			</form>
		</div>
	</div>
}

templ Edit(props *EditFormProps) {
	@layouts.Authenticated(props.PageContext) {
		@EditForm(props)
		@dialog.Confirmation(&dialog.Props{
			Heading: props.T("Users.Single.DeleteUser"),
			Text:    props.T("Users.Single.DeleteUserConfirmation"),
			Icon:    icons.Trash(icons.Props{Size: "20"}),
			Action:  "open-delete-user-confirmation",
			Attrs: templ.Attributes{
				"@closing": `({target}) => {
					if (target.returnValue === "confirm") {
						let deleteForm = document.getElementById("delete-form");
						htmx.trigger(deleteForm, "submit");
					}
				}`,
			},
		})
	}
}

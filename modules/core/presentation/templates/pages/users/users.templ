package users

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type IndexPageProps struct {
	Users   []*viewmodels.User
	Page    int
	PerPage int
	Search  string
	HasMore bool
}

func mkInfiniteAttrs(props *IndexPageProps) templ.Attributes {
	return templ.Attributes{
		"hx-get":     fmt.Sprintf("/users?page=%d&name=%s&limit=%d", props.Page+1, props.Search, props.PerPage),
		"hx-trigger": "intersect once",
		"hx-swap":    "afterend",
		"hx-target":  "this",
	}
}

templ UserRow(props *IndexPageProps, user *viewmodels.User, isLastRow bool) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	{{ rowProps := &base.TableRowProps{} }}
	if isLastRow && props.HasMore {
		{{ rowProps.Attrs = mkInfiniteAttrs(props) }}
	}
	@base.TableRow(rowProps) {
		@base.TableCell() {
			<div class="flex items-center gap-3">
				if user.Avatar != nil && user.Avatar.URL != "" {
					<img
						src={ user.Avatar.URL }
						class="w-8 h-8 object-cover rounded-full"
						alt="User Avatar"
					/>
				} else {
					<div class="w-8 h-8 rounded-full flex items-center justify-center bg-brand-500/10 text-brand-500 font-medium text-sm">
						{ string(user.FirstName[0]) }
					</div>
				}
				<span>
					{ user.FullName() }
				</span>
			</div>
		}
		@base.TableCell() {
			if user.LastAction != "" {
				<div>
					{ user.RolesVerbose() }
				</div>
			} else {
				{ pageCtx.T("Unknown") }
			}
		}
		@base.TableCell() {
			<div>
				{ user.Email }
			</div>
		}
		@base.TableCell() {
			<div x-data="relativeformat">
				<span x-text={ fmt.Sprintf("format('%s')", user.UpdatedAt) }></span>
			</div>
		}
		@base.TableCell() {
			@button.Secondary(button.Props{
				Fixed: true,
				Size:  button.SizeSM,
				Class: "btn-fixed",
				Href:  fmt.Sprintf("/users/%s", user.ID),
			}) {
				@icons.PencilSimple(icons.Props{Size: "20"})
			}
		}
	}
}

templ UserRows(props *IndexPageProps) {
	for ix, user := range props.Users {
		@UserRow(props, user, ix == len(props.Users)-1)
	}
}

templ UsersTable(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@base.Table(&base.TableProps{
		Columns: []*base.TableColumn{
			{Label: pageCtx.T("Users.List.FullName"), Key: "fullName"},
			{Label: pageCtx.T("Users.List.Roles"), Key: "roles"},
			{Label: pageCtx.T("Users.List.Email"), Key: "email"},
			{Label: pageCtx.T("UpdatedAt"), Key: "updatedAt"},
			{Label: pageCtx.T("Actions"), Class: "w-16"},
		},
	}) {
		@UserRows(props)
	}
}

templ UsersContent(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@filters.Drawer(filters.DrawerProps{
		Heading: "Filters",
		Action:  "open-user-filters",
	}) {
		@base.Select(&base.SelectProps{
			Prefix: pageCtx.T("PerPage"),
			Attrs: templ.Attributes{
				"name": "limit",
			},
		}) {
			<option selected>15</option>
			<option>25</option>
			<option>50</option>
			<option>100</option>
		}
		@base.Select(&base.SelectProps{Placeholder: pageCtx.T("CreatedAt")}) {
			<option>{ pageCtx.T("Filters.CreatedAt.Yesterday") }</option>
			<option>{ pageCtx.T("Filters.CreatedAt.Ereyesterday") }</option>
		}
	}
	<div class="m-6">
		<div class="flex justify-between md:justify-start">
			<h1 class="text-2xl font-medium">
				{ pageCtx.T("NavigationLinks.Users") }
			</h1>
			<div class="flex md:hidden gap-2">
				@button.Secondary(button.Props{
					Size:  button.SizeNormal,
					Class: "bg-transparent",
					Icon:  icons.List(icons.Props{Size: "18"}),
					Attrs: templ.Attributes{
						"x-data": "",
						"@click": "$dispatch('open-user-filters')",
					},
				})
				@button.Primary(button.Props{
					Size: button.SizeNormal,
					Href: "/users/new",
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				})
			</div>
		</div>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/users"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target="table"
				hx-swap="outerHTML"
			>
				<input type="hidden" name="page" value="1"/>
				<div class="flex-1">
					@input.Text(&input.Props{
						AddonLeft: &input.Addon{
							Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
						},
						Placeholder: pageCtx.T("Search"),
						Attrs: templ.Attributes{
							"name":  "name",
							"value": props.Search,
						},
					})
				</div>
				<div class="hidden md:flex gap-3">
					@base.Select(&base.SelectProps{
						Prefix: pageCtx.T("PerPage"),
						Attrs: templ.Attributes{
							"name": "limit",
						},
					}) {
						<option selected>15</option>
						<option>25</option>
						<option>50</option>
						<option>100</option>
					}
					@base.Select(&base.SelectProps{Placeholder: pageCtx.T("CreatedAt")}) {
						<option>{ pageCtx.T("Filters.CreatedAt.Yesterday") }</option>
						<option>{ pageCtx.T("Filters.CreatedAt.Ereyesterday") }</option>
					}
					@button.Primary(button.Props{
						Size: button.SizeNormal,
						Href: "/users/new",
						Icon: icons.PlusCircle(icons.Props{Size: "18"}),
					}) {
						{ pageCtx.T("Users.List.New") }
					}
				</div>
			</form>
			@UsersTable(props)
		</div>
	</div>
}

templ Index(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		Title: pageCtx.T("Users.Meta.List.Title"),
	}) {
		@UsersContent(props)
	}
}

package users

import (
	"fmt"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/icons"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/types"
)

type IndexPageProps struct {
	*types.PageContext
	Users []*viewmodels.User
}

templ UsersTable(props *IndexPageProps) {
	@base.Table(&base.TableProps{
		Columns: []*base.TableColumn{
			{Label: props.T("Users.List.FullName"), Key: "fullName"},
			{Label: props.T("Users.List.LastAction"), Key: "lastAction"},
			{Label: props.T("UpdatedAt"), Key: "updatedAt"},
			{Label: props.T("Actions"), Class: "w-16"},
		},
	}) {
		for _, user := range props.Users {
			@base.TableRow() {
				@base.TableCell() {
					<div class="flex items-center gap-3">
						if user.Avatar != nil && user.Avatar.URL != "" {
							<img src={ user.Avatar.URL } class="w-8 h-8 rounded-full"/>
						} else {
							<div class="w-8 h-8 rounded-full flex items-center justify-center bg-brand-500/10 text-brand-500 font-medium text-sm">
								{ string(user.FirstName[0]) }
							</div>
						}
						<span>
							{ user.FullName() }
						</span>
					</div>
				}
				@base.TableCell() {
					if user.LastAction != "" {
						<div x-data="relativeformat">
							<span x-text={ fmt.Sprintf("format('%s')", user.LastAction) }></span>
						</div>
					} else {
						{ props.T("Unknown") }
					}
				}
				@base.TableCell() {
					<div x-data="relativeformat">
						<span x-text={ fmt.Sprintf("format('%s')", user.UpdatedAt) }></span>
					</div>
				}
				@base.TableCell() {
					@button.Secondary(button.Props{
						Fixed: true,
						Size:  button.SizeSM,
						Class: "btn-fixed",
						Href:  fmt.Sprintf("/users/%s", user.ID),
					}) {
						@icons.PencilSimple(icons.Props{Size: "20"})
					}
				}
			}
		}
	}
}

templ UsersContent(props *IndexPageProps) {
	<div class="m-6">
		<h1 class="text-2xl font-medium">
			{ props.T("NavigationLinks.Users") }
		</h1>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/users"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target="table"
				hx-swap="outerHTML"
			>
				@input.Text(&input.Props{
					AddonLeft: &input.Addon{
						Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
					},
					Placeholder: props.T("Search"),
					Attrs: templ.Attributes{
						"name": "name",
					},
				})
				@base.Select(&base.SelectProps{
					Prefix: props.T("PerPage"),
					Attrs: templ.Attributes{
						"name": "limit",
					},
				}) {
					<option>15</option>
					<option>25</option>
					<option>50</option>
					<option>100</option>
				}
				@base.Select(&base.SelectProps{Placeholder: props.T("CreatedAt")}) {
					<option>Вчера</option>
					<option>Позавчера</option>
				}
				@button.Primary(button.Props{
					Size: button.SizeNormal,
					Href: "/users/new",
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				}) {
					{ props.T("Users.List.New") }
				}
			</form>
			@UsersTable(props)
		</div>
	</div>
}

templ Index(props *IndexPageProps) {
	@layouts.Authenticated(props.PageContext) {
		@UsersContent(props)
	}
}

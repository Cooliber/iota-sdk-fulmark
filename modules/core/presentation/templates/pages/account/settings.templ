package account

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"github.com/iota-uz/iota-sdk/pkg/types"
)

type SettingsPageProps struct {
	Tabs        []*viewmodels.Tab
	AllNavItems []types.NavigationItem
}

css marginLeft(depth int) {
	margin-left: { fmt.Sprintf("%dpx", depth * 8) };
}

func isChecked(href string, tabs []*viewmodels.Tab) bool {
	for _, tab := range tabs {
		if tab.Href == href {
			return true
		}
	}

	return false
}

templ NavItems(items []types.NavigationItem, tabs []*viewmodels.Tab, depth int, class string) {
	<ul class={ "flex flex-col gap-2", class, marginLeft(depth) }>
		for _, item := range items {
			<li
				if len(item.Children) > 0 {
					x-data="checkboxes"
				}
			>
				if len(item.Children) > 0 {
					<details class="group">
						<summary class="cursor-pointer flex items-center justify-between">
							@input.Checkbox(&input.CheckboxProps{
								Class: "parent",
								Attrs: templ.Attributes{
									"x-ref":   "parent",
									"value":   item.Href,
									"@change": "onParentChange",
								},
							}) {
								if item.Icon != nil {
									@item.Icon
								}
								{ item.Name }
							}
							@icons.CaretDown(icons.Props{Size: "16", Class: "duration-200 group-open:rotate-180"})
						</summary>
						@NavItems(item.Children, tabs, depth+1, "mt-2")
					</details>
				} else {
					@input.Checkbox(&input.CheckboxProps{
						Attrs: templ.Attributes{
							"value":   item.Href,
							"@change": "onChange",
							"name":    "Hrefs",
						},
						ID:      item.Href,
						Checked: isChecked(item.Href, tabs),
					}) {
						<label for={ item.Href }>
							{ item.Name }
						</label>
					}
				}
			</li>
		}
	</ul>
}

templ SettingsForm(props *SettingsPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<form class="flex flex-col justify-between h-full" method="post">
		@card.Card(card.Props{WrapperClass: "m-6"}) {
			@NavItems(props.AllNavItems, props.Tabs, 0, "")
		}
		<div class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4">
			@button.Primary(button.Props{
				Attrs: templ.Attributes{
					"type": "submit",
				}},
			) {
				{ pageCtx.T("Account.Save") }
			}
		</div>
	</form>
}

templ Settings(props *SettingsPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Account.Meta.Settings.Title")},
	}) {
		@SettingsForm(props)
	}
}

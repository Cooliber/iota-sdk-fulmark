package input

import (
	"github.com/iota-agency/iota-erp/internal/presentation/templates/icons"
	"github.com/iota-agency/iota-erp/sdk/utils/random"
	"github.com/iota-agency/iota-erp/sdk/utils/sequence"
	"strings"
)

type addonPosition int

const (
	AddonRight = addonPosition(iota + 1)
	AddonLeft
)

type Addon struct {
	Render    func(props *Props) templ.Component
	Component templ.Component
	Position  addonPosition
}

type Props struct {
	Placeholder string
	Label       string
	Class       string
	Attrs       templ.Attributes
	Addon       *Addon
	Error       string
	id          string
	typ         string
}

func newInput(props *Props) *Props {
	id := random.String(12, random.LowerCharSet)
	class := new(strings.Builder)
	if props.Addon != nil {
		if props.Addon.Position == AddonLeft {
			class.WriteString("pl-10")
		} else if props.Addon.Position == AddonRight {
			class.WriteString("pr-10")
		}
	}
	sequence.Pad(class, " ")
	class.WriteString(props.Class)
	return &Props{id: id, Label: props.Label, Class: class.String(), Attrs: props.Attrs, Addon: props.Addon, typ: props.typ, Placeholder: props.Placeholder, Error: props.Error}
}

templ (p *Props) render() {
	<div class="flex flex-col w-full">
		if len(p.Label) > 0 {
			<label for={ p.id } class="form-control-label mb-2">{ p.Label }</label>
		}
		<div class="w-full relative">
			if p.Addon != nil && p.Addon.Position == AddonLeft {
				<div class="absolute left-3 top-1/2 -translate-y-1/2">
					if p.Addon.Render != nil {
						@p.Addon.Render(p)
					} else if p.Addon.Component != nil {
						@p.Addon.Component
					}
				</div>
			}
			<input id={ p.id } class={ "form-control w-full", p.Class } type={ p.typ } placeholder={ p.Placeholder } { p.Attrs... }/>
			if p.Addon != nil && p.Addon.Position == AddonRight {
				<div class="absolute -translate-x-3 right-3 top-1/2 -translate-y-1/2">
					if p.Addon.Render != nil {
						@p.Addon.Render(p)
					} else if p.Addon.Component != nil {
						@p.Addon.Component
					}
				</div>
			}
		</div>
		if p.Error != "" {
			<small class="text-xs text-red-500 mt-1">{ p.Error }</small>
		}
	</div>
}

templ Text(props *Props) {
	@newInput(&Props{typ: "text", Class: props.Class, Label: props.Label, Attrs: props.Attrs, Placeholder: props.Placeholder, Addon: props.Addon, Error: props.Error}).render()
}

templ Number(props *Props) {
	@newInput(&Props{typ: "number", Class: props.Class, Label: props.Label, Attrs: props.Attrs, Placeholder: props.Placeholder, Addon: props.Addon, Error: props.Error}).render()
}

templ Email(props *Props) {
	@newInput(&Props{typ: "email", Class: props.Class, Label: props.Label, Attrs: props.Attrs, Placeholder: props.Placeholder, Addon: props.Addon, Error: props.Error}).render()
}

templ Date(props *Props) {
	@newInput(&Props{typ: "date", Class: props.Class, Label: props.Label, Attrs: props.Attrs, Placeholder: props.Placeholder, Addon: props.Addon, Error: props.Error}).render()
}

templ passwordLock(p *Props) {
	<label x-data="passwordVisibility" class="flex items-center justify-center">
		<input type="checkbox" class="appearance-none peer password-lock" value={ p.id } @change="toggle"/>
		@icons.Eye(icons.Props{Size: "20", Class: "absolute duration-200 scale-0 peer-checked:scale-100"})
		@icons.EyeSlash(icons.Props{Size: "20", Class: "absolute duration-200 peer-checked:scale-0"})
	</label>
}

templ Password(props *Props) {
	@newInput(&Props{
		typ:         "password",
		Class:       props.Class,
		Label:       props.Label,
		Attrs:       props.Attrs,
		Placeholder: props.Placeholder,
		Error:       props.Error,
		Addon: &Addon{
			Position: AddonRight,
			Render: func(p *Props) templ.Component {
				return passwordLock(p)
			},
		},
	}).render()
}

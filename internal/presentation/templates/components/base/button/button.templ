package button

type Variant int
type Size int

const (
	VariantPrimary = Variant(iota + 1)
	VariantSecondary
	VariantPrimaryOutline
	VariantSidebar
	VariantDanger
)

const (
	SizeNormal = Size(iota + 1)
	SizeMD
	SizeSM
)

var variants = map[Variant]string{
	VariantPrimary:        "btn-primary",
	VariantSecondary:      "btn-secondary",
	VariantSidebar:        "btn-sidebar",
	VariantPrimaryOutline: "btn-primary-outline",
	VariantDanger:         "btn-danger",
}

var sizes = map[Size]string{
	SizeNormal: "btn-normal",
	SizeMD:     "btn-md",
	SizeSM:     "btn-sm",
}

type Props struct {
	variant Variant
	Size    Size
	Fixed   bool
	Href    string
	Rounded bool
	Class   string
	Icon    templ.Component
	Attrs   templ.Attributes
}

templ base(props Props) {
	if len(props.Href) > 0 {
		<a
			href={ templ.SafeURL(props.Href) }
			class={ "shrink-0 btn", 
			variants[props.variant], 
			sizes[props.Size], 
			templ.KV("btn-fixed", props.Fixed), 
			templ.KV("btn-rounded", props.Rounded), 
			templ.KV("btn-with-icon", props.Icon != nil), 
			props.Class }
			{ props.Attrs... }
		>
			if props.Icon != nil {
				@props.Icon
			}
			{ children... }
		</a>
	} else {
		<button
			class={ "shrink-0 btn", 
				variants[props.variant], 
				sizes[props.Size], 
				templ.KV("btn-fixed", props.Fixed),
				templ.KV("btn-rounded", props.Rounded),
				props.Class }
			{ props.Attrs... }
		>
			if props.Icon != nil {
				@props.Icon
			}
			{ children... }
		</button>
	}
}

templ Primary(props Props) {
	@base(Props{variant: VariantPrimary, Size: props.Size, Class: props.Class, Href: props.Href, Fixed: props.Fixed, Rounded: props.Rounded, Attrs: props.Attrs, Icon: props.Icon}) {
		{ children... }
	}
}

templ Secondary(props Props) {
	@base(Props{variant: VariantSecondary, Size: props.Size, Class: props.Class, Href: props.Href, Fixed: props.Fixed, Rounded: props.Rounded, Attrs: props.Attrs, Icon: props.Icon}) {
		{ children... }
	}
}

templ PrimaryOutline(props Props) {
	@base(Props{variant: VariantPrimaryOutline, Size: props.Size, Class: props.Class, Href: props.Href, Fixed: props.Fixed, Rounded: props.Rounded, Attrs: props.Attrs, Icon: props.Icon}) {
		{ children... }
	}
}

templ Danger(props Props) {
	@base(Props{variant: VariantDanger, Size: props.Size, Class: props.Class, Href: props.Href, Fixed: props.Fixed, Rounded: props.Rounded, Attrs: props.Attrs, Icon: props.Icon}) {
		{ children... }
	}
}

templ Sidebar(props Props) {
	@base(Props{variant: VariantSidebar, Size: props.Size, Class: props.Class, Href: props.Href, Fixed: props.Fixed, Rounded: props.Rounded, Attrs: props.Attrs, Icon: props.Icon}) {
		{ children... }
	}
}

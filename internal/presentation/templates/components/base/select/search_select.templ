package select

import (
	"fmt"
	"github.com/iota-agency/iota-erp/internal/modules/warehouse/viewmodels"
	"github.com/iota-agency/iota-erp/internal/types"
)

type Value struct {
    Value string
    Label string
}

type SearchSelectProps struct {
	*types.PageContext
	Label       string
	Placeholder string
	Value       string
	Attrs       templ.Attributes
}

type SearchOptionsProps struct {
	*types.PageContext
	Options          []*Value
	NothingFoundText string
}

templ SearchOptions(props *SearchOptionsProps) {
	if len(props.Options) == 0 {
		<li class="p-2 text-gray-500">{ props.NothingFoundText }</li>
	}
	for _, option := range props.Options {
		<li
			x-on:click={ fmt.Sprintf("selectResult('%s', %s)", option.Label, option.Value) }
			class="p-2 hover:bg-gray-100 cursor-pointer"
		>
			{ option.Label }
		</li>
	}
}

templ PositionSelect(props *SearchSelectProps) {
	<div
		x-data="{ open: false, query: '', selectedId: '' }"
		@click.away="open = false"
		class="relative"
	>
		<input
			type="text"
			placeholder="Search..."
			x-model="query"
			@input.debounce.300ms="fetchResults"
			@focus="open = true"
			class="border p-2 w-full"
		/>
		<input type="hidden" x-model="selectedId" name="position_id"/>
		<ul
			x-show="open"
			id="results-container"
			class="absolute border bg-white w-full mt-1 max-h-60 overflow-auto"
		>
			<!-- Server-rendered results will be injected here -->
		</ul>
	</div>
	<script>
        function fetchResults() {
            if (this.query.length < 2) {
                document.getElementById('results-container').innerHTML = '<li class="p-2 text-gray-500">No results found.</li>';
                return;
            }
            fetch(`/warehouse/positions/search?q=${encodeURIComponent(this.query)}`)
                .then((response) => response.text())
                .then((html) => {
                    document.getElementById('results-container').innerHTML = html;
                })
                .catch((error) => {
                    console.error('Error fetching results:', error);
                    document.getElementById('results-container').innerHTML = '<li class="p-2 text-gray-500">Error loading results.</li>';
                });
        }

        function selectResult(name, id) {
            const input = document.querySelector('[x-model="query"]');
            input.value = name;
            input.dispatchEvent(new Event('input', { bubbles: true }));
            this.selectedId = id;
            this.open = false;
            // Handle further actions, such as navigating or updating the UI.
        }
    </script>
}

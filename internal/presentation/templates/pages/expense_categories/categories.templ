package expense_categories

import (
	"fmt"
	"github.com/iota-agency/iota-erp/internal/domain/expense_category"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/button"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/input"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/icons"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/layouts"
	"github.com/iota-agency/iota-erp/internal/presentation/types"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	"time"
)

templ CategoriesTable(localizer *i18n.Localizer, categories []*category.ExpenseCategory) {
	@base.Table(&base.TableProps{
		Columns: []*base.TableColumn{
			{Label: "ExpenseCategories.List.Name", Key: "name"},
			{Label: "UpdatedAt", Key: "updatedAt"},
			{Label: "Actions", Class: "w-16"},
		},
		Localizer: localizer,
	}) {
		for _, category := range categories {
			@base.TableRow() {
				@base.TableCell() {
					{ category.Name }
				}
				@base.TableCell() {
					<div x-data="relativeformat">
						<span x-text={ fmt.Sprintf("format('%s')", category.UpdatedAt.Format(time.RFC3339)) }></span>
					</div>
				}
				@base.TableCell() {
					@button.Secondary(button.Props{Fixed: true, Size: button.SizeSM, Class: "btn-fixed", Href: fmt.Sprintf("/finance/expense-categories/%d", category.Id)}) {
						@icons.PencilSimple(icons.Props{Size: "20"})
					}
				}
			}
		}
	}
}

templ CategoriesContent(pageCtx *types.PageContext, categories []*category.ExpenseCategory) {
	<div class="m-6">
		<h1 class="text-2xl font-medium">
			{ pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.ExpenseCategories"}) }
		</h1>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/finance/expense-categories"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target="table"
				hx-swap="outerHTML"
			>
				@input.Text(&input.Props{
					Addon: &input.Addon{
						Position:  input.AddonLeft,
						Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
					},
					Placeholder: pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "Search"}),
					Attrs: templ.Attributes{
						"name": "name",
					},
				})
				@base.Select(&base.SelectProps{
					Prefix: pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "PerPage"}),
					Attrs: templ.Attributes{
						"name": "limit",
					},
				}) {
					<option>15</option>
					<option>25</option>
					<option>50</option>
					<option>100</option>
				}
				@base.Select(&base.SelectProps{Placeholder: pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "CreatedAt"})}) {
					<option>Вчера</option>
					<option>Позавчера</option>
				}
				@button.Primary(button.Props{
					Size: button.SizeNormal, Href: "/finance/expense-categories/new",
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				}) {
					{ pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "ExpenseCategories.List.NewCategory"}) }
				}
			</form>
			@CategoriesTable(pageCtx.Localizer, categories)
		</div>
	</div>
}

templ Index(pageCtx *types.PageContext, categories []*category.ExpenseCategory) {
	@layouts.Authenticated(pageCtx) {
		@CategoriesContent(pageCtx, categories)
	}
}
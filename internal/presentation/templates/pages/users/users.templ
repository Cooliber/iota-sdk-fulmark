package users

import (
	"fmt"
	"github.com/iota-agency/iota-erp/internal/domain/user"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/button"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/input"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/icons"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/layouts"
	"github.com/iota-agency/iota-erp/internal/presentation/types"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	"time"
)

templ UsersTable(localizer *i18n.Localizer, users []*user.User) {
	@base.Table([]*base.TableColumn{
		{Label: localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "FullName"}), Key: "fullName"},
		{Label: localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "LastAction"}), Key: "lastAction"},
		{Label: localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "UpdatedAt"}), Key: "updatedAt"},
		{Label: localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "Actions"}), Class: "w-16"},
	}) {
		for _, user := range users {
			@base.TableRow() {
				@base.TableCell() {
					{ user.FullName() }
				}
				@base.TableCell() {
					if v := user.LastAction; v != nil {
						<div x-data="relativeformat">
							<span x-text={ fmt.Sprintf("format('%s')", v.Format(time.RFC3339)) }></span>
						</div>
					} else {
						{ localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "Unknown"}) }
					}
				}
				@base.TableCell() {
					<div x-data="relativeformat">
						<span x-text={ fmt.Sprintf("format('%s')", user.UpdatedAt.Format(time.RFC3339)) }></span>
					</div>
				}
				@base.TableCell() {
					@button.Secondary(button.Props{Fixed: true, Size: button.SizeSM, Class: "btn-fixed", Href: fmt.Sprintf("/users/%d", user.Id)}) {
						@icons.Pencil(icons.Props{Size: "20"})
					}
				}
			}
		}
	}
}

templ Index(pageContext *types.PageContext, users []*user.User) {
	@layouts.Authenticated(pageContext) {
		<div class="m-6">
			<h1 class="text-2xl font-medium">
				{ pageContext.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Users"}) }
			</h1>
			<div class="mt-5 bg-table border border-primary rounded-lg">
				<form
					class="p-4 flex items-center gap-3"
					hx-get="/users"
					hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
					hx-target="table"
					hx-swap="outerHTML"
				>
					@input.Text(&input.Props{
						Addon: &input.Addon{
							Position:  input.AddonLeft,
							Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
						},
						Placeholder: pageContext.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "Search"}),
						Attrs: templ.Attributes{
							"name": "name",
						},
					})
					@base.Select(&base.SelectProps{
						Prefix: pageContext.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "PerPage"}),
						Attrs: templ.Attributes{
							"name": "limit",
						},
					}) {
						<option>15</option>
						<option>25</option>
						<option>50</option>
						<option>100</option>
					}
					@base.Select(&base.SelectProps{Placeholder: pageContext.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "CreatedAt"})}) {
						<option>Вчера</option>
						<option>Позавчера</option>
					}
					@button.Primary(button.Props{
						Size: button.SizeNormal, Href: "/users/new",
						Icon: icons.PlusCircle(icons.Props{Size: "18"}),
					}) {
						{ pageContext.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "NewUser"}) }
					}
				</form>
				@UsersTable(pageContext.Localizer, users)
			</div>
		</div>
	}
}

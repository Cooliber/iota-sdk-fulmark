package users

import (
	"github.com/iota-agency/iota-erp/internal/domain/role"
	"github.com/iota-agency/iota-erp/internal/domain/user"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/button"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/dialog"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/input"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/icons"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/layouts"
	"github.com/iota-agency/iota-erp/internal/presentation/types"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	"strconv"
	"fmt"
)

templ Edit(pageCtx *types.PageContext, user *user.User, roles []*role.Role) {
	@layouts.Authenticated(pageCtx) {
		<form id="delete-form" hx-delete={fmt.Sprintf("/users/%d", user.Id)} hx-trigger="submit" hx-target="closest .content" hx-swap="innerHTML"></form>
		<form class="flex flex-col justify-between h-full" method="post">
			@base.Card("grid grid-cols-3 gap-4 m-6") {
				@input.Text(&input.Props{
					Label: pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "FirstName"}),
					Attrs: templ.Attributes{
						"value": user.FirstName,
						"name":  "firstName",
					},
				})
				@input.Text(&input.Props{
					Label: pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "LastName"}),
					Attrs: templ.Attributes{
						"value": user.LastName,
						"name":  "lastName",
					},
				})
				@input.Email(&input.Props{
					Label: pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "Email"}),
					Attrs: templ.Attributes{
						"value": user.Email,
						"name":  "email",
					},
				})
				@input.Password(&input.Props{Label: pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "Password"}),
					Placeholder: pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "EnterPassword"}),
					Attrs: templ.Attributes{
						"autocomplete": "new-password",
						"name":         "password",
					},
				})
				@base.Select(&base.SelectProps{
					Label:       pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "Role"}),
					Placeholder: pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "SelectRole"}),
					Attrs: templ.Attributes{
						"name": "roleId",
					},
				}) {
					for _, role := range roles {
						<option value={ strconv.Itoa(int(role.Id)) }>{ role.Name }</option>
					}
				}
			}
			<div x-data class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4">
				@button.Danger(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":   "_action",
						"value":  "delete",
						"form":   "delete-form",
						"type":   "button",
						"@click": "$dispatch('open-delete-user-confirmation')",
					},
				}) {
					{ pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "Delete"}) }
				}
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":  "_action",
						"value": "save",
					},
				}) {
					{ pageCtx.Localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "Save"}) }
				}
			</div>
		</form>
		@dialog.Confirmation(&dialog.Props{
			Heading:   "Удалить пользователя",
			Text:      "Вы уверены что хотите удалить пользователя?",
			Localizer: pageCtx.Localizer,
			Icon:      icons.Trash(icons.Props{Size: "20"}),
			Action:    "open-delete-user-confirmation",
			Attrs: templ.Attributes{
				"@closed": `({target}) => {
					if (target.returnValue === "confirm") {
						let deleteForm = document.getElementById("delete-form");
						htmx.trigger(deleteForm, "submit");
					}
				}`,
			},
		})
	}
}

package expenses

import (
	"fmt"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/button"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/dialog"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/input"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/textarea"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/icons"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/layouts"
	"github.com/iota-agency/iota-erp/internal/presentation/viewmodels"
	"github.com/iota-agency/iota-erp/pkg/composables"
)

type EditPageProps struct {
	*composables.PageContext
	Expense    *viewmodels.Expense
	Accounts   []*viewmodels.MoneyAccount
	Categories []*viewmodels.ExpenseCategory
	Errors     map[string]string
}

templ EditForm(props *EditPageProps) {
	<div class="flex flex-col justify-between h-full" id="edit-content">
		@base.Card("grid grid-cols-3 gap-4 m-6") {
			@input.Number(&input.Props{
				Label: props.T("Expenses.Single.Amount"),
				Attrs: templ.Attributes{
					"name":  "Amount",
					"value": props.Expense.Amount,
					"form":  "save-form",
				},
				Error: props.Errors["Amount"],
			})
			@AccountSelect(&AccountSelectProps{
				PageContext: props.PageContext,
				Value:       props.Expense.AccountID,
				Accounts:    props.Accounts,
				Attrs: templ.Attributes{
					"name": "AccountID",
					"form": "save-form",
				},
			})
			@CategorySelect(&CategorySelectProps{
				PageContext: props.PageContext,
				Value:       props.Expense.CategoryID,
				Categories:  props.Categories,
				Attrs: templ.Attributes{
					"name": "CategoryID",
					"form": "save-form",
				},
			})
			@textarea.Basic(&textarea.Props{
				Label: props.T("Expenses.Single.Comment"),
				Attrs: templ.Attributes{
					"name": "Comment",
					"form": "save-form",
				},
				Value:        props.Expense.Comment,
				WrapperClass: "col-span-3",
				Error:        props.Errors["Comment"],
			})
		}
		<div
			x-data
			class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4"
		>
			<form
				id="delete-form"
				hx-delete={ fmt.Sprintf("/finance/expenses/%s", props.Expense.ID) }
				hx-trigger="submit"
				hx-target="closest .content"
				hx-swap="innerHTML"
				hx-indicator="#delete-expense-btn"
				hx-disabled-elt="find button"
			>
				@button.Danger(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":   "_action",
						"value":  "delete",
						"type":   "button",
						"@click": "$dispatch('open-delete-expense-confirmation')",
						"id":     "delete-expense-btn",
					},
				}) {
					{ props.T("Delete") }
				}
			</form>
			<form
				id="save-form"
				method="post"
				hx-post={ fmt.Sprintf("/finance/expenses/%s", props.Expense.ID) }
				hx-indicator="#save-btn"
				hx-target="#edit-content"
				hx-swap="outerHTML"
			>
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":  "_action",
						"value": "save",
						"id":    "save-btn",
					},
				}) {
					{ props.T("Save") }
				}
			</form>
		</div>
	</div>
}

templ Edit(props *EditPageProps) {
	@layouts.Authenticated(props.PageContext) {
		@EditForm(props)
		@dialog.Confirmation(&dialog.Props{
			Heading:   "Expenses.Single.Delete",
			Text:      "Expenses.Single.DeleteConfirmation",
			Localizer: props.Localizer,
			Icon:      icons.Trash(icons.Props{Size: "20"}),
			Action:    "open-delete-expense-confirmation",
			Attrs: templ.Attributes{
				"@closing": `({target}) => {
					if (target.returnValue === "confirm") {
						let deleteForm = document.getElementById("delete-form");
						htmx.trigger(deleteForm, "submit");
					}
				}`,
			},
		})
	}
}

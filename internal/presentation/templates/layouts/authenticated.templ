package layouts

import (
	"github.com/iota-agency/iota-erp/internal/presentation/assets"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base/button"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/icons"
	"github.com/iota-agency/iota-erp/internal/presentation/types"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	"bytes"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/components/base"
)

var (
	iotaLogo = "/assets/" + assets.FS.HashName("images/iota-1c.png")

	navbarOnce = templ.NewOnceHandle()
)

type sidebarItem struct {
	name     string
	href     string
	children []sidebarItem
	icon     templ.Component
}

type sidebarLink struct {
	name     string
	expanded bool
	class    string
	href     string
	icon     templ.Component
}

func newSidebarLink(name, href string, icon templ.Component, active bool) sidebarLink {
	var class bytes.Buffer
	class.WriteString("gap-2 w-full")
	if active {
		class.WriteString(" active")
	}
	return sidebarLink{
		name: name,
		href: href,
		icon: icon,
		class: class.String(),
	}
}

func newSidebarItem(name, href string, icon templ.Component, children []sidebarItem) sidebarItem {
	return sidebarItem{
		name:     name,
		href:     href,
		children: children,
		icon:     icon,
	}
}

templ (l sidebarLink) render() {
	@button.Sidebar(button.Props{Size: "md", Href: l.href, Class: l.class}) {
		if l.icon != nil {
			@l.icon
		}
		{ l.name }
	}
}

templ (i sidebarItem) render(pathname string) {
	<li>
		if len(i.children) > 0 {
			<details class="group">
				<summary class="btn btn-sidebar btn-md gap-2 w-full cursor-pointer">
					if i.icon != nil {
						@i.icon
					}
					{ i.name }
					@icons.CaretUp(icons.Props{Size: "16", Class: "ml-auto duration-200 group-open:rotate-180"})
				</summary>
				<ul class="ml-4 mt-2 flex flex-col gap-2">
					for _, item := range i.children {
						@newSidebarLink(item.name, item.href, item.icon, item.href == pathname).render()
					}
				</ul>
			</details>
		} else {
			@newSidebarLink(i.name, i.href, i.icon, i.href == pathname).render()
		}
	</li>
}

templ sidebar(pathname string, l *i18n.Localizer) {
	<div class="flex w-full flex-col bg-primary shadow-lg py-6">
		<div class="flex h-16 items-center justify-center px-6">
			<a href="/" class="flex items-center gap-2">
				<img src={ iotaLogo } alt="Logo" width="150" height="50"/>
			</a>
		</div>
		<nav class="py-4 flex-1">
			<ul class="flex flex-col gap-2 overflow-y-auto h-[calc(100vh-12rem)] px-6 hide-scrollbar">
				@newSidebarItem(l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Dashboard"}), "/", icons.Gauge(icons.Props{Size: "20"}), []sidebarItem{}).render(pathname)
				@newSidebarItem(l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Users"}), "/users", icons.Users(icons.Props{Size: "20"}), []sidebarItem{}).render(pathname)
				@newSidebarItem(l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.BI-Chat"}), "/bi-chat", icons.ChatCircle(icons.Props{Size: "20"}), []sidebarItem{}).render(pathname)
				@newSidebarItem(l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.KnowledgeBase"}), "/knowledge-base", icons.Book(icons.Props{Size: "20"}), []sidebarItem{}).render(pathname)
				@newSidebarItem(l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Operations"}), "#",
					icons.Pulse(icons.Props{Size: "20"}),
					[]sidebarItem{
						{name: l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Employees"}), href: "/operations/employees"},
						{name: l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Settings"}), href: "/settings"},
						{name: l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Calendar"}), href: "/calendar"},
						{name: l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Projects"}), href: "/projects"},
					}).render(pathname)
				@newSidebarItem(l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Enums"}), "#",
					icons.CheckCircle(icons.Props{Size: "20"}),
					[]sidebarItem{
						{name: l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.TaskTypes"}), href: "/enums/task-types"},
						{name: l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Positions"}), href: "/enums/positions"},
					}).render(pathname)
				@newSidebarItem(l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.CashFlow"}), "#",
					icons.Money(icons.Props{Size: "20"}),
					[]sidebarItem{
						{name: l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.ExpenseCategories"}), href: "/cashflow/expense-categories"},
						{name: l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Payments"}), href: "/cashflow/payments"},
					}).render(pathname)
				@newSidebarItem(l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.Reports"}), "#",
					icons.FileText(icons.Props{Size: "20"}),
					[]sidebarItem{
						{name: l.MustLocalize(&i18n.LocalizeConfig{MessageID: "NavigationLinks.CashFlow"}), href: "/reports/cash-flow"},
					}).render(pathname)
			</ul>
		</nav>
		<div class="px-6">
			@button.Sidebar(button.Props{Size: "md", Class: "w-full gap-2"}) {
				@icons.SignOut(icons.Props{Size: "20"})
				{l.MustLocalize(&i18n.LocalizeConfig{MessageID: "SignOut"})}
			}
		</div>
	</div>
}

templ avatar() {
	<summary class="w-9 h-9 rounded-full font-medium flex items-center justify-center cursor-pointer bg-avatar text-avatar">
		Ш
	</summary>
}

script changeTheme() {
}

templ Navbar() {
	@navbarOnce.Once() {
		<script>
			let THEME_STORAGE_KEY = "iota-theme";
			let savedTheme = window.localStorage.getItem(THEME_STORAGE_KEY);
			let initialTheme = savedTheme ?? "system";
			let root = document.documentElement;
			let previousTheme = initialTheme;
			function changeTheme(theme) {
				root.classList.remove(previousTheme);
				if (!theme) theme = initialTheme;
				window.localStorage.setItem(THEME_STORAGE_KEY, theme);
				root.classList.add(theme)
				previousTheme = theme;
			}
			function onThemeChange(input) {
				changeTheme(input.value);
			}
		</script>
	}

	<section class="h-16 shadow-b-lg border-b w-full flex items-center justify-center px-8 bg-navbar border-b-primary">
		<div class="ml-auto flex items-center gap-8">
			<div class="flex items-center justify-center">
				<input class="peer/system appearance-none absolute" type="radio" name="theme" value="system" id="theme-system" onchange="onThemeChange(this)" checked />
				<label for="theme-light" class="group/system absolute flex items-center justify-center w-9 h-9 rounded-full bg-gray-200 text-black invisible peer-checked/system:visible">
					@icons.Desktop(icons.Props{Size: "20", Class: "scale-0 duration-200 peer-checked/system:group-[]/system:scale-100"})
				</label>
				<input class="peer/light appearance-none absolute" type="radio" name="theme" value="light" id="theme-light" onchange="onThemeChange(this)"/>
				<label for="theme-dark" class="group/light absolute flex items-center justify-center w-9 h-9 rounded-full bg-gray-200 text-black invisible peer-checked/light:visible">
					@icons.SunFill(icons.Props{Size: "20", Class: "scale-0 duration-200 peer-checked/light:group-[]/light:scale-100"})
				</label>
				<input class="peer/dark appearance-none absolute" type="radio" name="theme" value="dark" id="theme-dark" onchange="onThemeChange(this)" />
				<label for="theme-system" class="group/dark absolute flex items-center justify-center w-9 h-9 rounded-full bg-black-950 text-white invisible peer-checked/dark:visible">
					@icons.MoonFill(icons.Props{Size: "20", Class: "scale-0 duration-200 peer-checked/dark:group-[]/dark:scale-100"})
				</label>
			</div>
			@base.DetailsDropdown(avatar()) {
				@base.DropdownItem(base.DropdownItemProps{ Href: "/account" }) {
					Профиль
				}
				@base.DropdownItem(base.DropdownItemProps{ Href: "/settings" }) {
					Настройки
				}
				@base.DropdownItem(base.DropdownItemProps{ Href: "/logout" }) {
					Выйти
				}
			}
		</div>
	</section>
}

templ Authenticated(pageCtx *types.PageContext) {
	@Base(pageCtx) {
		<div class="grid min-h-screen w-full grid-cols-[280px_1fr]">
			@sidebar(pageCtx.Pathname, pageCtx.Localizer)
			<div>
				@Navbar()
				{ children... }
			</div>
		</div>
	}
}

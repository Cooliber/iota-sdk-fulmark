package layouts

import (
	"bytes"
	"github.com/iota-agency/iota-erp/internal/presentation/types"
	"github.com/iota-agency/iota-erp/internal/presentation/templates/icons"
)


type sidebarItem struct {
	name     string
	href     string
	children []sidebarItem
	icon     templ.Component
}

type sidebarLink struct {
	name     string
	expanded bool
	classes  string
	href     string
	icon     templ.Component
}

func newSidebarLink(name, href string, icon templ.Component, active bool) sidebarLink {
	var classes bytes.Buffer
	classes.WriteString("flex items-center gap-4 px-4 py-3 text-base font-medium hover:text-gray-200 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-50")
	if active {
		classes.WriteString("text-white hover:text-gray-100")
	} else {
		classes.WriteString("text-gray-400")
	}

	return sidebarLink{
		name:    name,
		classes: classes.String(),
		href:    href,
		icon:    icon,
	}
}

func newSidebarItem(name, href string, icon templ.Component, children []sidebarItem) sidebarItem {
	return sidebarItem{
		name:     name,
		href:     href,
		children: children,
		icon:     icon,
	}
}

templ (l sidebarLink) render() {
	<a class={ l.classes } href={ templ.URL(l.href) }>
		@l.icon
		{ l.name }
	</a>
}

templ (i sidebarItem) render(pathname string) {
	<li class="rounded-md">
		@newSidebarLink(i.name, i.href, i.icon, pathname == i.href).render()
		if len(i.children) > 0 {
			<ul>
				for _, item := range i.children {
					<div>{ item.name }</div>
				}
			</ul>
		}
	</li>
}

templ sidebar(pathname string) {
	<div key="1" className="flex w-full flex-col bg-gray-950 shadow-lg p-6">
		<div className="flex h-16 items-center justify-center">
			<a href="#" class="flex items-center gap-2">
				<img src="/svg/iota-1c.png" alt="Logo" width="150" height="50"/>
			</a>
		</div>
		<nav className="flex-1 overflow-y-auto py-4">
			<ul className="flex flex-col gap-2 h-full">
				@newSidebarItem("Dashboard", "/", icons.Gauge(icons.Props{Size: "24"}), []sidebarItem{}).render(pathname)
				@newSidebarItem("Users", "/users", icons.Users(icons.Props{Size: "24"}), []sidebarItem{}).render(pathname)
				<div className="flex-grow"></div>
				// <SidebarLink
				//   className="mt-4"
				//   name={t('logout')}
				//   icon={Icons.SignOut}
				//   href="/logout"
				//   active={false}
				//   isExpanded={false}
				// />
			</ul>
		</nav>
	</div>
}

templ Authenticated(pageCtx *types.PageContext) {
	@Base(pageCtx) {
		<div class="grid min-h-screen w-full grid-cols-[280px_1fr]">
			@sidebar(pageCtx.Pathname)
			{ children... }
		</div>
	}
}

package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"github.com/iota-agency/iota-erp/internal/domain/aggregates/role"

	model "github.com/iota-agency/iota-erp/internal/interfaces/graph/gqlmodels"
	"github.com/iota-agency/iota-erp/sdk/mapper"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.CreateRole) (*model.Role, error) {
	entity := &role.Role{}
	if err := mapper.LenientMapping(&input, entity); err != nil {
		return nil, err
	}
	if err := r.app.RoleService.Create(ctx, entity); err != nil {
		return nil, err
	}
	return entity.ToGraph(), nil
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id int64, input model.UpdateRole) (*model.Role, error) {
	entity, err := r.app.RoleService.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}
	if err := mapper.LenientMapping(&input, entity); err != nil {
		return nil, err
	}
	if err := r.app.RoleService.Update(ctx, entity); err != nil {
		return nil, err
	}
	return entity.ToGraph(), nil
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id int64) (bool, error) {
	if err := r.app.RoleService.Delete(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// CreateRolePermission is the resolver for the createRolePermission field.
func (r *mutationResolver) CreateRolePermission(
	ctx context.Context, input model.CreateRolePermission,
) (*model.RolePermissions, error) {
	panic(fmt.Errorf("not implemented: CreateRolePermission - createRolePermission"))
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id int64) (*model.Role, error) {
	entity, err := r.app.RoleService.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return entity.ToGraph(), nil
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, offset int, limit int, sortBy []string) (
	*model.PaginatedRoles, error,
) {
	entities, err := r.app.RoleService.GetPaginated(ctx, limit, offset, sortBy)
	if err != nil {
		return nil, err
	}
	result := make([]*model.Role, len(entities))
	for i, entity := range entities {
		result[i] = entity.ToGraph()
	}
	total, err := r.app.RoleService.Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.PaginatedRoles{
		Data:  result,
		Total: total,
	}, nil
}

// Permission is the resolver for the permission field.
func (r *queryResolver) Permission(ctx context.Context, id int64) (*model.Permission, error) {
	//entity, err := r.app.PermissionService.GetByID(ctx, id)
	//if err != nil {
	//	return nil, err
	//}
	//return entity.ToGraph(), nil
	panic(fmt.Errorf("not implemented: Permission - permission"))
}

// Permissions is the resolver for the permissions field.
func (r *queryResolver) Permissions(
	ctx context.Context, offset int, limit int, sortBy []string,
) (*model.PaginatedPermissions, error) {
	panic(fmt.Errorf("not implemented: Permissions - permissions"))
}

// RolePermission is the resolver for the rolePermission field.
func (r *queryResolver) RolePermission(ctx context.Context, roleID int64, permissionID int64) (
	*model.RolePermissions, error,
) {
	panic(fmt.Errorf("not implemented: RolePermission - rolePermission"))
}

// RolePermissions is the resolver for the rolePermissions field.
func (r *queryResolver) RolePermissions(
	ctx context.Context, offset int, limit int, sortBy []string,
) (*model.PaginatedRolePermissions, error) {
	panic(fmt.Errorf("not implemented: RolePermissions - rolePermissions"))
}

// RoleCreated is the resolver for the roleCreated field.
func (r *subscriptionResolver) RoleCreated(ctx context.Context) (<-chan *model.Role, error) {
	panic(fmt.Errorf("not implemented: RoleCreated - roleCreated"))
}

// RoleUpdated is the resolver for the roleUpdated field.
func (r *subscriptionResolver) RoleUpdated(ctx context.Context) (<-chan *model.Role, error) {
	panic(fmt.Errorf("not implemented: RoleUpdated - roleUpdated"))
}

// RoleDeleted is the resolver for the roleDeleted field.
func (r *subscriptionResolver) RoleDeleted(ctx context.Context) (<-chan int64, error) {
	panic(fmt.Errorf("not implemented: RoleDeleted - roleDeleted"))
}

// RolePermissionCreated is the resolver for the rolePermissionCreated field.
func (r *subscriptionResolver) RolePermissionCreated(ctx context.Context) (<-chan *model.RolePermissions, error) {
	panic(fmt.Errorf("not implemented: RolePermissionCreated - rolePermissionCreated"))
}

// RolePermissionDeleted is the resolver for the rolePermissionDeleted field.
func (r *subscriptionResolver) RolePermissionDeleted(ctx context.Context) (<-chan int64, error) {
	panic(fmt.Errorf("not implemented: RolePermissionDeleted - rolePermissionDeleted"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

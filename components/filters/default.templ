package filters

import (
	"github.com/iota-agency/iota-sdk/components/base"
	"github.com/iota-agency/iota-sdk/components/base/input"
	"github.com/iota-agency/iota-sdk/pkg/presentation/templates/icons"
	"github.com/iota-agency/iota-sdk/pkg/types"
)

templ SearchFieldsTrigger(trigger *base.TriggerProps) {
	<button class="flex items-center gap-2" { trigger.ButtonAttrs... } type="button">
		<div class="flex items-center gap-2 whitespace-nowrap" x-show="selectedValues.size > 0">
			<span class="text-300">Поиск по: </span>
			<span x-show="selectedValues.size > 0" x-text="Array.from(selectedValues.values()).map((v) => v.label).join(', ')"></span>
		</div>
		@icons.ListMagnifyingGlass(icons.Props{Size: "20"})
	</button>
}

type SearchField struct {
	Label string
	Key   string
}

type Props struct {
	*types.PageContext
	Fields []SearchField
}

templ SearchFields(fields []SearchField) {
	@base.Combobox(base.ComboboxProps{
		Name:      "Field",
		ListClass: "!w-auto",
		Trigger: &base.Trigger{Render: func(props *base.TriggerProps) templ.Component {
			return SearchFieldsTrigger(props)
		}}}) {
		for _, field := range fields {
			<option value={ field.Key }>{ field.Label }</option>
		}
	}
}

templ Search(pageCtx *types.PageContext, fields []SearchField) {
	@input.Text(&input.Props{
		AddonLeft: &input.Addon{
			Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
		},
		AddonRight: &input.Addon{
			Component: SearchFields(fields),
		},
		Placeholder: pageCtx.T("Search"),
		Attrs: templ.Attributes{
			"name": "Query",
		},
	})
}

templ PageSize(pageCtx *types.PageContext) {
	@base.Select(&base.SelectProps{
		Prefix: pageCtx.T("PerPage"),
		Attrs: templ.Attributes{
			"name": "limit",
		},
	}) {
		<option value="15">15</option>
		<option value="25" selected>25</option>
		<option value="50">50</option>
		<option value="100">100</option>
	}
}

templ CreatedAt(pageCtx *types.PageContext) {
	<div x-data="dateFns" class="contents">
		<div x-data="{createdAt: ''}" class="contents">
			@base.Select(&base.SelectProps{
				Placeholder: pageCtx.T("CreatedAt"),
				Class:       "w-fit",
				Attrs: templ.Attributes{
					"x-model": "createdAt",
				}},
			) {
				<option value="" selected>{ pageCtx.T("Filters.CreatedAt.AllTime") }</option>
				<option :value="`${startOfDay(0)}|${endOfDay(0)}`">{ pageCtx.T("Filters.CreatedAt.Today") }</option>
				<option :value="`${startOfDay(1)}|${endOfDay(1)}`">{ pageCtx.T("Filters.CreatedAt.Yesterday") }</option>
				<option :value="`${startOfWeek()}|${endOfWeek()}`">{ pageCtx.T("Filters.CreatedAt.ThisWeek") }</option>
				<option :value="`${startOfWeek(1)}|${endOfWeek(1)}`">{ pageCtx.T("Filters.CreatedAt.LastWeek") }</option>
				<option :value="`${startOfMonth()}|${endOfMonth()}`">{ pageCtx.T("Filters.CreatedAt.ThisMonth") }</option>
			}
			<input type="hidden" name="CreatedAt.From" :value="createdAt.split('|')[0]"/>
			<input type="hidden" name="CreatedAt.To" :value="createdAt.split('|')?.[1]"/>
		</div>
	</div>
}

templ Default(props *Props) {
	<div class="contents" x-data="dateFns">
		@Search(props.PageContext, props.Fields)
		@PageSize(props.PageContext)
		@CreatedAt(props.PageContext)
	</div>
}

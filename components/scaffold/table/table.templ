// Package scaffold provides utilities for generating dynamic UI components.
//
// It simplifies the creation of consistent data tables and other UI elements
// based on configuration and data, reducing boilerplate code.
package table

import (
	"fmt"
	"time"

	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/components/loaders"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

// DateTime renders a timestamp with Alpine-based relative formatting
templ DateTime(ts time.Time) {
	<div x-data="relativeformat">
		<span x-text={ fmt.Sprintf(`format('%s')`, ts.Format(time.RFC3339)) }>
			{ ts.Format("2006-01-02 15:04:05") }
		</span>
	</div>
}

// Rows renders the table rows for a scaffold table
templ Rows(cfg *TableConfig) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<tr class="hidden">
		<td colspan={ fmt.Sprintf("%d", len(cfg.Columns)) }>
			@loaders.Spinner(loaders.SpinnerProps{
				ContainerClass: templ.Classes("flex justify-center items-center py-4"),
			})
		</td>
	</tr>
	if len(cfg.Rows) == 0 {
		@base.TableRow(base.TableRowProps{
			Attrs: templ.Attributes{
				"class": "hide-on-load",
			},
		}) {
			@base.TableCell(base.TableCellProps{
				Classes: templ.Classes("text-center"),
				Attrs: templ.Attributes{
					"colspan": fmt.Sprintf("%d", len(cfg.Columns)),
				},
			}) {
				{ pageCtx.T("Scaffold.Table.NothingFound") }
			}
		}
	} else {
		for _, row := range cfg.Rows {
			@base.TableRow(base.TableRowProps{
				Attrs: row.Attrs(),
			}) {
				for _, cell := range row.Cells() {
					@base.TableCell(base.TableCellProps{}) {
						@cell
					}
				}
			}
		}
	}
}

// Table renders a dynamic table based on configuration and data
templ Table(config *TableConfig) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	if len(config.Rows) == 0 {
		@base.TableEmptyState(base.TableEmptyStateProps{
			Title:       pageCtx.T("Scaffold.Table.NoDataTitle"),
			Description: pageCtx.T("Scaffold.Table.NoDataDescription"),
		})
	} else {
		@base.Table(base.TableProps{
			Columns: toBaseTableColumns(config.Columns),
			TBodyAttrs: templ.Attributes{
				"id": "table-body",
			},
		}) {
			@Rows(config)
		}
	}
}

// TableSection combines filters and table into one form to enable unified HTMX update
templ TableSection(config *TableConfig) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<form
		hx-get={ config.DataURL }
		hx-push-url="true"
		hx-trigger="keyup changed delay:300ms from:input, change from:select, change from:input[type='checkbox']"
		hx-target="#table-body"
		hx-swap="innerHTML"
		hx-indicator="#table-body"
	>
		<div class="flex gap-5">
			<!-- Left sidebar with filters -->
			if config.SideFilter != nil {
				<div class="hidden md:block w-64 flex-shrink-0">
					@config.SideFilter
				</div>
			}
			<!-- Main content area with search, filters, and table -->
			<div class="flex-1">
				<div class="bg-surface-600 border border-primary rounded-lg">
					<div class="p-4 flex flex-row md:items-center gap-3">
						<div class="flex-1">
							@input.Text(&input.Props{
								AddonLeft: &input.Addon{
									Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
								},
								Placeholder: pageCtx.T("Search"),
								Attrs: templ.Attributes{
									"name":  "Search",
									"value": "",
								},
							})
						</div>
						<div class="hidden md:flex gap-3 h-full">
							for _, filter := range config.Filters {
								@filter
							}
						</div>
					</div>
					@Table(config)
				</div>
			</div>
		</div>
		@filters.Drawer(filters.DrawerProps{
			Heading: pageCtx.T("Scaffold.Filters.Title"),
			Action:  "open-filters",
		}) {
			if config.SideFilter != nil {
				@config.SideFilter
			}
			for _, filter := range config.Filters {
				@filter
			}
		}
	</form>
}

// Content renders the complete scaffold page content with filters and table
templ Content(config *TableConfig) {
	<div class="m-6">
		<div class="flex justify-between md:justify-start">
			<h1 class="text-2xl font-medium">
				{ config.Title }
			</h1>
			<div class="flex md:hidden gap-2">
				@button.Secondary(button.Props{
					Size:  button.SizeNormal,
					Class: "bg-transparent",
					Icon:  icons.List(icons.Props{Size: "18"}),
					Attrs: templ.Attributes{
						"x-data": "",
						"@click": "$dispatch('open-filters')",
					},
				})
			</div>
		</div>
		<div class="mt-5">
			@TableSection(config)
		</div>
		<!-- Placeholder for the view drawer -->
		<div id="view-drawer"></div>
	</div>
}

// Page renders a complete authenticated page with the scaffolded content
templ Page(config *TableConfig) {
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: config.Title},
	}) {
		@Content(config)
	}
}

// Helper to convert scaffold columns to base table columns
func toBaseTableColumns(columns []TableColumn) []*base.TableColumn {
	result := make([]*base.TableColumn, len(columns))
	for i, col := range columns {
		result[i] = &base.TableColumn{
			Key:   col.Key(),
			Label: col.Label(),
			Class: col.Class(),
		}
	}
	return result
}

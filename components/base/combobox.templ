package base

import (
	"fmt"
	"github.com/iota-agency/iota-sdk/pkg/presentation/templates/icons"
)

type ComboboxProps struct {
	Multiple    bool
	Placeholder string
	Class       string
	Name        string
	Form        string
	Label       string
}

templ Combobox(props ComboboxProps) {
	<div
		x-data="combobox"
		class={ "w-full", props.Class }
		x-on:keydown="highlightMatchingOption($event.key)"
		x-on:keydown.esc.window="open = false, openedWithKeyboard = false"
	>
		if len(props.Label) > 0 {
			<label class="form-control-label mb-2">{ props.Label }</label>
		}
		<select x-bind="select" class="hidden" multiple?={ props.Multiple } name={ props.Name } form={ props.Form }>
			{ children... }
		</select>
		<div class="relative">
			<button class="form-control flex items-center justify-between w-full gap-6" x-on:click="open = !open" x-on:keydown.down.prevent="openedWithKeyboard = true" x-on:keydown.enter.prevent="openedWithKeyboard = true" x-on:keydown.space.prevent="openedWithKeyboard = true">
				<span class="text-sm font-normal" x-text={ fmt.Sprintf("value !== '' ? value : '%s'", props.Placeholder) }></span>
				@icons.ChevronDown(icons.Props{
					Size:  "16",
					Class: "text-200 duration-300",
					Attributes: templ.Attributes{
						":class": "{'rotate-180': open || openedWithKeyboard}",
					},
				})
			</button>
			<ul
				x-ref="list"
				x-cloak
				x-show="open || openedWithKeyboard"
				class="absolute z-10 left-0 top-11 flex max-h-44 w-full flex-col overflow-hidden overflow-y-auto border-gray-100 bg-white py-1.5 rounded-md drop-shadow-sm"
				x-on:click.outside="open = false, openedWithKeyboard = false"
				x-on:keydown.down.prevent="$focus.wrap().next()"
				x-on:keydown.up.prevent="$focus.wrap().previous()"
				x-transition
				x-trap="openedWithKeyboard"
			>
				<template x-for="(item, index) in options" x-bind:key="index">
					<li class="combobox-option inline-flex cursor-pointer justify-between gap-6 px-4 py-2 text-sm hover:bg-brand-500 focus-visible:bg-brand-500 hover:text-white focus-visible:text-white focus-visible:outline-none" x-on:click="setIndex(index)" x-on:keydown.enter="setIndex(index)" x-bind:id="'option-' + index" tabindex="0">
						<span x-text="item.textContent"></span>
						@icons.Check(icons.Props{Size: "16", Attributes: templ.Attributes{
							"x-cloak": "",
							"x-show":  "selectedIndices.has(Number(index))",
						}})
					</li>
				</template>
			</ul>
		</div>
	</div>
}

{"version":3,"sources":["../lib/utils.ts","../components/callback-modal.tsx","../components/typing-indicator.tsx","../components/quick-reply-buttons.tsx","../lib/api-service.ts","../lib/translations.ts","../components/chatbot-interface.tsx"],"names":["translations","useState","React","X","useEffect","React4","useRef","threadId","error","ChevronDown","Send"],"mappings":"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","file":"index.js","sourcesContent":["import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport type { Translations } from './translations';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatDate(date: Date, translations: Translations): string {\n  const day = date.getDate();\n  const month = translations.months[date.getMonth()];\n  const year = date.getFullYear();\n\n  return `${month} ${day}, ${year}`;\n}\n","'use client';\n\nimport React from 'react';\nimport { X } from 'lucide-react';\nimport { useState } from 'react';\nimport type { Translations } from '@/lib/translations';\n\ninterface CallbackModalProps {\n  isOpen: boolean\n  onClose: () => void\n  onSubmit: (_phoneNumber: string) => void\n  translations: Translations\n}\n\nexport function CallbackModal({ isOpen, onClose, onSubmit, translations }: CallbackModalProps) {\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [consentChecked, setConsentChecked] = useState(false);\n\n  if (!isOpen) {return null;}\n\n  const handleSubmit = () => {\n    if (phoneNumber.trim() && consentChecked) {\n      onSubmit(phoneNumber);\n      onClose();\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-3xl w-full max-w-md mx-4 overflow-hidden\">\n        <div className=\"p-4 flex justify-between items-center\">\n          <span className=\"text-gray-500 text-sm\">Modal</span>\n          <button\n            onClick={onClose}\n            className=\"w-8 h-8 flex items-center justify-center rounded-full border border-gray-300\"\n          >\n            <X size={16} />\n          </button>\n        </div>\n\n        <div className=\"p-6 pt-0\">\n          <h2 className=\"text-2xl font-medium text-[#0a223e] mb-2\">{translations.callbackModalTitle}</h2>\n          <p className=\"text-[#8b98a5] mb-6\">{translations.callbackModalSubtitle}</p>\n\n          <div className=\"mb-2 text-[#8b98a5] text-sm\">{translations.callbackPhoneInputLabel}</div>\n\n          <div className=\"relative mb-4\">\n            <input\n              type=\"text\"\n              className=\"w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-1 focus:ring-[#2e67b4]\"\n              placeholder={translations.phoneInputPlaceholder}\n              value={phoneNumber}\n              onChange={(e) => setPhoneNumber(e.target.value)}\n            />\n            <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 bg-[#2e67b4] text-white w-6 h-6 rounded-full flex items-center justify-center\">\n              <span className=\"text-xs\">B</span>\n            </div>\n          </div>\n\n          <p className=\"text-[#2e67b4] text-sm mb-4\">{translations.dataPrivacyMessage}</p>\n\n          <div className=\"flex items-start mb-6\">\n            <div\n              className={`w-6 h-6 flex-shrink-0 rounded border ${\n                consentChecked ? 'bg-[#2e67b4] border-[#2e67b4] flex items-center justify-center' : 'border-gray-300'\n              } mr-2 cursor-pointer`}\n              onClick={() => setConsentChecked(!consentChecked)}\n            >\n              {consentChecked && <span className=\"text-white text-xs\">✓</span>}\n            </div>\n            <span className=\"text-[#0a223e]\">{translations.dataProcessingConsent}</span>\n          </div>\n\n          <div className=\"flex gap-4\">\n            <button onClick={onClose} className=\"flex-1 py-3 bg-[#e4e9ee] text-[#0a223e] rounded-lg\">\n              {translations.backButton}\n            </button>\n            <button\n              onClick={handleSubmit}\n              disabled={!phoneNumber.trim() || !consentChecked}\n              className={`flex-1 py-3 rounded-lg ${\n                phoneNumber.trim() && consentChecked ? 'bg-[#2e67b4] text-white' : 'bg-[#e4e9ee] text-[#bdc8d2]'\n              }`}\n            >\n              {translations.requestCallButton}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport type { Translations } from '@/lib/translations';\n\ninterface TypingIndicatorProps {\n  translations: Translations\n  botTitle?: string\n}\n\nexport function TypingIndicator({ translations, botTitle }: TypingIndicatorProps) {\n  const [dots, setDots] = useState('.');\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDots((prev) => {\n        if (prev === '...') {return '.';}\n        return prev + '.';\n      });\n    }, 500);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"max-w-[80%] bg-white rounded-lg p-4 shadow-sm\">\n      <div className=\"text-[#2e67b4] font-medium mb-2\">{botTitle || translations.chatbotTitle}</div>\n      <div className=\"flex items-center\">\n        <span className=\"text-[#8b98a5] font-medium\">{dots}</span>\n      </div>\n    </div>\n  );\n}\n","'use client';\n\nimport React from 'react';\nimport type { Translations } from '@/lib/translations';\nimport type { FAQItem } from '@/components/chatbot-interface';\n\ninterface QuickReplyButtonsProps {\n  translations: Translations\n  isTyping: boolean\n  onQuickReply: (_question: string) => void\n  faqItems?: FAQItem[]\n}\n\nexport function QuickReplyButtons({ translations, isTyping, onQuickReply, faqItems }: QuickReplyButtonsProps) {\n  const buttonClasses =\n    'flex-1 px-4 py-3 text-[#0a223e] bg-white border border-gray-300 rounded-full text-sm whitespace-normal text-center min-h-[40px] flex items-center justify-center';\n\n  // Use custom FAQ items if provided, otherwise use default translations\n  const defaultFAQs = [\n    { id: 'extend-policy', question: translations.extendPolicyQuestion },\n    { id: 'find-contract', question: translations.findContractNumberQuestion },\n    { id: 'submit-claim', question: translations.submitClaimQuestion },\n  ];\n\n  const faqs = faqItems || defaultFAQs;\n\n  return (\n    <div className=\"flex flex-wrap gap-2 mb-4\">\n      {faqs.length > 0 &&\n        faqs.slice(0, 2).map((faq) => (\n          <button key={faq.id} className={buttonClasses} onClick={() => onQuickReply(faq.question)} disabled={isTyping}>\n            {faq.question}\n          </button>\n        ))}\n\n      {faqs.length > 2 && (\n        <button\n          className={'w-full px-4 py-3 text-[#0a223e] bg-white border border-gray-300 rounded-full text-sm whitespace-normal text-center min-h-[40px] flex items-center justify-center mt-2'}\n          onClick={() => onQuickReply(faqs[2].question)}\n          disabled={isTyping}\n        >\n          {faqs[2].question}\n        </button>\n      )}\n    </div>\n  );\n}\n","// Types for API requests and responses\nexport interface CreateThreadRequest {\n  message: string\n  phone: string\n}\n\nexport interface ThreadResponse {\n  thread_id: string\n}\n\nexport interface Message {\n  role: 'user' | 'assistant'\n  message: string\n}\n\nexport interface MessagesResponse {\n  messages: Message[]\n}\n\nexport interface AddMessageRequest {\n  message: string\n}\n\n// API service for chat functionality\nclass ChatApiService {\n  private apiEndpoint = '';\n\n  setApiEndpoint(endpoint: string) {\n    this.apiEndpoint = endpoint;\n  }\n\n  async createThread(data: CreateThreadRequest): Promise<ThreadResponse> {\n    const response = await fetch(`${this.apiEndpoint}/messages`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error(errorData?.error || errorData?.details || `API error: ${response.status}`);\n    }\n\n    return await response.json();\n  }\n\n  // Get all messages for a thread\n  async getMessages(threadId: string): Promise<MessagesResponse> {\n    const response = await fetch(`${this.apiEndpoint}/messages/${threadId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error(errorData?.error || errorData?.details || `API error: ${response.status}`);\n    }\n\n    return await response.json();\n  }\n\n  // Add a new message to an existing thread\n  async addMessage(threadId: string, data: AddMessageRequest): Promise<ThreadResponse> {\n    const response = await fetch(`${this.apiEndpoint}/messages/${threadId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error(errorData?.error || errorData?.details || `API error: ${response.status}`);\n    }\n\n    return await response.json();\n  }\n}\n\n// Export a singleton instance\nexport const chatApi = new ChatApiService();\n","// Define the structure of our translations\nexport interface Translations {\n  // Header\n  chatbotTitle: string\n  chatbotSubtitle: string\n\n  // Welcome message\n  welcomeGreeting: string\n  welcomeMessage: string\n  phoneRequestMessage: string\n\n  // Input placeholders\n  phoneInputPlaceholder: string\n  messageInputPlaceholder: string\n\n  // Buttons\n  sendButton: string\n  callbackRequestButton: string\n\n  // Quick replies\n  extendPolicyQuestion: string\n  findContractNumberQuestion: string\n  submitClaimQuestion: string\n\n  // Callback modal\n  callbackModalTitle: string\n  callbackModalSubtitle: string\n  callbackPhoneInputLabel: string\n  dataPrivacyMessage: string\n  dataProcessingConsent: string\n  backButton: string\n  requestCallButton: string\n\n  // Messages\n  callbackConfirmation: string\n  errorLoadingMessages: string\n  errorCreatingChat: string\n  errorSendingMessage: string\n  threadNotFoundMessage: string\n\n  // Date formatting\n  months: string[]\n}\n\n// Russian translations (default)\nexport const ru: Translations = {\n  // Header\n  chatbotTitle: 'Ai chat bot',\n  chatbotSubtitle: 'Наш AI-бот готов помочь вам круглосуточно',\n\n  // Welcome message\n  welcomeGreeting: 'Привет! Я виртуальный помощник Euroasia Insurance 👋',\n  welcomeMessage: 'Готов помочь вам с оформлением полиса, расчетом стоимости и любыми вопросами.',\n  phoneRequestMessage:\n    'Чтобы начать, пожалуйста, введите свой номер телефона — мы используем его для связи и сохранения истории обращений.',\n\n  // Input placeholders\n  phoneInputPlaceholder: '+ 998 (__) ___ __ __',\n  messageInputPlaceholder: 'Сообщения',\n\n  // Buttons\n  sendButton: 'Отправить',\n  callbackRequestButton: 'Запрос обратного звонка',\n\n  // Quick replies\n  extendPolicyQuestion: 'Как продлить полис?',\n  findContractNumberQuestion: 'Где найти номер договора?',\n  submitClaimQuestion: 'Как подать заявление на страховой случай?',\n\n  // Callback modal\n  callbackModalTitle: 'Закажите обратный звонок',\n  callbackModalSubtitle: 'Оставьте свой номер телефона, и наш специалист свяжется с вами в ближайшее время',\n  callbackPhoneInputLabel: 'Введите номер телефона',\n  dataPrivacyMessage: 'Мы не передаём ваши данные третьим лицам',\n  dataProcessingConsent: 'Согласен(а) с обработкой персональных данных',\n  backButton: 'Назад',\n  requestCallButton: 'Заказать звонок',\n\n  // Messages\n  callbackConfirmation: 'Спасибо за запрос! Наш специалист свяжется с вами по номеру {phone} в ближайшее время.',\n  errorLoadingMessages: 'Не удалось загрузить историю сообщений. Пожалуйста, попробуйте еще раз позже.',\n  errorCreatingChat: 'Произошла ошибка при создании чата. Пожалуйста, попробуйте еще раз позже.',\n  errorSendingMessage: 'Извините, произошла ошибка при отправке сообщения. Пожалуйста, попробуйте еще раз позже.',\n  threadNotFoundMessage: 'Ваш чат был завершен или не найден. Начинаем новый чат.',\n\n  // Date formatting\n  months: [\n    'Январь',\n    'Февраль',\n    'Март',\n    'Апрель',\n    'Май',\n    'Июнь',\n    'Июль',\n    'Август',\n    'Сентябрь',\n    'Октябрь',\n    'Ноябрь',\n    'Декабрь',\n  ],\n};\n\n// Uzbek translations (Latin script)\nexport const uz: Translations = {\n  // Header\n  chatbotTitle: 'AI suhbat boti',\n  chatbotSubtitle: 'Bizning AI-botimiz sizga 24/7 yordam berishga tayyor',\n\n  // Welcome message\n  welcomeGreeting: 'Salom! Men Euroasia Insurance virtual yordamchisiman 👋',\n  welcomeMessage:\n    \"Sug'urta polisini rasmiylashtirish, narxni hisoblash va har qanday savollar bo'yicha yordam berishga tayyorman.\",\n  phoneRequestMessage:\n    'Boshlash uchun, iltimos, telefon raqamingizni kiriting — biz undan aloqa va murojaat tarixini saqlash uchun foydalanamiz.',\n\n  // Input placeholders\n  phoneInputPlaceholder: '+ 998 (__) ___ __ __',\n  messageInputPlaceholder: 'Xabarlar',\n\n  // Buttons\n  sendButton: 'Yuborish',\n  callbackRequestButton: \"Qayta qo'ng'iroq so'rovi\",\n\n  // Quick replies\n  extendPolicyQuestion: 'Polisni qanday uzaytirish mumkin?',\n  findContractNumberQuestion: 'Shartnoma raqamini qayerdan topish mumkin?',\n  submitClaimQuestion: \"Sug'urta hodisasi bo'yicha arizani qanday topshirish kerak?\",\n\n  // Callback modal\n  callbackModalTitle: \"Qayta qo'ng'iroq buyurtma qiling\",\n  callbackModalSubtitle:\n    \"Telefon raqamingizni qoldiring, va bizning mutaxassisimiz siz bilan yaqin vaqt ichida bog'lanadi\",\n  callbackPhoneInputLabel: 'Telefon raqamini kiriting',\n  dataPrivacyMessage: \"Biz sizning ma'lumotlaringizni uchinchi shaxslarga bermaydi\",\n  dataProcessingConsent: \"Shaxsiy ma'lumotlarni qayta ishlashga roziman\",\n  backButton: 'Orqaga',\n  requestCallButton: \"Qo'ng'iroq buyurtma qilish\",\n\n  // Messages\n  callbackConfirmation:\n    \"So'rov uchun rahmat! Mutaxassisimiz {phone} raqami orqali siz bilan yaqin vaqt ichida bog'lanadi.\",\n  errorLoadingMessages: \"Xabarlar tarixini yuklab bo'lmadi. Iltimos, keyinroq qayta urinib ko'ring.\",\n  errorCreatingChat: \"Chat yaratishda xatolik yuz berdi. Iltimos, keyinroq qayta urinib ko'ring.\",\n  errorSendingMessage: \"Kechirasiz, xabar yuborishda xatolik yuz berdi. Iltimos, keyinroq qayta urinib ko'ring.\",\n  threadNotFoundMessage: 'Sizning chatingiz tugatilgan yoki topilmadi. Yangi chat boshlaymiz.',\n\n  // Date formatting\n  months: [\n    'Yanvar',\n    'Fevral',\n    'Mart',\n    'Aprel',\n    'May',\n    'Iyun',\n    'Iyul',\n    'Avgust',\n    'Sentabr',\n    'Oktabr',\n    'Noyabr',\n    'Dekabr',\n  ],\n};\n\n// Uzbek translations (Cyrillic script)\nexport const uzCyrl: Translations = {\n  // Header\n  chatbotTitle: 'AI суҳбат боти',\n  chatbotSubtitle: 'Бизнинг AI-ботимиз сизга 24/7 ёрдам беришга тайёр',\n\n  // Welcome message\n  welcomeGreeting: 'Салом! Мен Euroasia Insurance виртуал ёрдамчисиман 👋',\n  welcomeMessage:\n    'Суғурта полисини расмийлаштириш, нархни ҳисоблаш ва ҳар қандай саволлар бўйича ёрдам беришга тайёрман.',\n  phoneRequestMessage:\n    'Бошлаш учун, илтимос, телефон рақамингизни киритинг — биз ундан алоқа ва мурожаат тарихини сақлаш учун фойдаланамиз.',\n\n  // Input placeholders\n  phoneInputPlaceholder: '+ 998 (__) ___ __ __',\n  messageInputPlaceholder: 'Хабарлар',\n\n  // Buttons\n  sendButton: 'Юбориш',\n  callbackRequestButton: 'Қайта қўнғироқ сўрови',\n\n  // Quick replies\n  extendPolicyQuestion: 'Полисни қандай узайтириш мумкин?',\n  findContractNumberQuestion: 'Шартнома рақамини қаердан топиш мумкин?',\n  submitClaimQuestion: 'Суғурта ҳодисаси бўйича аризани қандай топшириш керак?',\n\n  // Callback modal\n  callbackModalTitle: 'Қайта қўнғироқ буюртма қилинг',\n  callbackModalSubtitle:\n    'Телефон рақамингизни қолдиринг, ва бизнинг мутахассисимиз сиз билан яқин вақт ичида боғланади',\n  callbackPhoneInputLabel: 'Телефон рақамини киритинг',\n  dataPrivacyMessage: 'Биз сизнинг маълумотларингизни учинчи шахсларга бермайди',\n  dataProcessingConsent: 'Шахсий маълумотларни қайта ишлашга розиман',\n  backButton: 'Орқага',\n  requestCallButton: 'Қўнғироқ буюртма қилиш',\n\n  // Messages\n  callbackConfirmation: 'Сўров учун раҳмат! Мутахассисимиз {phone} рақами орқали сиз билан яқин вақт ичида боғланади.',\n  errorLoadingMessages: 'Хабарлар тарихини юклаб бўлмади. Илтимос, кейинроқ қайта уриниб кўринг.',\n  errorCreatingChat: 'Чат яратишда хатолик юз берди. Илтимос, кейинроқ қайта уриниб кўринг.',\n  errorSendingMessage: 'Кечирасиз, хабар юборишда хатолик юз берди. Илтимос, кейинроқ қайта уриниб кўринг.',\n  threadNotFoundMessage: 'Сизнинг чатингиз тугатилган ёки топилмади. Янги чат бошлаймиз.',\n\n  // Date formatting\n  months: [\n    'Январь',\n    'Февраль',\n    'Март',\n    'Апрель',\n    'Май',\n    'Июнь',\n    'Июль',\n    'Август',\n    'Сентябрь',\n    'Октябрь',\n    'Ноябрь',\n    'Декабрь',\n  ],\n};\n\n// English translations\nexport const en: Translations = {\n  // Header\n  chatbotTitle: 'AI chat bot',\n  chatbotSubtitle: 'Our AI bot is ready to help you 24/7',\n\n  // Welcome message\n  welcomeGreeting: \"Hello! I'm the virtual assistant of Euroasia Insurance 👋\",\n  welcomeMessage: \"I'm ready to help you with policy registration, cost calculation, and any questions you may have.\",\n  phoneRequestMessage:\n    'To get started, please enter your phone number — we use it for communication and to save your request history.',\n\n  // Input placeholders\n  phoneInputPlaceholder: '+ 998 (__) ___ __ __',\n  messageInputPlaceholder: 'Messages',\n\n  // Buttons\n  sendButton: 'Send',\n  callbackRequestButton: 'Request a callback',\n\n  // Quick replies\n  extendPolicyQuestion: 'How to extend my policy?',\n  findContractNumberQuestion: 'Where to find my contract number?',\n  submitClaimQuestion: 'How to submit an insurance claim?',\n\n  // Callback modal\n  callbackModalTitle: 'Request a callback',\n  callbackModalSubtitle: 'Leave your phone number, and our specialist will contact you shortly',\n  callbackPhoneInputLabel: 'Enter phone number',\n  dataPrivacyMessage: \"We don't share your data with third parties\",\n  dataProcessingConsent: 'I agree to the processing of personal data',\n  backButton: 'Back',\n  requestCallButton: 'Request call',\n\n  // Messages\n  callbackConfirmation: 'Thank you for your request! Our specialist will contact you at {phone} shortly.',\n  errorLoadingMessages: 'Failed to load message history. Please try again later.',\n  errorCreatingChat: 'An error occurred while creating the chat. Please try again later.',\n  errorSendingMessage: 'Sorry, an error occurred while sending the message. Please try again later.',\n  threadNotFoundMessage: 'Your chat has been ended or not found. Starting a new chat.',\n\n  // Date formatting\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n};\n\n// Map of all available translations\nexport const translations: Record<string, Translations> = {\n  ru,\n  uz,\n  uzCyrl,\n  en,\n};\n\n// Function to get translations for a specific locale\nexport function getTranslations(locale: string): Translations {\n  return translations[locale] || en; // Fallback to English if locale not found\n}\n","'use client';\n\nimport * as React from 'react';\n\nimport { ChevronDown, Send } from 'lucide-react';\nimport { useState, useRef, useEffect } from 'react';\nimport { formatDate } from '@/lib/utils';\nimport { CallbackModal } from '@/components/callback-modal';\nimport { TypingIndicator } from '@/components/typing-indicator';\nimport { QuickReplyButtons } from '@/components/quick-reply-buttons';\nimport { chatApi } from '@/lib/api-service';\nimport { getTranslations, type Translations } from '@/lib/translations';\n\n// Message type definition for UI\nexport type ChatMessage = {\n  id: string\n  content: string\n  sender: 'user' | 'bot'\n  timestamp: Date\n}\n\n// FAQ item type\nexport interface FAQItem {\n  id: string\n  question: string\n}\n\n// Message component\ninterface MessageBubbleProps {\n  message: ChatMessage\n  translations: Translations\n  botTitle?: string\n}\n\nconst MessageBubble = ({ message, translations, botTitle }: MessageBubbleProps) => {\n  return (\n    <div\n      className={`max-w-[80%] w-fit ${message.sender === 'user'\n        ? 'ml-auto bg-[#dce6f3] rounded-tl-2xl rounded-tr-2xl rounded-bl-2xl p-3'\n        : 'bg-white rounded-tr-2xl rounded-tl-2xl rounded-br-xl p-4 shadow-sm'\n        }`}\n    >\n      {message.sender === 'bot' && (\n        <div className=\"text-[#2e67b4] font-medium mb-2\">{botTitle || translations.chatbotTitle}</div>\n      )}\n      <p className=\"whitespace-pre-line\">{message.content}</p>\n    </div>\n  );\n};\n\ninterface ChatbotInterfaceProps {\n  locale?: string\n  apiEndpoint: string // Required prop - direct API endpoint\n  faqItems?: FAQItem[]\n  title?: string\n  subtitle?: string\n}\n\nexport default function ChatbotInterface({\n  locale = 'ru',\n  apiEndpoint, // Direct API endpoint (required)\n  faqItems,\n  title,\n  subtitle,\n}: ChatbotInterfaceProps) {\n  // Get translations for the specified locale\n  const translations = getTranslations(locale);\n\n  // Set API endpoint\n  useEffect(() => {\n    if (apiEndpoint) {\n      chatApi.setApiEndpoint(apiEndpoint);\n    }\n  }, [apiEndpoint]);\n\n  const [phoneSubmitted, setPhoneSubmitted] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [showDateHeader, setShowDateHeader] = useState(false);\n  const [isCallbackModalOpen, setIsCallbackModalOpen] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [threadId, setThreadId] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [isOpen, setIsOpen] = useState(true);\n  const [windowHeight, setWindowHeight] = useState(0);\n\n  const chatbotTitle = title || translations.chatbotTitle;\n  const chatbotSubtitle = subtitle || translations.chatbotSubtitle;\n\n  const handleResetChat = React.useCallback(() => {\n    localStorage.removeItem('chatThreadId');\n    localStorage.removeItem('chatPhoneNumber');\n    setThreadId(null);\n    setPhoneSubmitted(false);\n    setPhoneNumber('');\n    setError(null);\n    setMessages([\n      {\n        id: 'welcome',\n        content: `${translations.welcomeGreeting}\\n\\n${translations.welcomeMessage}`,\n        sender: 'bot',\n        timestamp: new Date(),\n      },\n    ]);\n  }, [translations, setThreadId, setPhoneSubmitted, setPhoneNumber, setError, setMessages]);\n\n  const handle404Error = React.useCallback(() => {\n    const errorMsg: ChatMessage = {\n      id: `bot-error-${Date.now()}`,\n      content: translations.threadNotFoundMessage,\n      sender: 'bot',\n      timestamp: new Date(),\n    };\n\n    setMessages([errorMsg]);\n\n    handleResetChat();\n  }, [translations, setMessages, handleResetChat]);\n\n  const fetchMessages = React.useCallback(async (threadId: string) => {\n    try {\n      setIsTyping(true);\n      setError(null);\n\n      const response = await chatApi.getMessages(threadId);\n\n      const chatMessages: ChatMessage[] = response.messages.map((msg, index) => ({\n        id: `${msg.role}-${index}`,\n        content: msg.message,\n        sender: msg.role === 'user' ? 'user' : 'bot',\n        timestamp: new Date(), // API doesn't provide timestamps, so we use current time\n      }));\n\n      setMessages(chatMessages);\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('404')) {\n        handle404Error();\n        return;\n      }\n\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      setError(`${translations.errorLoadingMessages}: ${errorMessage}`);\n\n      setMessages([\n        {\n          id: 'error',\n          content: translations.errorLoadingMessages,\n          sender: 'bot',\n          timestamp: new Date(),\n        },\n      ]);\n    } finally {\n      setIsTyping(false);\n    }\n  }, [setIsTyping, setError, setMessages, handle404Error, translations]);\n\n\n\n  useEffect(() => {\n    const updateWindowHeight = () => {\n      setWindowHeight(window.innerHeight);\n    };\n\n    updateWindowHeight();\n\n    window.addEventListener('resize', updateWindowHeight);\n\n    return () => window.removeEventListener('resize', updateWindowHeight);\n  }, []);\n\n  useEffect(() => {\n    const storedThreadId = localStorage.getItem('chatThreadId');\n    const storedPhone = localStorage.getItem('chatPhoneNumber');\n\n    if (storedThreadId && storedPhone) {\n      setThreadId(storedThreadId);\n      setPhoneNumber(storedPhone);\n      setPhoneSubmitted(true);\n      setShowDateHeader(true);\n      fetchMessages(storedThreadId);\n    } else {\n      setMessages([\n        {\n          id: 'welcome',\n          content: `${translations.welcomeGreeting}\\n\\n${translations.welcomeMessage}`,\n          sender: 'bot',\n          timestamp: new Date(),\n        },\n      ]);\n    }\n\n    if (storedThreadId) {\n      localStorage.removeItem('newThreadId');\n    }\n  }, [translations, fetchMessages]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isTyping]);\n\n  const handlePhoneSubmit = async () => {\n    if (phoneNumber.trim().length === 0) { return; }\n\n    try {\n      setIsTyping(true);\n      setError(null);\n\n      // Create thread without initial message\n      const response = await chatApi.createThread({\n        message: \"\", // Empty message instead of hardcoded text\n        phone: phoneNumber,\n      });\n\n      setThreadId(response.thread_id);\n      localStorage.setItem('newThreadId', response.thread_id);\n      localStorage.setItem('chatThreadId', response.thread_id);\n      localStorage.setItem('chatPhoneNumber', phoneNumber);\n\n      setPhoneSubmitted(true);\n      setShowDateHeader(true);\n\n      // Don't add any initial user message\n      setMessages([]);\n\n      await fetchMessages(response.thread_id);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      setError(`${translations.errorCreatingChat}: ${errorMessage}`);\n\n      setMessages([\n        {\n          id: 'error',\n          content: translations.errorCreatingChat,\n          sender: 'bot',\n          timestamp: new Date(),\n        },\n      ]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (currentMessage.trim().length === 0 || !threadId) { return; }\n\n    const userMessage: ChatMessage = {\n      id: `user-${Date.now()}`,\n      content: currentMessage,\n      sender: 'user',\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    const messageToSend = currentMessage;\n    setCurrentMessage('');\n    setError(null);\n\n    setIsTyping(true);\n\n    try {\n      await chatApi.addMessage(threadId, {\n        message: messageToSend,\n      });\n\n      const response = await chatApi.getMessages(threadId);\n\n      const assistantMessages = response.messages.filter((msg) => msg.role === 'assistant');\n      if (assistantMessages.length > 0) {\n        const latestAssistantMessage = assistantMessages[assistantMessages.length - 1];\n\n        const botMessage: ChatMessage = {\n          id: `bot-${Date.now()}`,\n          content: latestAssistantMessage.message,\n          sender: 'bot',\n          timestamp: new Date(),\n        };\n\n        setMessages((prev) => {\n          // Check if this message is already in the list to avoid duplicates\n          const isDuplicate = prev.some((msg) => msg.sender === 'bot' && msg.content === latestAssistantMessage.message);\n\n          if (isDuplicate) { return prev; }\n          return [...prev, botMessage];\n        });\n      }\n    } catch (error) {\n      // Check if it's a 404 error (thread not found)\n      if (error instanceof Error && error.message.includes('404')) {\n        handle404Error();\n        return;\n      }\n\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      setError(`${translations.errorSendingMessage}: ${errorMessage}`);\n\n      // Add error message to UI\n      const errorMsg: ChatMessage = {\n        id: `bot-error-${Date.now()}`,\n        content: translations.errorSendingMessage,\n        sender: 'bot',\n        timestamp: new Date(),\n      };\n\n      setMessages((prev) => [...prev, errorMsg]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  // Handle quick reply button click\n  const handleQuickReply = (question: string) => {\n    setCurrentMessage(question);\n    setTimeout(() => {\n      handleSendMessage();\n    }, 100);\n  };\n\n  // Handle Enter key press\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      phoneSubmitted ? handleSendMessage() : handlePhoneSubmit();\n    }\n  };\n\n  // Handle callback request submission\n  const handleCallbackSubmit = (callbackPhone: string) => {\n    // Add bot confirmation message\n    const botMessage: ChatMessage = {\n      id: `bot-${Date.now()}`,\n      content: translations.callbackConfirmation.replace('{phone}', callbackPhone),\n      sender: 'bot',\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, botMessage]);\n\n    // In a real application, you would send this request to your backend\n  };\n\n  // Calculate chat dimensions\n  const chatWidth = 450;\n  const headerHeight = 60;\n  const maxChatHeight = windowHeight ? Math.min(windowHeight * 0.8, 700) : 600;\n  const contentHeight = maxChatHeight - headerHeight;\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      <div\n        className={`overflow-hidden bg-white rounded-lg shadow-lg transition-all duration-300 ${isOpen ? 'opacity-100' : 'opacity-95'\n          }`}\n        style={{\n          width: `${chatWidth}px`,\n          height: isOpen ? `${maxChatHeight}px` : `${headerHeight}px`,\n        }}\n      >\n        {/* Header */}\n        <div\n          className=\"relative bg-[#0a223e] text-white p-4 flex items-center cursor-pointer\"\n          style={{ height: `${headerHeight}px` }}\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          <div className=\"w-10 h-10 bg-[#8b98a5] rounded-full flex items-center justify-center mr-3\">\n            <span className=\"text-white\">•••</span>\n          </div>\n          <div>\n            <h1 className=\"text-xl font-medium\">{chatbotTitle}</h1>\n            <p className=\"text-sm opacity-90\">{chatbotSubtitle}</p>\n          </div>\n          <ChevronDown\n            className={`absolute right-4 top-1/2 transform -translate-y-1/2 transition-transform duration-300 ${isOpen ? '' : 'rotate-180'\n              }`}\n          />\n        </div>\n\n        {isOpen && (\n          <div className=\"flex flex-col\" style={{ height: `${contentHeight}px` }}>\n            {/* Chat Area */}\n            <div className=\"bg-[#f2f5f8] p-4 flex-grow overflow-y-auto\">\n              {!phoneSubmitted ? (\n                <div className=\"bg-white rounded-tr-2xl rounded-tl-2xl rounded-br-xl p-4 shadow-sm\">\n                  <div className=\"text-[#2e67b4] font-medium mb-2\">{chatbotTitle}</div>\n                  <p className=\"mb-2\">{translations.welcomeGreeting}</p>\n                  <p className=\"mb-4\">{translations.welcomeMessage}</p>\n                  <p className=\"flex items-start\">\n                    <span className=\"inline-block mr-2 mt-1\">🔒</span>\n                    <span>{translations.phoneRequestMessage}</span>\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {showDateHeader && (\n                    <div className=\"text-center text-[#8b98a5] text-sm py-2\">\n                      {formatDate(new Date(), translations)}\n                    </div>\n                  )}\n\n                  {error && (\n                    <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\">\n                      <span className=\"block sm:inline\">{error}</span>\n                    </div>\n                  )}\n\n                  {messages.map((message) => (\n                    <MessageBubble\n                      key={message.id}\n                      message={message}\n                      translations={translations}\n                      botTitle={chatbotTitle}\n                    />\n                  ))}\n\n                  {/* Typing indicator */}\n                  {isTyping && <TypingIndicator translations={translations} botTitle={chatbotTitle} />}\n\n                  <div ref={messagesEndRef} />\n                </div>\n              )}\n            </div>\n\n            {/* Input Area */}\n            <div className=\"p-4 bg-white shrink-0\">\n              {!phoneSubmitted ? (\n                /* Phone Input */\n                <div className=\"flex items-center p-3 mb-4 bg-[#f2f5f8] rounded-lg\">\n                  <input\n                    type=\"text\"\n                    className=\"bg-transparent focus:outline-none text-[#0a223e] flex-1\"\n                    placeholder={translations.phoneInputPlaceholder}\n                    value={phoneNumber}\n                    onChange={(e) => setPhoneNumber(e.target.value)}\n                    onKeyDown={handleKeyPress}\n                  />\n                  <button onClick={handlePhoneSubmit} disabled={isTyping}>\n                    <Send className={`ml-auto ${isTyping ? 'text-[#8b98a5]' : 'text-[#0a223e]'}`} size={20} />\n                  </button>\n                </div>\n              ) : (\n                /* Message Input */\n                <div className=\"flex items-center p-3 mb-4 bg-[#f2f5f8] rounded-lg\">\n                  <input\n                    type=\"text\"\n                    className=\"bg-transparent focus:outline-none text-[#0a223e] flex-1\"\n                    placeholder={translations.messageInputPlaceholder}\n                    value={currentMessage}\n                    onChange={(e) => setCurrentMessage(e.target.value)}\n                    onKeyDown={handleKeyPress}\n                    disabled={isTyping}\n                  />\n                  <button onClick={handleSendMessage} disabled={isTyping || currentMessage.trim().length === 0}>\n                    <Send\n                      className={`ml-auto ${currentMessage.trim() && !isTyping ? 'text-[#0a223e]' : 'text-[#8b98a5]'}`}\n                      size={20}\n                    />\n                  </button>\n                </div>\n              )}\n\n              {/* Quick Reply Buttons - only show for new conversations */}\n              {(!threadId || threadId === localStorage.getItem('newThreadId')) && (\n                <QuickReplyButtons\n                  translations={translations}\n                  isTyping={isTyping}\n                  onQuickReply={handleQuickReply}\n                  faqItems={faqItems}\n                />\n              )}\n\n              {/* Send Button */}\n              <button\n                className={`w-full py-3 rounded-lg mb-4 ${phoneSubmitted && currentMessage.trim() && !isTyping\n                  ? 'bg-[#2e67b4] text-white'\n                  : 'bg-[#e4e9ee] text-[#bdc8d2]'\n                  }`}\n                onClick={phoneSubmitted ? handleSendMessage : handlePhoneSubmit}\n                disabled={\n                  (phoneSubmitted ? currentMessage.trim().length === 0 : phoneNumber.trim().length === 0) || isTyping\n                }\n              >\n                {translations.sendButton}\n              </button>\n\n              {/* Request Callback Button */}\n              <button\n                className=\"w-full py-3 border border-[#2e67b4] text-[#2e67b4] rounded-lg\"\n                onClick={() => setIsCallbackModalOpen(true)}\n                disabled={isTyping}\n              >\n                {translations.callbackRequestButton}\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Callback Request Modal */}\n      {isCallbackModalOpen && (\n        <CallbackModal\n          isOpen={isCallbackModalOpen}\n          onClose={() => setIsCallbackModalOpen(false)}\n          onSubmit={handleCallbackSubmit}\n          translations={translations}\n        />\n      )}\n    </div>\n  );\n}\n"]}